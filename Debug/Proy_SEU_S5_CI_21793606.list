
Proy_SEU_S5_CI_21793606.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007460  08007460  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007460  08007460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007468  08007468  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007468  08007468  00017468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800746c  0800746c  0001746c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dfc  20000074  080074e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e70  080074e4  00024e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017740  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d9  00000000  00000000  000377e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  0003aec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  0003bd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001972f  00000000  00000000  0003ca28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001241f  00000000  00000000  00056157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e82  00000000  00000000  00068576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f93f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004250  00000000  00000000  000f944c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007254 	.word	0x08007254

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007254 	.word	0x08007254

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000598:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <vApplicationGetIdleTaskMemory+0x30>)
 800059e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000090 	.word	0x20000090
 80005b8:	200000e4 	.word	0x200000e4

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b5b0      	push	{r4, r5, r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f001 f9b5 	bl	8001930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f823 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f915 	bl	80007f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ce:	f000 f8dd 	bl	800078c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005d2:	f000 f8b1 	bl	8000738 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005d6:	f000 f885 	bl	80006e4 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <main+0x4c>)
 80005dc:	1d3c      	adds	r4, r7, #4
 80005de:	461d      	mov	r5, r3
 80005e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 fb42 	bl	8003c7a <osThreadCreate>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a04      	ldr	r2, [pc, #16]	; (800060c <main+0x50>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  serie_Init_FreeRTOS();
 80005fc:	f000 fc34 	bl	8000e68 <serie_Init_FreeRTOS>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000600:	f003 fb34 	bl	8003c6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000604:	e7fe      	b.n	8000604 <main+0x48>
 8000606:	bf00      	nop
 8000608:	08007278 	.word	0x08007278
 800060c:	20004044 	.word	0x20004044

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f005 fe3a 	bl	8006298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	; (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000680:	2310      	movs	r3, #16
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000684:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000688:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068a:	2304      	movs	r3, #4
 800068c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068e:	2304      	movs	r3, #4
 8000690:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	4618      	mov	r0, r3
 8000698:	f002 f84c 	bl	8002734 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006a2:	f000 f91f 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2102      	movs	r1, #2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 faae 	bl	8002c24 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ce:	f000 f909 	bl	80008e4 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_USART1_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 800071c:	f002 fc7e 	bl	800301c <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 f8dd 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20004108 	.word	0x20004108
 8000734:	40011000 	.word	0x40011000

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <MX_USART2_UART_Init+0x50>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000770:	f002 fc54 	bl	800301c <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077a:	f000 f8b3 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200041ac 	.word	0x200041ac
 8000788:	40004400 	.word	0x40004400

0800078c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_DMA_Init+0x68>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <MX_DMA_Init+0x68>)
 800079c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_DMA_Init+0x68>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_DMA_Init+0x68>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <MX_DMA_Init+0x68>)
 80007b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <MX_DMA_Init+0x68>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2105      	movs	r1, #5
 80007ce:	2010      	movs	r0, #16
 80007d0:	f001 f9fb 	bl	8001bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007d4:	2010      	movs	r0, #16
 80007d6:	f001 fa14 	bl	8001c02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2105      	movs	r1, #5
 80007de:	203a      	movs	r0, #58	; 0x3a
 80007e0:	f001 f9f3 	bl	8001bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80007e4:	203a      	movs	r0, #58	; 0x3a
 80007e6:	f001 fa0c 	bl	8001c02 <HAL_NVIC_EnableIRQ>

}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a2c      	ldr	r2, [pc, #176]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a25      	ldr	r2, [pc, #148]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a1e      	ldr	r2, [pc, #120]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <MX_GPIO_Init+0xd0>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	4812      	ldr	r0, [pc, #72]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000884:	f001 ff3c 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_GPIO_Init+0xd8>)
 80008a0:	f001 fdaa 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a4:	2320      	movs	r3, #32
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_GPIO_Init+0xd4>)
 80008bc:	f001 fd9c 	bl	80023f8 <HAL_GPIO_Init>

}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020800 	.word	0x40020800

080008d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008dc:	2001      	movs	r0, #1
 80008de:	f003 fa18 	bl	8003d12 <osDelay>
 80008e2:	e7fb      	b.n	80008dc <StartDefaultTask+0x8>

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_MspInit+0x54>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	4a11      	ldr	r2, [pc, #68]	; (8000944 <HAL_MspInit+0x54>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000904:	6453      	str	r3, [r2, #68]	; 0x44
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_MspInit+0x54>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <HAL_MspInit+0x54>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <HAL_MspInit+0x54>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_MspInit+0x54>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	210f      	movs	r1, #15
 8000932:	f06f 0001 	mvn.w	r0, #1
 8000936:	f001 f948 	bl	8001bca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	; 0x30
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a60      	ldr	r2, [pc, #384]	; (8000ae8 <HAL_UART_MspInit+0x1a0>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d15b      	bne.n	8000a22 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
 800096e:	4b5f      	ldr	r3, [pc, #380]	; (8000aec <HAL_UART_MspInit+0x1a4>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a5e      	ldr	r2, [pc, #376]	; (8000aec <HAL_UART_MspInit+0x1a4>)
 8000974:	f043 0310 	orr.w	r3, r3, #16
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b5c      	ldr	r3, [pc, #368]	; (8000aec <HAL_UART_MspInit+0x1a4>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	4b58      	ldr	r3, [pc, #352]	; (8000aec <HAL_UART_MspInit+0x1a4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a57      	ldr	r2, [pc, #348]	; (8000aec <HAL_UART_MspInit+0x1a4>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b55      	ldr	r3, [pc, #340]	; (8000aec <HAL_UART_MspInit+0x1a4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009b4:	2307      	movs	r3, #7
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	484c      	ldr	r0, [pc, #304]	; (8000af0 <HAL_UART_MspInit+0x1a8>)
 80009c0:	f001 fd1a 	bl	80023f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80009c4:	4b4b      	ldr	r3, [pc, #300]	; (8000af4 <HAL_UART_MspInit+0x1ac>)
 80009c6:	4a4c      	ldr	r2, [pc, #304]	; (8000af8 <HAL_UART_MspInit+0x1b0>)
 80009c8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80009ca:	4b4a      	ldr	r3, [pc, #296]	; (8000af4 <HAL_UART_MspInit+0x1ac>)
 80009cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009d0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009d2:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <HAL_UART_MspInit+0x1ac>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d8:	4b46      	ldr	r3, [pc, #280]	; (8000af4 <HAL_UART_MspInit+0x1ac>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009de:	4b45      	ldr	r3, [pc, #276]	; (8000af4 <HAL_UART_MspInit+0x1ac>)
 80009e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009e6:	4b43      	ldr	r3, [pc, #268]	; (8000af4 <HAL_UART_MspInit+0x1ac>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ec:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <HAL_UART_MspInit+0x1ac>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80009f2:	4b40      	ldr	r3, [pc, #256]	; (8000af4 <HAL_UART_MspInit+0x1ac>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009f8:	4b3e      	ldr	r3, [pc, #248]	; (8000af4 <HAL_UART_MspInit+0x1ac>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009fe:	4b3d      	ldr	r3, [pc, #244]	; (8000af4 <HAL_UART_MspInit+0x1ac>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a04:	483b      	ldr	r0, [pc, #236]	; (8000af4 <HAL_UART_MspInit+0x1ac>)
 8000a06:	f001 f917 	bl	8001c38 <HAL_DMA_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000a10:	f7ff ff68 	bl	80008e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a37      	ldr	r2, [pc, #220]	; (8000af4 <HAL_UART_MspInit+0x1ac>)
 8000a18:	639a      	str	r2, [r3, #56]	; 0x38
 8000a1a:	4a36      	ldr	r2, [pc, #216]	; (8000af4 <HAL_UART_MspInit+0x1ac>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a20:	e05e      	b.n	8000ae0 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a35      	ldr	r2, [pc, #212]	; (8000afc <HAL_UART_MspInit+0x1b4>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d159      	bne.n	8000ae0 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	4b2e      	ldr	r3, [pc, #184]	; (8000aec <HAL_UART_MspInit+0x1a4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a2d      	ldr	r2, [pc, #180]	; (8000aec <HAL_UART_MspInit+0x1a4>)
 8000a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <HAL_UART_MspInit+0x1a4>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	4b27      	ldr	r3, [pc, #156]	; (8000aec <HAL_UART_MspInit+0x1a4>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4a26      	ldr	r2, [pc, #152]	; (8000aec <HAL_UART_MspInit+0x1a4>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6313      	str	r3, [r2, #48]	; 0x30
 8000a58:	4b24      	ldr	r3, [pc, #144]	; (8000aec <HAL_UART_MspInit+0x1a4>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a64:	230c      	movs	r3, #12
 8000a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a74:	2307      	movs	r3, #7
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	481c      	ldr	r0, [pc, #112]	; (8000af0 <HAL_UART_MspInit+0x1a8>)
 8000a80:	f001 fcba 	bl	80023f8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <HAL_UART_MspInit+0x1b8>)
 8000a86:	4a1f      	ldr	r2, [pc, #124]	; (8000b04 <HAL_UART_MspInit+0x1bc>)
 8000a88:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <HAL_UART_MspInit+0x1b8>)
 8000a8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a90:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a92:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <HAL_UART_MspInit+0x1b8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_UART_MspInit+0x1b8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_UART_MspInit+0x1b8>)
 8000aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aa4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_UART_MspInit+0x1b8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <HAL_UART_MspInit+0x1b8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <HAL_UART_MspInit+0x1b8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_UART_MspInit+0x1b8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_UART_MspInit+0x1b8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ac4:	480e      	ldr	r0, [pc, #56]	; (8000b00 <HAL_UART_MspInit+0x1b8>)
 8000ac6:	f001 f8b7 	bl	8001c38 <HAL_DMA_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8000ad0:	f7ff ff08 	bl	80008e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_UART_MspInit+0x1b8>)
 8000ad8:	639a      	str	r2, [r3, #56]	; 0x38
 8000ada:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <HAL_UART_MspInit+0x1b8>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000ae0:	bf00      	nop
 8000ae2:	3730      	adds	r7, #48	; 0x30
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40011000 	.word	0x40011000
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020000 	.word	0x40020000
 8000af4:	200040a8 	.word	0x200040a8
 8000af8:	40026440 	.word	0x40026440
 8000afc:	40004400 	.word	0x40004400
 8000b00:	20004048 	.word	0x20004048
 8000b04:	40026088 	.word	0x40026088

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 ff4c 	bl	80019d4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b3c:	f004 fb78 	bl	8005230 <xTaskGetSchedulerState>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d001      	beq.n	8000b4a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b46:	f004 ff57 	bl	80059f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <DMA1_Stream5_IRQHandler+0x10>)
 8000b56:	f001 f9e5 	bl	8001f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20004048 	.word	0x20004048

08000b64 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <DMA2_Stream2_IRQHandler+0x10>)
 8000b6a:	f001 f9db 	bl	8001f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200040a8 	.word	0x200040a8

08000b78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	e00a      	b.n	8000ba0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b8a:	f3af 8000 	nop.w
 8000b8e:	4601      	mov	r1, r0
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	60ba      	str	r2, [r7, #8]
 8000b96:	b2ca      	uxtb	r2, r1
 8000b98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	dbf0      	blt.n	8000b8a <_read+0x12>
	}

return len;
 8000ba8:	687b      	ldr	r3, [r7, #4]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
	return -1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bda:	605a      	str	r2, [r3, #4]
	return 0;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <_isatty>:

int _isatty(int file)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
	return 1;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c24:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <_sbrk+0x5c>)
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <_sbrk+0x60>)
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <_sbrk+0x64>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <_sbrk+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d207      	bcs.n	8000c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c4c:	f005 f90e 	bl	8005e6c <__errno>
 8000c50:	4603      	mov	r3, r0
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	e009      	b.n	8000c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <_sbrk+0x64>)
 8000c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20020000 	.word	0x20020000
 8000c7c:	00000400 	.word	0x00000400
 8000c80:	200002e4 	.word	0x200002e4
 8000c84:	20004e70 	.word	0x20004e70

08000c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SystemInit+0x20>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <SystemInit+0x20>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <Task_DMA>:
extern uint8_t buffer_DMA_1[buffer_SIZE];
extern uint8_t buffer_DMA_2[buffer_SIZE];



void Task_DMA( void *pvParameters ){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef res;
	uint32_t nbuff;



    hdma_usart2_rx2.Instance = DMA1_Stream7;
 8000cb4:	4b54      	ldr	r3, [pc, #336]	; (8000e08 <Task_DMA+0x15c>)
 8000cb6:	4a55      	ldr	r2, [pc, #340]	; (8000e0c <Task_DMA+0x160>)
 8000cb8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx2.Init.Channel = DMA_CHANNEL_6;
 8000cba:	4b53      	ldr	r3, [pc, #332]	; (8000e08 <Task_DMA+0x15c>)
 8000cbc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000cc0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc2:	4b51      	ldr	r3, [pc, #324]	; (8000e08 <Task_DMA+0x15c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc8:	4b4f      	ldr	r3, [pc, #316]	; (8000e08 <Task_DMA+0x15c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx2.Init.MemInc = DMA_MINC_ENABLE;
 8000cce:	4b4e      	ldr	r3, [pc, #312]	; (8000e08 <Task_DMA+0x15c>)
 8000cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cd4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cd6:	4b4c      	ldr	r3, [pc, #304]	; (8000e08 <Task_DMA+0x15c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cdc:	4b4a      	ldr	r3, [pc, #296]	; (8000e08 <Task_DMA+0x15c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx2.Init.Mode = DMA_NORMAL;
 8000ce2:	4b49      	ldr	r3, [pc, #292]	; (8000e08 <Task_DMA+0x15c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx2.Init.Priority = DMA_PRIORITY_LOW;
 8000ce8:	4b47      	ldr	r3, [pc, #284]	; (8000e08 <Task_DMA+0x15c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cee:	4b46      	ldr	r3, [pc, #280]	; (8000e08 <Task_DMA+0x15c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24



    if (HAL_DMA_Init(&hdma_usart2_rx2) != HAL_OK)
 8000cf4:	4844      	ldr	r0, [pc, #272]	; (8000e08 <Task_DMA+0x15c>)
 8000cf6:	f000 ff9f 	bl	8001c38 <HAL_DMA_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <Task_DMA+0x58>
    {
      Error_Handler();
 8000d00:	f7ff fdf0 	bl	80008e4 <Error_Handler>
    }

	nbuff=0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
	res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_1,buffer_SIZE); // Para arrancar
 8000d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0c:	4940      	ldr	r1, [pc, #256]	; (8000e10 <Task_DMA+0x164>)
 8000d0e:	4841      	ldr	r0, [pc, #260]	; (8000e14 <Task_DMA+0x168>)
 8000d10:	f002 fa63 	bl	80031da <HAL_UART_Receive_DMA>
 8000d14:	4603      	mov	r3, r0
 8000d16:	73fb      	strb	r3, [r7, #15]

	it=0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
	while(1){

		switch (nbuff){
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <Task_DMA+0x7e>
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d032      	beq.n	8000d8e <Task_DMA+0xe2>
 8000d28:	e066      	b.n	8000df8 <Task_DMA+0x14c>
		case 0: 	num=hdma_usart2_rx.Instance->NDTR;
 8000d2a:	4b3b      	ldr	r3, [pc, #236]	; (8000e18 <Task_DMA+0x16c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	60bb      	str	r3, [r7, #8]
					if (num<buffer_SIZE){
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d38:	d25b      	bcs.n	8000df2 <Task_DMA+0x146>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3a:	b672      	cpsid	i
}
 8000d3c:	bf00      	nop
						__disable_irq();
						res=HAL_UART_DMAStop_PAS(&huart2);
 8000d3e:	4835      	ldr	r0, [pc, #212]	; (8000e14 <Task_DMA+0x168>)
 8000d40:	f000 fd78 	bl	8001834 <HAL_UART_DMAStop_PAS>
 8000d44:	4603      	mov	r3, r0
 8000d46:	73fb      	strb	r3, [r7, #15]
					   __HAL_LINKDMA(&huart2,hdmarx,hdma_usart2_rx2);
 8000d48:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <Task_DMA+0x168>)
 8000d4a:	4a2f      	ldr	r2, [pc, #188]	; (8000e08 <Task_DMA+0x15c>)
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38
 8000d4e:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <Task_DMA+0x15c>)
 8000d50:	4a30      	ldr	r2, [pc, #192]	; (8000e14 <Task_DMA+0x168>)
 8000d52:	639a      	str	r2, [r3, #56]	; 0x38
					   res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_2,buffer_SIZE);
 8000d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d58:	4930      	ldr	r1, [pc, #192]	; (8000e1c <Task_DMA+0x170>)
 8000d5a:	482e      	ldr	r0, [pc, #184]	; (8000e14 <Task_DMA+0x168>)
 8000d5c:	f002 fa3d 	bl	80031da <HAL_UART_Receive_DMA>
 8000d60:	4603      	mov	r3, r0
 8000d62:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d64:	b662      	cpsie	i
}
 8000d66:	bf00      	nop
					   __enable_irq();
					   nbuff=1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]
					   num=hdma_usart2_rx.Instance->NDTR;
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <Task_DMA+0x16c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	60bb      	str	r3, [r7, #8]
					   res=buff->puts(buff_rx,buffer_DMA_1,buffer_SIZE-num);
 8000d74:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <Task_DMA+0x174>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	4a2a      	ldr	r2, [pc, #168]	; (8000e24 <Task_DMA+0x178>)
 8000d7c:	6810      	ldr	r0, [r2, #0]
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8000d84:	4922      	ldr	r1, [pc, #136]	; (8000e10 <Task_DMA+0x164>)
 8000d86:	4798      	blx	r3
 8000d88:	4603      	mov	r3, r0
 8000d8a:	73fb      	strb	r3, [r7, #15]
					}else
						;

					break;
 8000d8c:	e031      	b.n	8000df2 <Task_DMA+0x146>
		case 1:
	    			num=hdma_usart2_rx2.Instance->NDTR;
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <Task_DMA+0x15c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	60bb      	str	r3, [r7, #8]
	    			if (num<buffer_SIZE){
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d9c:	d22b      	bcs.n	8000df6 <Task_DMA+0x14a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9e:	b672      	cpsid	i
}
 8000da0:	bf00      	nop
	    				__disable_irq();
	    				res=HAL_UART_DMAStop_PAS(&huart2);
 8000da2:	481c      	ldr	r0, [pc, #112]	; (8000e14 <Task_DMA+0x168>)
 8000da4:	f000 fd46 	bl	8001834 <HAL_UART_DMAStop_PAS>
 8000da8:	4603      	mov	r3, r0
 8000daa:	73fb      	strb	r3, [r7, #15]
	    				__HAL_LINKDMA(&huart2,hdmarx,hdma_usart2_rx);
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <Task_DMA+0x168>)
 8000dae:	4a1a      	ldr	r2, [pc, #104]	; (8000e18 <Task_DMA+0x16c>)
 8000db0:	639a      	str	r2, [r3, #56]	; 0x38
 8000db2:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <Task_DMA+0x16c>)
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <Task_DMA+0x168>)
 8000db6:	639a      	str	r2, [r3, #56]	; 0x38
	    				res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_1,buffer_SIZE);
 8000db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dbc:	4914      	ldr	r1, [pc, #80]	; (8000e10 <Task_DMA+0x164>)
 8000dbe:	4815      	ldr	r0, [pc, #84]	; (8000e14 <Task_DMA+0x168>)
 8000dc0:	f002 fa0b 	bl	80031da <HAL_UART_Receive_DMA>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8000dc8:	b662      	cpsie	i
}
 8000dca:	bf00      	nop
	    				__enable_irq();
	    				nbuff=0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
	    				num=hdma_usart2_rx2.Instance->NDTR;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <Task_DMA+0x15c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	60bb      	str	r3, [r7, #8]
	    				res=buff->puts(buff_rx,buffer_DMA_2,buffer_SIZE-num);
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <Task_DMA+0x174>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <Task_DMA+0x178>)
 8000de0:	6810      	ldr	r0, [r2, #0]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <Task_DMA+0x170>)
 8000dea:	4798      	blx	r3
 8000dec:	4603      	mov	r3, r0
 8000dee:	73fb      	strb	r3, [r7, #15]
	    			}else
	    				;
	    			break;
 8000df0:	e001      	b.n	8000df6 <Task_DMA+0x14a>
					break;
 8000df2:	bf00      	nop
 8000df4:	e000      	b.n	8000df8 <Task_DMA+0x14c>
	    			break;
 8000df6:	bf00      	nop
		}

		it++;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
		vTaskDelay(1/portTICK_RATE_MS );
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f003 fde4 	bl	80049cc <vTaskDelay>
		switch (nbuff){
 8000e04:	e78a      	b.n	8000d1c <Task_DMA+0x70>
 8000e06:	bf00      	nop
 8000e08:	2000414c 	.word	0x2000414c
 8000e0c:	400260b8 	.word	0x400260b8
 8000e10:	20004a58 	.word	0x20004a58
 8000e14:	200041ac 	.word	0x200041ac
 8000e18:	20004048 	.word	0x20004048
 8000e1c:	20004c5c 	.word	0x20004c5c
 8000e20:	20004c58 	.word	0x20004c58
 8000e24:	20004a54 	.word	0x20004a54

08000e28 <Task_Display>:
	}
}


void Task_Display( void *pvParameters ){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

	uint32_t it;
	BUFF_ITEM_t car;
	HAL_StatusTypeDef res;

    it=0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
	while(1){

		buff->get(buff,&car);
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <Task_Display+0x38>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <Task_Display+0x38>)
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	f107 010a 	add.w	r1, r7, #10
 8000e42:	4610      	mov	r0, r2
 8000e44:	4798      	blx	r3
		res=HAL_UART_Transmit(& huart2,&car,1,100);
 8000e46:	f107 010a 	add.w	r1, r7, #10
 8000e4a:	2364      	movs	r3, #100	; 0x64
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <Task_Display+0x3c>)
 8000e50:	f002 f931 	bl	80030b6 <HAL_UART_Transmit>
 8000e54:	4603      	mov	r3, r0
 8000e56:	72fb      	strb	r3, [r7, #11]
		it++;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
		buff->get(buff,&car);
 8000e5e:	e7e9      	b.n	8000e34 <Task_Display+0xc>
 8000e60:	20004c58 	.word	0x20004c58
 8000e64:	200041ac 	.word	0x200041ac

08000e68 <serie_Init_FreeRTOS>:


extern BUFF_BUFFER_t * buff;
extern BUFF_BUFFER_t * buff_rx;

void serie_Init_FreeRTOS(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af02      	add	r7, sp, #8

	BaseType_t res_task;

	printf (PASCU_PRJ " at "__TIME__);
 8000e6e:	4844      	ldr	r0, [pc, #272]	; (8000f80 <serie_Init_FreeRTOS+0x118>)
 8000e70:	f005 fac4 	bl	80063fc <iprintf>
	fflush(0);
 8000e74:	2000      	movs	r0, #0
 8000e76:	f005 f8c1 	bl	8005ffc <fflush>

	buff=bufferCreat(128);
 8000e7a:	2080      	movs	r0, #128	; 0x80
 8000e7c:	f000 fb92 	bl	80015a4 <bufferCreat>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4a40      	ldr	r2, [pc, #256]	; (8000f84 <serie_Init_FreeRTOS+0x11c>)
 8000e84:	6013      	str	r3, [r2, #0]
	if (!buff) return;
 8000e86:	4b3f      	ldr	r3, [pc, #252]	; (8000f84 <serie_Init_FreeRTOS+0x11c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d072      	beq.n	8000f74 <serie_Init_FreeRTOS+0x10c>

	buff_rx=bufferCreat(512);
 8000e8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e92:	f000 fb87 	bl	80015a4 <bufferCreat>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4a3b      	ldr	r2, [pc, #236]	; (8000f88 <serie_Init_FreeRTOS+0x120>)
 8000e9a:	6013      	str	r3, [r2, #0]
	if (!buff_rx) return;
 8000e9c:	4b3a      	ldr	r3, [pc, #232]	; (8000f88 <serie_Init_FreeRTOS+0x120>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d069      	beq.n	8000f78 <serie_Init_FreeRTOS+0x110>

	res_task=xTaskCreate(Task_Display,"DISPLAY",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f000 fbd7 	bl	8001658 <makeFreeRtosPriority>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	2300      	movs	r3, #0
 8000eb0:	9301      	str	r3, [sp, #4]
 8000eb2:	9200      	str	r2, [sp, #0]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eba:	4934      	ldr	r1, [pc, #208]	; (8000f8c <serie_Init_FreeRTOS+0x124>)
 8000ebc:	4834      	ldr	r0, [pc, #208]	; (8000f90 <serie_Init_FreeRTOS+0x128>)
 8000ebe:	f003 fc4e 	bl	800475e <xTaskCreate>
 8000ec2:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d006      	beq.n	8000ed8 <serie_Init_FreeRTOS+0x70>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8000eca:	4832      	ldr	r0, [pc, #200]	; (8000f94 <serie_Init_FreeRTOS+0x12c>)
 8000ecc:	f005 fb1c 	bl	8006508 <puts>
			fflush(NULL);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f005 f893 	bl	8005ffc <fflush>
			while(1);
 8000ed6:	e7fe      	b.n	8000ed6 <serie_Init_FreeRTOS+0x6e>
	}

	res_task=xTaskCreate(Task_DMA,"DMA",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f000 fbbd 	bl	8001658 <makeFreeRtosPriority>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	9200      	str	r2, [sp, #0]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eee:	492a      	ldr	r1, [pc, #168]	; (8000f98 <serie_Init_FreeRTOS+0x130>)
 8000ef0:	482a      	ldr	r0, [pc, #168]	; (8000f9c <serie_Init_FreeRTOS+0x134>)
 8000ef2:	f003 fc34 	bl	800475e <xTaskCreate>
 8000ef6:	6078      	str	r0, [r7, #4]
		if( res_task != pdPASS ){
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d006      	beq.n	8000f0c <serie_Init_FreeRTOS+0xa4>
				printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8000efe:	4825      	ldr	r0, [pc, #148]	; (8000f94 <serie_Init_FreeRTOS+0x12c>)
 8000f00:	f005 fb02 	bl	8006508 <puts>
				fflush(NULL);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f005 f879 	bl	8005ffc <fflush>
				while(1);
 8000f0a:	e7fe      	b.n	8000f0a <serie_Init_FreeRTOS+0xa2>
		}

	res_task=xTaskCreate(Task_Send,"ENVIO",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f000 fba3 	bl	8001658 <makeFreeRtosPriority>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461a      	mov	r2, r3
 8000f16:	2300      	movs	r3, #0
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	9200      	str	r2, [sp, #0]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f22:	491f      	ldr	r1, [pc, #124]	; (8000fa0 <serie_Init_FreeRTOS+0x138>)
 8000f24:	481f      	ldr	r0, [pc, #124]	; (8000fa4 <serie_Init_FreeRTOS+0x13c>)
 8000f26:	f003 fc1a 	bl	800475e <xTaskCreate>
 8000f2a:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d006      	beq.n	8000f40 <serie_Init_FreeRTOS+0xd8>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8000f32:	4818      	ldr	r0, [pc, #96]	; (8000f94 <serie_Init_FreeRTOS+0x12c>)
 8000f34:	f005 fae8 	bl	8006508 <puts>
			fflush(NULL);
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f005 f85f 	bl	8005ffc <fflush>
			while(1);
 8000f3e:	e7fe      	b.n	8000f3e <serie_Init_FreeRTOS+0xd6>
	}

	res_task=xTaskCreate(Task_Receive,"RECEIVE",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f000 fb89 	bl	8001658 <makeFreeRtosPriority>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	9301      	str	r3, [sp, #4]
 8000f4e:	9200      	str	r2, [sp, #0]
 8000f50:	2300      	movs	r3, #0
 8000f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f56:	4914      	ldr	r1, [pc, #80]	; (8000fa8 <serie_Init_FreeRTOS+0x140>)
 8000f58:	4814      	ldr	r0, [pc, #80]	; (8000fac <serie_Init_FreeRTOS+0x144>)
 8000f5a:	f003 fc00 	bl	800475e <xTaskCreate>
 8000f5e:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d009      	beq.n	8000f7a <serie_Init_FreeRTOS+0x112>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8000f66:	480b      	ldr	r0, [pc, #44]	; (8000f94 <serie_Init_FreeRTOS+0x12c>)
 8000f68:	f005 face 	bl	8006508 <puts>
			fflush(NULL);
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f005 f845 	bl	8005ffc <fflush>
			while(1);
 8000f72:	e7fe      	b.n	8000f72 <serie_Init_FreeRTOS+0x10a>
	if (!buff) return;
 8000f74:	bf00      	nop
 8000f76:	e000      	b.n	8000f7a <serie_Init_FreeRTOS+0x112>
	if (!buff_rx) return;
 8000f78:	bf00      	nop
	}
}
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	08007294 	.word	0x08007294
 8000f84:	20004c58 	.word	0x20004c58
 8000f88:	20004a54 	.word	0x20004a54
 8000f8c:	080072bc 	.word	0x080072bc
 8000f90:	08000e29 	.word	0x08000e29
 8000f94:	080072c4 	.word	0x080072c4
 8000f98:	080072f0 	.word	0x080072f0
 8000f9c:	08000cad 	.word	0x08000cad
 8000fa0:	080072f4 	.word	0x080072f4
 8000fa4:	080011cd 	.word	0x080011cd
 8000fa8:	080072fc 	.word	0x080072fc
 8000fac:	08001239 	.word	0x08001239

08000fb0 <entregable>:
		res=buff->put(buff,buffer_DMA[buffer_ct++]);
	// wait a bit time
	osDelay(1);

}
void entregable(char * nombreMaquina,char * ssid, char * passwd){
 8000fb0:	b5b0      	push	{r4, r5, r7, lr}
 8000fb2:	b094      	sub	sp, #80	; 0x50
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	uint32_t res;
		//char conf[]="AT+CWMODE=1\r\n";
		char cad[]="AT+CWJAP=\"%s\",\"%s\"\r\n";
 8000fbc:	4b7b      	ldr	r3, [pc, #492]	; (80011ac <entregable+0x1fc>)
 8000fbe:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000fc2:	461d      	mov	r5, r3
 8000fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fcc:	6020      	str	r0, [r4, #0]
 8000fce:	3404      	adds	r4, #4
 8000fd0:	7021      	strb	r1, [r4, #0]

		sprintf(candenafinal,cad,ssid,passwd);
 8000fd2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	4875      	ldr	r0, [pc, #468]	; (80011b0 <entregable+0x200>)
 8000fdc:	f005 faac 	bl	8006538 <siprintf>

		// send line (command) to ESP
		res=HAL_UART_Transmit(UART_ESP_AT_WIFI,"AT+CWMODE=3\r\n",15,1000);
 8000fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	4973      	ldr	r1, [pc, #460]	; (80011b4 <entregable+0x204>)
 8000fe8:	4873      	ldr	r0, [pc, #460]	; (80011b8 <entregable+0x208>)
 8000fea:	f002 f864 	bl	80030b6 <HAL_UART_Transmit>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	64bb      	str	r3, [r7, #72]	; 0x48
			// wait a bit time
			// prepare reception buffer from ESP
		HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 8000ff2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ff6:	4971      	ldr	r1, [pc, #452]	; (80011bc <entregable+0x20c>)
 8000ff8:	486f      	ldr	r0, [pc, #444]	; (80011b8 <entregable+0x208>)
 8000ffa:	f002 f8ee 	bl	80031da <HAL_UART_Receive_DMA>
		osDelay(500);
 8000ffe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001002:	f002 fe86 	bl	8003d12 <osDelay>
			//stop reception probably all data are in dma buffer
		HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 8001006:	486c      	ldr	r0, [pc, #432]	; (80011b8 <entregable+0x208>)
 8001008:	f002 f917 	bl	800323a <HAL_UART_DMAStop>
		// send to console ESP answer.
		int buffer_ct1=HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 800100c:	486a      	ldr	r0, [pc, #424]	; (80011b8 <entregable+0x208>)
 800100e:	f000 fc56 	bl	80018be <HAL_DMA_getcounter>
 8001012:	6478      	str	r0, [r7, #68]	; 0x44
		int buffer_ct=0;
 8001014:	2300      	movs	r3, #0
 8001016:	64fb      	str	r3, [r7, #76]	; 0x4c
		while (buffer_ct<buffer_ct1)
 8001018:	e00d      	b.n	8001036 <entregable+0x86>
				res=buff->put(buff,buffer_DMA[buffer_ct++]);
 800101a:	4b69      	ldr	r3, [pc, #420]	; (80011c0 <entregable+0x210>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	4b67      	ldr	r3, [pc, #412]	; (80011c0 <entregable+0x210>)
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001026:	1c59      	adds	r1, r3, #1
 8001028:	64f9      	str	r1, [r7, #76]	; 0x4c
 800102a:	4964      	ldr	r1, [pc, #400]	; (80011bc <entregable+0x20c>)
 800102c:	5ccb      	ldrb	r3, [r1, r3]
 800102e:	4619      	mov	r1, r3
 8001030:	4790      	blx	r2
 8001032:	4603      	mov	r3, r0
 8001034:	64bb      	str	r3, [r7, #72]	; 0x48
		while (buffer_ct<buffer_ct1)
 8001036:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800103a:	429a      	cmp	r2, r3
 800103c:	dbed      	blt.n	800101a <entregable+0x6a>
		// wait a bit time
		osDelay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f002 fe67 	bl	8003d12 <osDelay>

		// send line (command) to ESP
		res=HAL_UART_Transmit(UART_ESP_AT_WIFI,candenafinal,strlen(candenafinal),1000);
 8001044:	485a      	ldr	r0, [pc, #360]	; (80011b0 <entregable+0x200>)
 8001046:	f7ff f8cb 	bl	80001e0 <strlen>
 800104a:	4603      	mov	r3, r0
 800104c:	b29a      	uxth	r2, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	4957      	ldr	r1, [pc, #348]	; (80011b0 <entregable+0x200>)
 8001054:	4858      	ldr	r0, [pc, #352]	; (80011b8 <entregable+0x208>)
 8001056:	f002 f82e 	bl	80030b6 <HAL_UART_Transmit>
 800105a:	4603      	mov	r3, r0
 800105c:	64bb      	str	r3, [r7, #72]	; 0x48
		// wait a bit time
		// prepare reception buffer from ESP
		HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 800105e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001062:	4956      	ldr	r1, [pc, #344]	; (80011bc <entregable+0x20c>)
 8001064:	4854      	ldr	r0, [pc, #336]	; (80011b8 <entregable+0x208>)
 8001066:	f002 f8b8 	bl	80031da <HAL_UART_Receive_DMA>
		osDelay(500);
 800106a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800106e:	f002 fe50 	bl	8003d12 <osDelay>
		//stop reception probably all data are in dma buffer
		HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 8001072:	4851      	ldr	r0, [pc, #324]	; (80011b8 <entregable+0x208>)
 8001074:	f002 f8e1 	bl	800323a <HAL_UART_DMAStop>
		// send to console ESP answer.
		buffer_ct1=HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 8001078:	484f      	ldr	r0, [pc, #316]	; (80011b8 <entregable+0x208>)
 800107a:	f000 fc20 	bl	80018be <HAL_DMA_getcounter>
 800107e:	6478      	str	r0, [r7, #68]	; 0x44
		buffer_ct=0;
 8001080:	2300      	movs	r3, #0
 8001082:	64fb      	str	r3, [r7, #76]	; 0x4c
		while (buffer_ct<buffer_ct1)
 8001084:	e00d      	b.n	80010a2 <entregable+0xf2>
			res=buff->put(buff,buffer_DMA[buffer_ct++]);
 8001086:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <entregable+0x210>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	4b4c      	ldr	r3, [pc, #304]	; (80011c0 <entregable+0x210>)
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001092:	1c59      	adds	r1, r3, #1
 8001094:	64f9      	str	r1, [r7, #76]	; 0x4c
 8001096:	4949      	ldr	r1, [pc, #292]	; (80011bc <entregable+0x20c>)
 8001098:	5ccb      	ldrb	r3, [r1, r3]
 800109a:	4619      	mov	r1, r3
 800109c:	4790      	blx	r2
 800109e:	4603      	mov	r3, r0
 80010a0:	64bb      	str	r3, [r7, #72]	; 0x48
		while (buffer_ct<buffer_ct1)
 80010a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80010a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dbed      	blt.n	8001086 <entregable+0xd6>
		// wait a bit time
		osDelay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f002 fe31 	bl	8003d12 <osDelay>
		// send line (command) to ESP
		res=HAL_UART_Transmit(UART_ESP_AT_WIFI,"AT+CIFSR\r\n",15,1000);
 80010b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b4:	220f      	movs	r2, #15
 80010b6:	4943      	ldr	r1, [pc, #268]	; (80011c4 <entregable+0x214>)
 80010b8:	483f      	ldr	r0, [pc, #252]	; (80011b8 <entregable+0x208>)
 80010ba:	f001 fffc 	bl	80030b6 <HAL_UART_Transmit>
 80010be:	4603      	mov	r3, r0
 80010c0:	64bb      	str	r3, [r7, #72]	; 0x48
		// wait a bit time
		// prepare reception buffer from ESP
		HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 80010c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010c6:	493d      	ldr	r1, [pc, #244]	; (80011bc <entregable+0x20c>)
 80010c8:	483b      	ldr	r0, [pc, #236]	; (80011b8 <entregable+0x208>)
 80010ca:	f002 f886 	bl	80031da <HAL_UART_Receive_DMA>
		osDelay(500);
 80010ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010d2:	f002 fe1e 	bl	8003d12 <osDelay>
		//stop reception probably all data are in dma buffer
		HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 80010d6:	4838      	ldr	r0, [pc, #224]	; (80011b8 <entregable+0x208>)
 80010d8:	f002 f8af 	bl	800323a <HAL_UART_DMAStop>
		// send to console ESP answer.
		buffer_ct1=HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 80010dc:	4836      	ldr	r0, [pc, #216]	; (80011b8 <entregable+0x208>)
 80010de:	f000 fbee 	bl	80018be <HAL_DMA_getcounter>
 80010e2:	6478      	str	r0, [r7, #68]	; 0x44
		buffer_ct=0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		while (buffer_ct<buffer_ct1)
 80010e8:	e00d      	b.n	8001106 <entregable+0x156>
			res=buff->put(buff,buffer_DMA[buffer_ct++]);
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <entregable+0x210>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <entregable+0x210>)
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010f6:	1c59      	adds	r1, r3, #1
 80010f8:	64f9      	str	r1, [r7, #76]	; 0x4c
 80010fa:	4930      	ldr	r1, [pc, #192]	; (80011bc <entregable+0x20c>)
 80010fc:	5ccb      	ldrb	r3, [r1, r3]
 80010fe:	4619      	mov	r1, r3
 8001100:	4790      	blx	r2
 8001102:	4603      	mov	r3, r0
 8001104:	64bb      	str	r3, [r7, #72]	; 0x48
		while (buffer_ct<buffer_ct1)
 8001106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800110a:	429a      	cmp	r2, r3
 800110c:	dbed      	blt.n	80010ea <entregable+0x13a>
		// wait a bit time
		osDelay(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f002 fdff 	bl	8003d12 <osDelay>

		char cad2[]="AT+CIPSTART=\"TCP\",\"%s\",80\r\n";
 8001114:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <entregable+0x218>)
 8001116:	f107 0410 	add.w	r4, r7, #16
 800111a:	461d      	mov	r5, r3
 800111c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001120:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001124:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		sprintf(candenafinal,cad2,nombreMaquina);
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	4619      	mov	r1, r3
 8001130:	481f      	ldr	r0, [pc, #124]	; (80011b0 <entregable+0x200>)
 8001132:	f005 fa01 	bl	8006538 <siprintf>
		// send line (command) to ESP
		res=HAL_UART_Transmit(UART_ESP_AT_WIFI,candenafinal,strlen(candenafinal),1000);
 8001136:	481e      	ldr	r0, [pc, #120]	; (80011b0 <entregable+0x200>)
 8001138:	f7ff f852 	bl	80001e0 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	b29a      	uxth	r2, r3
 8001140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001144:	491a      	ldr	r1, [pc, #104]	; (80011b0 <entregable+0x200>)
 8001146:	481c      	ldr	r0, [pc, #112]	; (80011b8 <entregable+0x208>)
 8001148:	f001 ffb5 	bl	80030b6 <HAL_UART_Transmit>
 800114c:	4603      	mov	r3, r0
 800114e:	64bb      	str	r3, [r7, #72]	; 0x48
		// wait a bit time
		// prepare reception buffer from ESP
		HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 8001150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001154:	4919      	ldr	r1, [pc, #100]	; (80011bc <entregable+0x20c>)
 8001156:	4818      	ldr	r0, [pc, #96]	; (80011b8 <entregable+0x208>)
 8001158:	f002 f83f 	bl	80031da <HAL_UART_Receive_DMA>
		osDelay(500);
 800115c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001160:	f002 fdd7 	bl	8003d12 <osDelay>
		//stop reception probably all data are in dma buffer
		HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 8001164:	4814      	ldr	r0, [pc, #80]	; (80011b8 <entregable+0x208>)
 8001166:	f002 f868 	bl	800323a <HAL_UART_DMAStop>
		// send to console ESP answer.
		buffer_ct1=HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 800116a:	4813      	ldr	r0, [pc, #76]	; (80011b8 <entregable+0x208>)
 800116c:	f000 fba7 	bl	80018be <HAL_DMA_getcounter>
 8001170:	6478      	str	r0, [r7, #68]	; 0x44
		buffer_ct=0;
 8001172:	2300      	movs	r3, #0
 8001174:	64fb      	str	r3, [r7, #76]	; 0x4c
		while (buffer_ct<buffer_ct1)
 8001176:	e00d      	b.n	8001194 <entregable+0x1e4>
			res=buff->put(buff,buffer_DMA[buffer_ct++]);
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <entregable+0x210>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <entregable+0x210>)
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001184:	1c59      	adds	r1, r3, #1
 8001186:	64f9      	str	r1, [r7, #76]	; 0x4c
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <entregable+0x20c>)
 800118a:	5ccb      	ldrb	r3, [r1, r3]
 800118c:	4619      	mov	r1, r3
 800118e:	4790      	blx	r2
 8001190:	4603      	mov	r3, r0
 8001192:	64bb      	str	r3, [r7, #72]	; 0x48
		while (buffer_ct<buffer_ct1)
 8001194:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001198:	429a      	cmp	r2, r3
 800119a:	dbed      	blt.n	8001178 <entregable+0x1c8>
		// wait a bit time
		osDelay(1);
 800119c:	2001      	movs	r0, #1
 800119e:	f002 fdb8 	bl	8003d12 <osDelay>


}
 80011a2:	bf00      	nop
 80011a4:	3750      	adds	r7, #80	; 0x50
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bdb0      	pop	{r4, r5, r7, pc}
 80011aa:	bf00      	nop
 80011ac:	08007314 	.word	0x08007314
 80011b0:	200049f0 	.word	0x200049f0
 80011b4:	0800732c 	.word	0x0800732c
 80011b8:	20004108 	.word	0x20004108
 80011bc:	200041f0 	.word	0x200041f0
 80011c0:	20004c58 	.word	0x20004c58
 80011c4:	0800733c 	.word	0x0800733c
 80011c8:	08007348 	.word	0x08007348

080011cc <Task_Send>:


void Task_Send( void *pvParameters ){
 80011cc:	b5b0      	push	{r4, r5, r7, lr}
 80011ce:	b09e      	sub	sp, #120	; 0x78
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

	uint32_t it;
    uint32_t res;

	char cad[100];
	it=0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	677b      	str	r3, [r7, #116]	; 0x74
	//boot_wifi("OPPOReno2","ilovematy");
	entregable("http://worldclockapi.com","OPPOReno2","ilovematy");
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <Task_Send+0x58>)
 80011da:	4913      	ldr	r1, [pc, #76]	; (8001228 <Task_Send+0x5c>)
 80011dc:	4813      	ldr	r0, [pc, #76]	; (800122c <Task_Send+0x60>)
 80011de:	f7ff fee7 	bl	8000fb0 <entregable>
	while(1){
		it++;
 80011e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011e4:	3301      	adds	r3, #1
 80011e6:	677b      	str	r3, [r7, #116]	; 0x74
		sprintf(cad,"IT %d\r\n",(int)it);
 80011e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	4910      	ldr	r1, [pc, #64]	; (8001230 <Task_Send+0x64>)
 80011f0:	4618      	mov	r0, r3
 80011f2:	f005 f9a1 	bl	8006538 <siprintf>
		res=buff->puts(buff,(BUFF_ITEM_t *)cad,strlen(cad));
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <Task_Send+0x68>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691c      	ldr	r4, [r3, #16]
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <Task_Send+0x68>)
 80011fe:	681d      	ldr	r5, [r3, #0]
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4618      	mov	r0, r3
 8001206:	f7fe ffeb 	bl	80001e0 <strlen>
 800120a:	4602      	mov	r2, r0
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	4619      	mov	r1, r3
 8001212:	4628      	mov	r0, r5
 8001214:	47a0      	blx	r4
 8001216:	6738      	str	r0, [r7, #112]	; 0x70
		vTaskDelay(10000/portTICK_RATE_MS );
 8001218:	f242 7010 	movw	r0, #10000	; 0x2710
 800121c:	f003 fbd6 	bl	80049cc <vTaskDelay>
		it++;
 8001220:	e7df      	b.n	80011e2 <Task_Send+0x16>
 8001222:	bf00      	nop
 8001224:	08007364 	.word	0x08007364
 8001228:	08007370 	.word	0x08007370
 800122c:	0800737c 	.word	0x0800737c
 8001230:	08007398 	.word	0x08007398
 8001234:	20004c58 	.word	0x20004c58

08001238 <Task_Receive>:

	}
}

void Task_Receive( void *pvParameters ){
 8001238:	b580      	push	{r7, lr}
 800123a:	b0a8      	sub	sp, #160	; 0xa0
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
#define buffer_length	128
    BUFF_ITEM_t  buffer[buffer_length];
    int buffer_ct,buffer_ct1;
    int crln_detect;

	it=0;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


	while(1){
		it++;
 8001246:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800124a:	3301      	adds	r3, #1
 800124c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

		crln_detect=0;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		buffer_ct=0;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		while(crln_detect<2){
 800125c:	e03a      	b.n	80012d4 <Task_Receive+0x9c>
	    	res=buff->get(buff_rx,&car);
 800125e:	4b3e      	ldr	r3, [pc, #248]	; (8001358 <Task_Receive+0x120>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a3d      	ldr	r2, [pc, #244]	; (800135c <Task_Receive+0x124>)
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	f107 018b 	add.w	r1, r7, #139	; 0x8b
 800126c:	4610      	mov	r0, r2
 800126e:	4798      	blx	r3
 8001270:	4603      	mov	r3, r0
 8001272:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	    	buffer[buffer_ct++]=car;
 8001276:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001280:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 8001284:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001288:	440b      	add	r3, r1
 800128a:	f803 2c98 	strb.w	r2, [r3, #-152]
	    	if (buffer_ct>1){
 800128e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001292:	2b01      	cmp	r3, #1
 8001294:	dd1e      	ble.n	80012d4 <Task_Receive+0x9c>

	    		if ((buffer[buffer_ct-2]=='\r')&&(buffer[buffer_ct-1]=='\n')) // \r\n detection end of line
 8001296:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800129a:	3b02      	subs	r3, #2
 800129c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80012a0:	4413      	add	r3, r2
 80012a2:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 80012a6:	2b0d      	cmp	r3, #13
 80012a8:	d10d      	bne.n	80012c6 <Task_Receive+0x8e>
 80012aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80012b4:	4413      	add	r3, r2
 80012b6:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 80012ba:	2b0a      	cmp	r3, #10
 80012bc:	d103      	bne.n	80012c6 <Task_Receive+0x8e>
					crln_detect=2;
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012c4:	e006      	b.n	80012d4 <Task_Receive+0x9c>
				else
					if ((buffer_ct)==buffer_length)  // line out of limits --> error
 80012c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012ca:	2b80      	cmp	r3, #128	; 0x80
 80012cc:	d102      	bne.n	80012d4 <Task_Receive+0x9c>
						crln_detect=3;
 80012ce:	2303      	movs	r3, #3
 80012d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		while(crln_detect<2){
 80012d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012d8:	2b01      	cmp	r3, #1
 80012da:	ddc0      	ble.n	800125e <Task_Receive+0x26>
	    	}

		}

		// prepare reception buffer from ESP
		HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 80012dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e0:	491f      	ldr	r1, [pc, #124]	; (8001360 <Task_Receive+0x128>)
 80012e2:	4820      	ldr	r0, [pc, #128]	; (8001364 <Task_Receive+0x12c>)
 80012e4:	f001 ff79 	bl	80031da <HAL_UART_Receive_DMA>
		// send line (command) to ESP
		res=HAL_UART_Transmit(UART_ESP_AT_WIFI,buffer,buffer_ct,1000);
 80012e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	f107 0108 	add.w	r1, r7, #8
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	481b      	ldr	r0, [pc, #108]	; (8001364 <Task_Receive+0x12c>)
 80012f8:	f001 fedd 	bl	80030b6 <HAL_UART_Transmit>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		// wait a bit time
		osDelay(500);
 8001302:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001306:	f002 fd04 	bl	8003d12 <osDelay>
		//stop reception probably all data are in dma buffer
		HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 800130a:	4816      	ldr	r0, [pc, #88]	; (8001364 <Task_Receive+0x12c>)
 800130c:	f001 ff95 	bl	800323a <HAL_UART_DMAStop>

		// send to console ESP answer.
		buffer_ct1=HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 8001310:	4814      	ldr	r0, [pc, #80]	; (8001364 <Task_Receive+0x12c>)
 8001312:	f000 fad4 	bl	80018be <HAL_DMA_getcounter>
 8001316:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		buffer_ct=0;
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		while (buffer_ct<buffer_ct1)
 8001320:	e010      	b.n	8001344 <Task_Receive+0x10c>
			res=buff->put(buff,buffer_DMA[buffer_ct++]);
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <Task_Receive+0x120>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <Task_Receive+0x120>)
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001330:	1c59      	adds	r1, r3, #1
 8001332:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001336:	490a      	ldr	r1, [pc, #40]	; (8001360 <Task_Receive+0x128>)
 8001338:	5ccb      	ldrb	r3, [r1, r3]
 800133a:	4619      	mov	r1, r3
 800133c:	4790      	blx	r2
 800133e:	4603      	mov	r3, r0
 8001340:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (buffer_ct<buffer_ct1)
 8001344:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800134c:	429a      	cmp	r2, r3
 800134e:	dbe8      	blt.n	8001322 <Task_Receive+0xea>
		// wait a bit time
		osDelay(1);
 8001350:	2001      	movs	r0, #1
 8001352:	f002 fcde 	bl	8003d12 <osDelay>
	while(1){
 8001356:	e776      	b.n	8001246 <Task_Receive+0xe>
 8001358:	20004c58 	.word	0x20004c58
 800135c:	20004a54 	.word	0x20004a54
 8001360:	200041f0 	.word	0x200041f0
 8001364:	20004108 	.word	0x20004108

08001368 <BUFF_is_empty>:
#include <task.h>
#include <math.h>

/////////////////////////////////////////////////////////////////////////////////////// BUFFER sin proteccion

uint32_t BUFF_is_empty(BUFF_BUFFER_t * buffer){
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	return (buffer->n_elem==0);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf0c      	ite	eq
 8001378:	2301      	moveq	r3, #1
 800137a:	2300      	movne	r3, #0
 800137c:	b2db      	uxtb	r3, r3
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <BUFF_is_full>:

uint32_t BUFF_is_full(BUFF_BUFFER_t * buffer){
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
	return (buffer->n_elem==buffer->size);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	429a      	cmp	r2, r3
 800139c:	bf0c      	ite	eq
 800139e:	2301      	moveq	r3, #1
 80013a0:	2300      	movne	r3, #0
 80013a2:	b2db      	uxtb	r3, r3
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <BUFF_inserta>:

uint32_t BUFF_inserta(BUFF_BUFFER_t * buffer,BUFF_ITEM_t item){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]

	if (!buffer->isfull(buffer)){
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	4798      	blx	r3
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d119      	bne.n	80013fe <BUFF_inserta+0x4e>
		buffer->buff[buffer->cabeza]=item;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4413      	add	r3, r2
 80013d4:	78fa      	ldrb	r2, [r7, #3]
 80013d6:	701a      	strb	r2, [r3, #0]
		buffer->cabeza=((buffer->cabeza)+1)%(buffer->size);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	3301      	adds	r3, #1
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6a12      	ldr	r2, [r2, #32]
 80013e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80013e6:	fb02 f201 	mul.w	r2, r2, r1
 80013ea:	1a9a      	subs	r2, r3, r2
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	619a      	str	r2, [r3, #24]
		buffer->n_elem++;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
		return 1;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <BUFF_inserta+0x50>
	} else return 0;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <BUFF_extrae>:

uint32_t BUFF_extrae(BUFF_BUFFER_t * buffer,BUFF_ITEM_t *item){
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]

	if (!buffer->isempty(buffer)){
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	4798      	blx	r3
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d11a      	bne.n	8001456 <BUFF_extrae+0x4e>
			*item=buffer->buff[buffer->cola];
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	4413      	add	r3, r2
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	701a      	strb	r2, [r3, #0]
			buffer->cola=(buffer->cola+1)%(buffer->size);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	3301      	adds	r3, #1
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6a12      	ldr	r2, [r2, #32]
 800143a:	fbb3 f1f2 	udiv	r1, r3, r2
 800143e:	fb02 f201 	mul.w	r2, r2, r1
 8001442:	1a9a      	subs	r2, r3, r2
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	61da      	str	r2, [r3, #28]
			buffer->n_elem--;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	1e5a      	subs	r2, r3, #1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	629a      	str	r2, [r3, #40]	; 0x28

	} else return 0;

   return 1;
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <BUFF_extrae+0x50>
	} else return 0;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <BUFF_extrae_prot>:

uint32_t BUFF_extrae_prot(BUFF_BUFFER_t * buffer,BUFF_ITEM_t *item)
{ //variable condicion
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	int it;

	it=0;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
	while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 800146e:	bf00      	nop
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	f242 7110 	movw	r1, #10000	; 0x2710
 8001478:	4618      	mov	r0, r3
 800147a:	f002 ff05 	bl	8004288 <xQueueSemaphoreTake>
 800147e:	4603      	mov	r3, r0
 8001480:	2b01      	cmp	r3, #1
 8001482:	d1f5      	bne.n	8001470 <BUFF_extrae_prot+0x10>
	 // lock
	while(!BUFF_extrae(buffer,item)){
 8001484:	e017      	b.n	80014b6 <BUFF_extrae_prot+0x56>
			 xSemaphoreGive(buffer->xSem);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6958      	ldr	r0, [r3, #20]
 800148a:	2300      	movs	r3, #0
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	f002 fdfc 	bl	800408c <xQueueGenericSend>
	 		 vTaskDelay(100/portTICK_RATE_MS );
 8001494:	2064      	movs	r0, #100	; 0x64
 8001496:	f003 fa99 	bl	80049cc <vTaskDelay>
	 		 while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 800149a:	bf00      	nop
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	f242 7110 	movw	r1, #10000	; 0x2710
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 feef 	bl	8004288 <xQueueSemaphoreTake>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d1f5      	bne.n	800149c <BUFF_extrae_prot+0x3c>
	 		 it++;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3301      	adds	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
	while(!BUFF_extrae(buffer,item)){
 80014b6:	6839      	ldr	r1, [r7, #0]
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ffa5 	bl	8001408 <BUFF_extrae>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0e0      	beq.n	8001486 <BUFF_extrae_prot+0x26>
	}
	xSemaphoreGive(buffer->xSem);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6958      	ldr	r0, [r3, #20]
 80014c8:	2300      	movs	r3, #0
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	f002 fddd 	bl	800408c <xQueueGenericSend>
	return 1; // siempre tiene éxito
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <BUFF_inserta_prot>:
uint32_t BUFF_inserta_prot(BUFF_BUFFER_t * buffer,BUFF_ITEM_t item)
{ //variable condicion
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
	int it;

	it=0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
	while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 80014ec:	bf00      	nop
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f242 7110 	movw	r1, #10000	; 0x2710
 80014f6:	4618      	mov	r0, r3
 80014f8:	f002 fec6 	bl	8004288 <xQueueSemaphoreTake>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d1f5      	bne.n	80014ee <BUFF_inserta_prot+0x12>
	 // lock
	while(!BUFF_inserta(buffer,item)){
 8001502:	e017      	b.n	8001534 <BUFF_inserta_prot+0x58>
	 		 xSemaphoreGive(buffer->xSem);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6958      	ldr	r0, [r3, #20]
 8001508:	2300      	movs	r3, #0
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	f002 fdbd 	bl	800408c <xQueueGenericSend>
	 		 vTaskDelay(100/portTICK_RATE_MS );
 8001512:	2064      	movs	r0, #100	; 0x64
 8001514:	f003 fa5a 	bl	80049cc <vTaskDelay>
	 		 while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 8001518:	bf00      	nop
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001522:	4618      	mov	r0, r3
 8001524:	f002 feb0 	bl	8004288 <xQueueSemaphoreTake>
 8001528:	4603      	mov	r3, r0
 800152a:	2b01      	cmp	r3, #1
 800152c:	d1f5      	bne.n	800151a <BUFF_inserta_prot+0x3e>
	 		 it++;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	3301      	adds	r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
	while(!BUFF_inserta(buffer,item)){
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	4619      	mov	r1, r3
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff39 	bl	80013b0 <BUFF_inserta>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0df      	beq.n	8001504 <BUFF_inserta_prot+0x28>
	}
	xSemaphoreGive(buffer->xSem);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6958      	ldr	r0, [r3, #20]
 8001548:	2300      	movs	r3, #0
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	f002 fd9d 	bl	800408c <xQueueGenericSend>
	return 1; // siempre tiene éxito
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <BUFF_inserta_cad>:

uint32_t BUFF_inserta_cad(BUFF_BUFFER_t * buffer,BUFF_ITEM_t * cad,uint32_t nitems)
{ //variable condicion
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]

	int it;
	uint32_t res;
	for (it=0;it<nitems;it++)
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	e010      	b.n	8001590 <BUFF_inserta_cad+0x34>
	{
		res=BUFF_inserta_prot(buffer,cad[it]);
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	4413      	add	r3, r2
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	4619      	mov	r1, r3
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f7ff ffaf 	bl	80014dc <BUFF_inserta_prot>
 800157e:	6138      	str	r0, [r7, #16]
		if (!res) return it;
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <BUFF_inserta_cad+0x2e>
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	e007      	b.n	800159a <BUFF_inserta_cad+0x3e>
	for (it=0;it<nitems;it++)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8ea      	bhi.n	800156e <BUFF_inserta_cad+0x12>
	}
	return 1; // siempre tiene éxito
 8001598:	2301      	movs	r3, #1
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <bufferCreat>:
} BUFF_BUFFER_t;
*/


// API
BUFF_BUFFER_t * bufferCreat(int size){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	BUFF_BUFFER_t * tmp;
	void * bff;

	tmp=malloc(sizeof(BUFF_BUFFER_t));
 80015ac:	202c      	movs	r0, #44	; 0x2c
 80015ae:	f004 fe55 	bl	800625c <malloc>
 80015b2:	4603      	mov	r3, r0
 80015b4:	60fb      	str	r3, [r7, #12]
	if (tmp){ // enought for structure
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d03d      	beq.n	8001638 <bufferCreat+0x94>

		bff=malloc(sizeof(uint8_t)*size);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4618      	mov	r0, r3
 80015c0:	f004 fe4c 	bl	800625c <malloc>
 80015c4:	4603      	mov	r3, r0
 80015c6:	60bb      	str	r3, [r7, #8]
		if (bff){ //enought for buffer
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d031      	beq.n	8001632 <bufferCreat+0x8e>
			tmp->xSem=xSemaphoreCreateMutex();
 80015ce:	2001      	movs	r0, #1
 80015d0:	f002 fd43 	bl	800405a <xQueueCreateMutex>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	615a      	str	r2, [r3, #20]
			if (!tmp->xSem){
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d107      	bne.n	80015f2 <bufferCreat+0x4e>
				free(bff);
 80015e2:	68b8      	ldr	r0, [r7, #8]
 80015e4:	f004 fe42 	bl	800626c <free>
				free(tmp);
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f004 fe3f 	bl	800626c <free>
				return NULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e023      	b.n	800163a <bufferCreat+0x96>
			};
            tmp->buff=bff;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
			tmp->cabeza=0;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
			tmp->cola=0;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	61da      	str	r2, [r3, #28]
			tmp->size=size;
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	621a      	str	r2, [r3, #32]
			tmp->n_elem=0;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	629a      	str	r2, [r3, #40]	; 0x28
			tmp->get=(void*)BUFF_extrae_prot;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <bufferCreat+0xa0>)
 8001614:	601a      	str	r2, [r3, #0]
			tmp->put=(void*)BUFF_inserta_prot;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <bufferCreat+0xa4>)
 800161a:	605a      	str	r2, [r3, #4]
			tmp->puts=(void*)BUFF_inserta_cad;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <bufferCreat+0xa8>)
 8001620:	611a      	str	r2, [r3, #16]

			tmp->isfull=(void*)BUFF_is_full;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <bufferCreat+0xac>)
 8001626:	60da      	str	r2, [r3, #12]
			tmp->isempty=(void*)BUFF_is_empty;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <bufferCreat+0xb0>)
 800162c:	609a      	str	r2, [r3, #8]
			return tmp;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	e003      	b.n	800163a <bufferCreat+0x96>
		}
		else
			free(tmp);
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f004 fe1a 	bl	800626c <free>
	}
	return NULL;
 8001638:	2300      	movs	r3, #0

}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	08001461 	.word	0x08001461
 8001648:	080014dd 	.word	0x080014dd
 800164c:	0800155d 	.word	0x0800155d
 8001650:	0800138b 	.word	0x0800138b
 8001654:	08001369 	.word	0x08001369

08001658 <makeFreeRtosPriority>:
uint8_t buffer_DMA_1[buffer_SIZE];
uint8_t buffer_DMA_2[buffer_SIZE];


unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]

if (priority != osPriorityError) {
 8001666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166a:	2b84      	cmp	r3, #132	; 0x84
 800166c:	d005      	beq.n	800167a <makeFreeRtosPriority+0x22>
fpriority += (priority - osPriorityIdle);
 800166e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4413      	add	r3, r2
 8001676:	3303      	adds	r3, #3
 8001678:	60fb      	str	r3, [r7, #12]
}

return fpriority;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_write>:

int _write(int file, char *ptr, int len)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e00b      	b.n	80016b2 <_write+0x2a>
	{
	    //ITM_SendChar( *ptr++ );
	   HAL_UART_Transmit(&huart2, (uint8_t*)ptr++,1,1000);
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	1c4b      	adds	r3, r1, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a4:	2201      	movs	r2, #1
 80016a6:	4807      	ldr	r0, [pc, #28]	; (80016c4 <_write+0x3c>)
 80016a8:	f001 fd05 	bl	80030b6 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3301      	adds	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dbef      	blt.n	800169a <_write+0x12>
	}

	return len;
 80016ba:	687b      	ldr	r3, [r7, #4]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200041ac 	.word	0x200041ac

080016c8 <UART_EndRxTransfer>:
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */

static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b095      	sub	sp, #84	; 0x54
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	330c      	adds	r3, #12
 80016d6:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016da:	e853 3f00 	ldrex	r3, [r3]
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80016e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80016e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	330c      	adds	r3, #12
 80016ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016f0:	643a      	str	r2, [r7, #64]	; 0x40
 80016f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80016f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016f8:	e841 2300 	strex	r3, r2, [r1]
 80016fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80016fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1e5      	bne.n	80016d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3314      	adds	r3, #20
 800170a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	e853 3f00 	ldrex	r3, [r3]
 8001712:	61fb      	str	r3, [r7, #28]
   return(result);
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	64bb      	str	r3, [r7, #72]	; 0x48
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3314      	adds	r3, #20
 8001722:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001724:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800172a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172c:	e841 2300 	strex	r3, r2, [r1]
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1e5      	bne.n	8001704 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	2b01      	cmp	r3, #1
 800173e:	d119      	bne.n	8001774 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	330c      	adds	r3, #12
 8001746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	e853 3f00 	ldrex	r3, [r3]
 800174e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f023 0310 	bic.w	r3, r3, #16
 8001756:	647b      	str	r3, [r7, #68]	; 0x44
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	330c      	adds	r3, #12
 800175e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001760:	61ba      	str	r2, [r7, #24]
 8001762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001764:	6979      	ldr	r1, [r7, #20]
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	e841 2300 	strex	r3, r2, [r1]
 800176c:	613b      	str	r3, [r7, #16]
   return(result);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1e5      	bne.n	8001740 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2220      	movs	r2, #32
 8001778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001782:	bf00      	nop
 8001784:	3754      	adds	r7, #84	; 0x54
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_DMA_Abort_PAS>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_PAS(DMA_HandleTypeDef *hdma)
{
 800178e:	b480      	push	{r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179a:	60fb      	str	r3, [r7, #12]

  //uint32_t tickstart = HAL_GetTick();

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d008      	beq.n	80017ba <HAL_DMA_Abort_PAS+0x2c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e036      	b.n	8001828 <HAL_DMA_Abort_PAS+0x9a>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0216 	bic.w	r2, r2, #22
 80017c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	695a      	ldr	r2, [r3, #20]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d8:	615a      	str	r2, [r3, #20]

    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d103      	bne.n	80017ea <HAL_DMA_Abort_PAS+0x5c>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <HAL_DMA_Abort_PAS+0x6c>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0208 	bic.w	r2, r2, #8
 80017f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0201 	bic.w	r2, r2, #1
 8001808:	601a      	str	r2, [r3, #0]
        return HAL_TIMEOUT;
      }
    }*/

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180e:	223f      	movs	r2, #63	; 0x3f
 8001810:	409a      	lsls	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	609a      	str	r2, [r3, #8]

    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_UART_DMAStop_PAS>:

HAL_StatusTypeDef HAL_UART_DMAStop_PAS(UART_HandleTypeDef *huart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */


  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184a:	2b40      	cmp	r3, #64	; 0x40
 800184c:	bf0c      	ite	eq
 800184e:	2301      	moveq	r3, #1
 8001850:	2300      	movne	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b22      	cmp	r3, #34	; 0x22
 8001860:	d128      	bne.n	80018b4 <HAL_UART_DMAStop_PAS+0x80>
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	2b00      	cmp	r3, #0
 8001866:	d025      	beq.n	80018b4 <HAL_UART_DMAStop_PAS+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3314      	adds	r3, #20
 800186e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	e853 3f00 	ldrex	r3, [r3]
 8001876:	60fb      	str	r3, [r7, #12]
   return(result);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800187e:	623b      	str	r3, [r7, #32]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3314      	adds	r3, #20
 8001886:	6a3a      	ldr	r2, [r7, #32]
 8001888:	61fa      	str	r2, [r7, #28]
 800188a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800188c:	69b9      	ldr	r1, [r7, #24]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	e841 2300 	strex	r3, r2, [r1]
 8001894:	617b      	str	r3, [r7, #20]
   return(result);
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1e5      	bne.n	8001868 <HAL_UART_DMAStop_PAS+0x34>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <HAL_UART_DMAStop_PAS+0x7a>
    {
      HAL_DMA_Abort_PAS(huart->hdmarx);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff70 	bl	800178e <HAL_DMA_Abort_PAS>
    }
    UART_EndRxTransfer(huart);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ff0a 	bl	80016c8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3728      	adds	r7, #40	; 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_DMA_getcounter>:



uint32_t HAL_DMA_getcounter(UART_HandleTypeDef *huart){
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
	return huart->hdmarx->Instance->NDTR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001914 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e0:	480d      	ldr	r0, [pc, #52]	; (8001918 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018e2:	490e      	ldr	r1, [pc, #56]	; (800191c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018e4:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e8:	e002      	b.n	80018f0 <LoopCopyDataInit>

080018ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ee:	3304      	adds	r3, #4

080018f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f4:	d3f9      	bcc.n	80018ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018f8:	4c0b      	ldr	r4, [pc, #44]	; (8001928 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018fc:	e001      	b.n	8001902 <LoopFillZerobss>

080018fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001900:	3204      	adds	r2, #4

08001902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001904:	d3fb      	bcc.n	80018fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001906:	f7ff f9bf 	bl	8000c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800190a:	f004 fc7f 	bl	800620c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190e:	f7fe fe55 	bl	80005bc <main>
  bx  lr    
 8001912:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800191c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001920:	08007470 	.word	0x08007470
  ldr r2, =_sbss
 8001924:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001928:	20004e70 	.word	0x20004e70

0800192c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800192c:	e7fe      	b.n	800192c <ADC_IRQHandler>
	...

08001930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <HAL_Init+0x40>)
 800193a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_Init+0x40>)
 8001946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800194a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a07      	ldr	r2, [pc, #28]	; (8001970 <HAL_Init+0x40>)
 8001952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001958:	2003      	movs	r0, #3
 800195a:	f000 f92b 	bl	8001bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195e:	200f      	movs	r0, #15
 8001960:	f000 f808 	bl	8001974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001964:	f7fe ffc4 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023c00 	.word	0x40023c00

08001974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x54>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_InitTick+0x58>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198a:	fbb3 f3f1 	udiv	r3, r3, r1
 800198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f943 	bl	8001c1e <HAL_SYSTICK_Config>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e00e      	b.n	80019c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b0f      	cmp	r3, #15
 80019a6:	d80a      	bhi.n	80019be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a8:	2200      	movs	r2, #0
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	f000 f90b 	bl	8001bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b4:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <HAL_InitTick+0x5c>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e000      	b.n	80019c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000008 	.word	0x20000008
 80019d0:	20000004 	.word	0x20000004

080019d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_IncTick+0x20>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_IncTick+0x24>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <HAL_IncTick+0x24>)
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000008 	.word	0x20000008
 80019f8:	20004e5c 	.word	0x20004e5c

080019fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_GetTick+0x14>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20004e5c 	.word	0x20004e5c

08001a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a46:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	60d3      	str	r3, [r2, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <__NVIC_GetPriorityGrouping+0x18>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0307 	and.w	r3, r3, #7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db0b      	blt.n	8001aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4907      	ldr	r1, [pc, #28]	; (8001ab0 <__NVIC_EnableIRQ+0x38>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	2001      	movs	r0, #1
 8001a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000e100 	.word	0xe000e100

08001ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	db0a      	blt.n	8001ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	490c      	ldr	r1, [pc, #48]	; (8001b00 <__NVIC_SetPriority+0x4c>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001adc:	e00a      	b.n	8001af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4908      	ldr	r1, [pc, #32]	; (8001b04 <__NVIC_SetPriority+0x50>)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	3b04      	subs	r3, #4
 8001aec:	0112      	lsls	r2, r2, #4
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	440b      	add	r3, r1
 8001af2:	761a      	strb	r2, [r3, #24]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f1c3 0307 	rsb	r3, r3, #7
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	bf28      	it	cs
 8001b26:	2304      	movcs	r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d902      	bls.n	8001b38 <NVIC_EncodePriority+0x30>
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3b03      	subs	r3, #3
 8001b36:	e000      	b.n	8001b3a <NVIC_EncodePriority+0x32>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	43d9      	mvns	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	4313      	orrs	r3, r2
         );
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b80:	d301      	bcc.n	8001b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00f      	b.n	8001ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <SysTick_Config+0x40>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8e:	210f      	movs	r1, #15
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f7ff ff8e 	bl	8001ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <SysTick_Config+0x40>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <SysTick_Config+0x40>)
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	e000e010 	.word	0xe000e010

08001bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff29 	bl	8001a14 <__NVIC_SetPriorityGrouping>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bdc:	f7ff ff3e 	bl	8001a5c <__NVIC_GetPriorityGrouping>
 8001be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	6978      	ldr	r0, [r7, #20]
 8001be8:	f7ff ff8e 	bl	8001b08 <NVIC_EncodePriority>
 8001bec:	4602      	mov	r2, r0
 8001bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff5d 	bl	8001ab4 <__NVIC_SetPriority>
}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff31 	bl	8001a78 <__NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffa2 	bl	8001b70 <SysTick_Config>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff feda 	bl	80019fc <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e099      	b.n	8001d88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c74:	e00f      	b.n	8001c96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c76:	f7ff fec1 	bl	80019fc <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b05      	cmp	r3, #5
 8001c82:	d908      	bls.n	8001c96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2220      	movs	r2, #32
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e078      	b.n	8001d88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1e8      	bne.n	8001c76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <HAL_DMA_Init+0x158>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d107      	bne.n	8001d00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f023 0307 	bic.w	r3, r3, #7
 8001d16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d117      	bne.n	8001d5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00e      	beq.n	8001d5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fadf 	bl	8002300 <DMA_CheckFifoParam>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2240      	movs	r2, #64	; 0x40
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d56:	2301      	movs	r3, #1
 8001d58:	e016      	b.n	8001d88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fa96 	bl	8002294 <DMA_CalcBaseAndBitshift>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	223f      	movs	r2, #63	; 0x3f
 8001d72:	409a      	lsls	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	f010803f 	.word	0xf010803f

08001d94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_DMA_Start_IT+0x26>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e040      	b.n	8001e3c <HAL_DMA_Start_IT+0xa8>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d12f      	bne.n	8001e2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 fa28 	bl	8002238 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dec:	223f      	movs	r2, #63	; 0x3f
 8001dee:	409a      	lsls	r2, r3
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0216 	orr.w	r2, r2, #22
 8001e02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d007      	beq.n	8001e1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0208 	orr.w	r2, r2, #8
 8001e1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e005      	b.n	8001e3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e36:	2302      	movs	r3, #2
 8001e38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e52:	f7ff fdd3 	bl	80019fc <HAL_GetTick>
 8001e56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d008      	beq.n	8001e76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e052      	b.n	8001f1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0216 	bic.w	r2, r2, #22
 8001e84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d103      	bne.n	8001ea6 <HAL_DMA_Abort+0x62>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d007      	beq.n	8001eb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0208 	bic.w	r2, r2, #8
 8001eb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0201 	bic.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec6:	e013      	b.n	8001ef0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ec8:	f7ff fd98 	bl	80019fc <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b05      	cmp	r3, #5
 8001ed4:	d90c      	bls.n	8001ef0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2203      	movs	r2, #3
 8001ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e015      	b.n	8001f1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1e4      	bne.n	8001ec8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f02:	223f      	movs	r2, #63	; 0x3f
 8001f04:	409a      	lsls	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f30:	4b92      	ldr	r3, [pc, #584]	; (800217c <HAL_DMA_IRQHandler+0x258>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a92      	ldr	r2, [pc, #584]	; (8002180 <HAL_DMA_IRQHandler+0x25c>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0a9b      	lsrs	r3, r3, #10
 8001f3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	2208      	movs	r2, #8
 8001f50:	409a      	lsls	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01a      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d013      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0204 	bic.w	r2, r2, #4
 8001f76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	2201      	movs	r2, #1
 8001f96:	409a      	lsls	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d012      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	f043 0202 	orr.w	r2, r3, #2
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	2204      	movs	r2, #4
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d012      	beq.n	8001ffc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe8:	2204      	movs	r2, #4
 8001fea:	409a      	lsls	r2, r3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	f043 0204 	orr.w	r2, r3, #4
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002000:	2210      	movs	r2, #16
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d043      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d03c      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201e:	2210      	movs	r2, #16
 8002020:	409a      	lsls	r2, r3
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d018      	beq.n	8002066 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d108      	bne.n	8002054 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d024      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	4798      	blx	r3
 8002052:	e01f      	b.n	8002094 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01b      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
 8002064:	e016      	b.n	8002094 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d107      	bne.n	8002084 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0208 	bic.w	r2, r2, #8
 8002082:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	2220      	movs	r2, #32
 800209a:	409a      	lsls	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 808e 	beq.w	80021c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 8086 	beq.w	80021c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ba:	2220      	movs	r2, #32
 80020bc:	409a      	lsls	r2, r3
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b05      	cmp	r3, #5
 80020cc:	d136      	bne.n	800213c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0216 	bic.w	r2, r2, #22
 80020dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d103      	bne.n	80020fe <HAL_DMA_IRQHandler+0x1da>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0208 	bic.w	r2, r2, #8
 800210c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	223f      	movs	r2, #63	; 0x3f
 8002114:	409a      	lsls	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212e:	2b00      	cmp	r3, #0
 8002130:	d07d      	beq.n	800222e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4798      	blx	r3
        }
        return;
 800213a:	e078      	b.n	800222e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d01c      	beq.n	8002184 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d108      	bne.n	800216a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	2b00      	cmp	r3, #0
 800215e:	d030      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4798      	blx	r3
 8002168:	e02b      	b.n	80021c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	2b00      	cmp	r3, #0
 8002170:	d027      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4798      	blx	r3
 800217a:	e022      	b.n	80021c2 <HAL_DMA_IRQHandler+0x29e>
 800217c:	20000000 	.word	0x20000000
 8002180:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10f      	bne.n	80021b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0210 	bic.w	r2, r2, #16
 80021a0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d032      	beq.n	8002230 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d022      	beq.n	800221c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2205      	movs	r2, #5
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0201 	bic.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	3301      	adds	r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d307      	bcc.n	800220a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f2      	bne.n	80021ee <HAL_DMA_IRQHandler+0x2ca>
 8002208:	e000      	b.n	800220c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800220a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
 800222c:	e000      	b.n	8002230 <HAL_DMA_IRQHandler+0x30c>
        return;
 800222e:	bf00      	nop
    }
  }
}
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop

08002238 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002254:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b40      	cmp	r3, #64	; 0x40
 8002264:	d108      	bne.n	8002278 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002276:	e007      	b.n	8002288 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	60da      	str	r2, [r3, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	3b10      	subs	r3, #16
 80022a4:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <DMA_CalcBaseAndBitshift+0x64>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ae:	4a13      	ldr	r2, [pc, #76]	; (80022fc <DMA_CalcBaseAndBitshift+0x68>)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d909      	bls.n	80022d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ca:	f023 0303 	bic.w	r3, r3, #3
 80022ce:	1d1a      	adds	r2, r3, #4
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	659a      	str	r2, [r3, #88]	; 0x58
 80022d4:	e007      	b.n	80022e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022de:	f023 0303 	bic.w	r3, r3, #3
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	aaaaaaab 	.word	0xaaaaaaab
 80022fc:	080073c0 	.word	0x080073c0

08002300 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d11f      	bne.n	800235a <DMA_CheckFifoParam+0x5a>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d856      	bhi.n	80023ce <DMA_CheckFifoParam+0xce>
 8002320:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <DMA_CheckFifoParam+0x28>)
 8002322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002326:	bf00      	nop
 8002328:	08002339 	.word	0x08002339
 800232c:	0800234b 	.word	0x0800234b
 8002330:	08002339 	.word	0x08002339
 8002334:	080023cf 	.word	0x080023cf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d046      	beq.n	80023d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002348:	e043      	b.n	80023d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002352:	d140      	bne.n	80023d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002358:	e03d      	b.n	80023d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002362:	d121      	bne.n	80023a8 <DMA_CheckFifoParam+0xa8>
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d837      	bhi.n	80023da <DMA_CheckFifoParam+0xda>
 800236a:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <DMA_CheckFifoParam+0x70>)
 800236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002370:	08002381 	.word	0x08002381
 8002374:	08002387 	.word	0x08002387
 8002378:	08002381 	.word	0x08002381
 800237c:	08002399 	.word	0x08002399
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
      break;
 8002384:	e030      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d025      	beq.n	80023de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002396:	e022      	b.n	80023de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023a0:	d11f      	bne.n	80023e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023a6:	e01c      	b.n	80023e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d903      	bls.n	80023b6 <DMA_CheckFifoParam+0xb6>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d003      	beq.n	80023bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023b4:	e018      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
      break;
 80023ba:	e015      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00e      	beq.n	80023e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      break;
 80023cc:	e00b      	b.n	80023e6 <DMA_CheckFifoParam+0xe6>
      break;
 80023ce:	bf00      	nop
 80023d0:	e00a      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023d2:	bf00      	nop
 80023d4:	e008      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023d6:	bf00      	nop
 80023d8:	e006      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023da:	bf00      	nop
 80023dc:	e004      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023de:	bf00      	nop
 80023e0:	e002      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023e2:	bf00      	nop
 80023e4:	e000      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023e6:	bf00      	nop
    }
  } 
  
  return status; 
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop

080023f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	e159      	b.n	80026c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002414:	2201      	movs	r2, #1
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	429a      	cmp	r2, r3
 800242e:	f040 8148 	bne.w	80026c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d005      	beq.n	800244a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002446:	2b02      	cmp	r3, #2
 8002448:	d130      	bne.n	80024ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2203      	movs	r2, #3
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 0201 	and.w	r2, r3, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d017      	beq.n	80024e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d123      	bne.n	800253c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	08da      	lsrs	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3208      	adds	r2, #8
 80024fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	220f      	movs	r2, #15
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	08da      	lsrs	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3208      	adds	r2, #8
 8002536:	69b9      	ldr	r1, [r7, #24]
 8002538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0203 	and.w	r2, r3, #3
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80a2 	beq.w	80026c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	4b57      	ldr	r3, [pc, #348]	; (80026e0 <HAL_GPIO_Init+0x2e8>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	4a56      	ldr	r2, [pc, #344]	; (80026e0 <HAL_GPIO_Init+0x2e8>)
 8002588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800258c:	6453      	str	r3, [r2, #68]	; 0x44
 800258e:	4b54      	ldr	r3, [pc, #336]	; (80026e0 <HAL_GPIO_Init+0x2e8>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800259a:	4a52      	ldr	r2, [pc, #328]	; (80026e4 <HAL_GPIO_Init+0x2ec>)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	3302      	adds	r3, #2
 80025a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	220f      	movs	r2, #15
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a49      	ldr	r2, [pc, #292]	; (80026e8 <HAL_GPIO_Init+0x2f0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d019      	beq.n	80025fa <HAL_GPIO_Init+0x202>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a48      	ldr	r2, [pc, #288]	; (80026ec <HAL_GPIO_Init+0x2f4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_GPIO_Init+0x1fe>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a47      	ldr	r2, [pc, #284]	; (80026f0 <HAL_GPIO_Init+0x2f8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00d      	beq.n	80025f2 <HAL_GPIO_Init+0x1fa>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a46      	ldr	r2, [pc, #280]	; (80026f4 <HAL_GPIO_Init+0x2fc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d007      	beq.n	80025ee <HAL_GPIO_Init+0x1f6>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a45      	ldr	r2, [pc, #276]	; (80026f8 <HAL_GPIO_Init+0x300>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d101      	bne.n	80025ea <HAL_GPIO_Init+0x1f2>
 80025e6:	2304      	movs	r3, #4
 80025e8:	e008      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025ea:	2307      	movs	r3, #7
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e004      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e002      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025fa:	2300      	movs	r3, #0
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	f002 0203 	and.w	r2, r2, #3
 8002602:	0092      	lsls	r2, r2, #2
 8002604:	4093      	lsls	r3, r2
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800260c:	4935      	ldr	r1, [pc, #212]	; (80026e4 <HAL_GPIO_Init+0x2ec>)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	3302      	adds	r3, #2
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261a:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_GPIO_Init+0x304>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263e:	4a2f      	ldr	r2, [pc, #188]	; (80026fc <HAL_GPIO_Init+0x304>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002644:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_GPIO_Init+0x304>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002668:	4a24      	ldr	r2, [pc, #144]	; (80026fc <HAL_GPIO_Init+0x304>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800266e:	4b23      	ldr	r3, [pc, #140]	; (80026fc <HAL_GPIO_Init+0x304>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002692:	4a1a      	ldr	r2, [pc, #104]	; (80026fc <HAL_GPIO_Init+0x304>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002698:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_GPIO_Init+0x304>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026bc:	4a0f      	ldr	r2, [pc, #60]	; (80026fc <HAL_GPIO_Init+0x304>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3301      	adds	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	2b0f      	cmp	r3, #15
 80026cc:	f67f aea2 	bls.w	8002414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3724      	adds	r7, #36	; 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40013c00 	.word	0x40013c00

08002700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
 800270c:	4613      	mov	r3, r2
 800270e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002710:	787b      	ldrb	r3, [r7, #1]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800271c:	e003      	b.n	8002726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	041a      	lsls	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	619a      	str	r2, [r3, #24]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e264      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d075      	beq.n	800283e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002752:	4ba3      	ldr	r3, [pc, #652]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b04      	cmp	r3, #4
 800275c:	d00c      	beq.n	8002778 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275e:	4ba0      	ldr	r3, [pc, #640]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002766:	2b08      	cmp	r3, #8
 8002768:	d112      	bne.n	8002790 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276a:	4b9d      	ldr	r3, [pc, #628]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002776:	d10b      	bne.n	8002790 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	4b99      	ldr	r3, [pc, #612]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d05b      	beq.n	800283c <HAL_RCC_OscConfig+0x108>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d157      	bne.n	800283c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e23f      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002798:	d106      	bne.n	80027a8 <HAL_RCC_OscConfig+0x74>
 800279a:	4b91      	ldr	r3, [pc, #580]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a90      	ldr	r2, [pc, #576]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e01d      	b.n	80027e4 <HAL_RCC_OscConfig+0xb0>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x98>
 80027b2:	4b8b      	ldr	r3, [pc, #556]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a8a      	ldr	r2, [pc, #552]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b88      	ldr	r3, [pc, #544]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a87      	ldr	r2, [pc, #540]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e00b      	b.n	80027e4 <HAL_RCC_OscConfig+0xb0>
 80027cc:	4b84      	ldr	r3, [pc, #528]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a83      	ldr	r2, [pc, #524]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 80027d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b81      	ldr	r3, [pc, #516]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a80      	ldr	r2, [pc, #512]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 80027de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d013      	beq.n	8002814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7ff f906 	bl	80019fc <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f4:	f7ff f902 	bl	80019fc <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	; 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e204      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0xc0>
 8002812:	e014      	b.n	800283e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7ff f8f2 	bl	80019fc <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800281c:	f7ff f8ee 	bl	80019fc <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e1f0      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282e:	4b6c      	ldr	r3, [pc, #432]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0xe8>
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d063      	beq.n	8002912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800284a:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002856:	4b62      	ldr	r3, [pc, #392]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800285e:	2b08      	cmp	r3, #8
 8002860:	d11c      	bne.n	800289c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002862:	4b5f      	ldr	r3, [pc, #380]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d116      	bne.n	800289c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286e:	4b5c      	ldr	r3, [pc, #368]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_RCC_OscConfig+0x152>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e1c4      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002886:	4b56      	ldr	r3, [pc, #344]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4952      	ldr	r1, [pc, #328]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	e03a      	b.n	8002912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a4:	4b4f      	ldr	r3, [pc, #316]	; (80029e4 <HAL_RCC_OscConfig+0x2b0>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7ff f8a7 	bl	80019fc <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b2:	f7ff f8a3 	bl	80019fc <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e1a5      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c4:	4b46      	ldr	r3, [pc, #280]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b43      	ldr	r3, [pc, #268]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4940      	ldr	r1, [pc, #256]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]
 80028e4:	e015      	b.n	8002912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e6:	4b3f      	ldr	r3, [pc, #252]	; (80029e4 <HAL_RCC_OscConfig+0x2b0>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7ff f886 	bl	80019fc <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f4:	f7ff f882 	bl	80019fc <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e184      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002906:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d030      	beq.n	8002980 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d016      	beq.n	8002954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002926:	4b30      	ldr	r3, [pc, #192]	; (80029e8 <HAL_RCC_OscConfig+0x2b4>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7ff f866 	bl	80019fc <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002934:	f7ff f862 	bl	80019fc <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e164      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002946:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 8002948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x200>
 8002952:	e015      	b.n	8002980 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002954:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_RCC_OscConfig+0x2b4>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295a:	f7ff f84f 	bl	80019fc <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002962:	f7ff f84b 	bl	80019fc <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e14d      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002974:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 8002976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f0      	bne.n	8002962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 80a0 	beq.w	8002ace <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10f      	bne.n	80029be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a0e      	ldr	r2, [pc, #56]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ac:	6413      	str	r3, [r2, #64]	; 0x40
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ba:	2301      	movs	r3, #1
 80029bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_RCC_OscConfig+0x2b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d121      	bne.n	8002a0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <HAL_RCC_OscConfig+0x2b8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a07      	ldr	r2, [pc, #28]	; (80029ec <HAL_RCC_OscConfig+0x2b8>)
 80029d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d6:	f7ff f811 	bl	80019fc <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029dc:	e011      	b.n	8002a02 <HAL_RCC_OscConfig+0x2ce>
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	42470000 	.word	0x42470000
 80029e8:	42470e80 	.word	0x42470e80
 80029ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f0:	f7ff f804 	bl	80019fc <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e106      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a02:	4b85      	ldr	r3, [pc, #532]	; (8002c18 <HAL_RCC_OscConfig+0x4e4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d106      	bne.n	8002a24 <HAL_RCC_OscConfig+0x2f0>
 8002a16:	4b81      	ldr	r3, [pc, #516]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	4a80      	ldr	r2, [pc, #512]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6713      	str	r3, [r2, #112]	; 0x70
 8002a22:	e01c      	b.n	8002a5e <HAL_RCC_OscConfig+0x32a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b05      	cmp	r3, #5
 8002a2a:	d10c      	bne.n	8002a46 <HAL_RCC_OscConfig+0x312>
 8002a2c:	4b7b      	ldr	r3, [pc, #492]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	4a7a      	ldr	r2, [pc, #488]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002a32:	f043 0304 	orr.w	r3, r3, #4
 8002a36:	6713      	str	r3, [r2, #112]	; 0x70
 8002a38:	4b78      	ldr	r3, [pc, #480]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	4a77      	ldr	r2, [pc, #476]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6713      	str	r3, [r2, #112]	; 0x70
 8002a44:	e00b      	b.n	8002a5e <HAL_RCC_OscConfig+0x32a>
 8002a46:	4b75      	ldr	r3, [pc, #468]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	4a74      	ldr	r2, [pc, #464]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002a4c:	f023 0301 	bic.w	r3, r3, #1
 8002a50:	6713      	str	r3, [r2, #112]	; 0x70
 8002a52:	4b72      	ldr	r3, [pc, #456]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	4a71      	ldr	r2, [pc, #452]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002a58:	f023 0304 	bic.w	r3, r3, #4
 8002a5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d015      	beq.n	8002a92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a66:	f7fe ffc9 	bl	80019fc <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a6e:	f7fe ffc5 	bl	80019fc <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e0c5      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a84:	4b65      	ldr	r3, [pc, #404]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0ee      	beq.n	8002a6e <HAL_RCC_OscConfig+0x33a>
 8002a90:	e014      	b.n	8002abc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a92:	f7fe ffb3 	bl	80019fc <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a98:	e00a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9a:	f7fe ffaf 	bl	80019fc <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e0af      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab0:	4b5a      	ldr	r3, [pc, #360]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1ee      	bne.n	8002a9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002abc:	7dfb      	ldrb	r3, [r7, #23]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d105      	bne.n	8002ace <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac2:	4b56      	ldr	r3, [pc, #344]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	4a55      	ldr	r2, [pc, #340]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 809b 	beq.w	8002c0e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ad8:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d05c      	beq.n	8002b9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d141      	bne.n	8002b70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aec:	4b4c      	ldr	r3, [pc, #304]	; (8002c20 <HAL_RCC_OscConfig+0x4ec>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7fe ff83 	bl	80019fc <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afa:	f7fe ff7f 	bl	80019fc <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e081      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0c:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f0      	bne.n	8002afa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69da      	ldr	r2, [r3, #28]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	019b      	lsls	r3, r3, #6
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	3b01      	subs	r3, #1
 8002b32:	041b      	lsls	r3, r3, #16
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	061b      	lsls	r3, r3, #24
 8002b3c:	4937      	ldr	r1, [pc, #220]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b42:	4b37      	ldr	r3, [pc, #220]	; (8002c20 <HAL_RCC_OscConfig+0x4ec>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7fe ff58 	bl	80019fc <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b50:	f7fe ff54 	bl	80019fc <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e056      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b62:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x41c>
 8002b6e:	e04e      	b.n	8002c0e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <HAL_RCC_OscConfig+0x4ec>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7fe ff41 	bl	80019fc <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7e:	f7fe ff3d 	bl	80019fc <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e03f      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b90:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_OscConfig+0x44a>
 8002b9c:	e037      	b.n	8002c0e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e032      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <HAL_RCC_OscConfig+0x4e8>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d028      	beq.n	8002c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d121      	bne.n	8002c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d11a      	bne.n	8002c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bda:	4013      	ands	r3, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002be0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d111      	bne.n	8002c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d107      	bne.n	8002c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d001      	beq.n	8002c0e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40007000 	.word	0x40007000
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	42470060 	.word	0x42470060

08002c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0cc      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c38:	4b68      	ldr	r3, [pc, #416]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d90c      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b65      	ldr	r3, [pc, #404]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b63      	ldr	r3, [pc, #396]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0b8      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d020      	beq.n	8002cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c78:	4b59      	ldr	r3, [pc, #356]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4a58      	ldr	r2, [pc, #352]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c90:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4a52      	ldr	r2, [pc, #328]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9c:	4b50      	ldr	r3, [pc, #320]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	494d      	ldr	r1, [pc, #308]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d044      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d119      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e07f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce2:	4b3f      	ldr	r3, [pc, #252]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	4b3b      	ldr	r3, [pc, #236]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e067      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d02:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f023 0203 	bic.w	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4934      	ldr	r1, [pc, #208]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d14:	f7fe fe72 	bl	80019fc <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1c:	f7fe fe6e 	bl	80019fc <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e04f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 020c 	and.w	r2, r3, #12
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d1eb      	bne.n	8002d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d44:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d20c      	bcs.n	8002d6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e032      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4916      	ldr	r1, [pc, #88]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	490e      	ldr	r1, [pc, #56]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002daa:	f000 f821 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	490a      	ldr	r1, [pc, #40]	; (8002de4 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	5ccb      	ldrb	r3, [r1, r3]
 8002dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc2:	4a09      	ldr	r2, [pc, #36]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe fdd2 	bl	8001974 <HAL_InitTick>

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023c00 	.word	0x40023c00
 8002de0:	40023800 	.word	0x40023800
 8002de4:	080073a8 	.word	0x080073a8
 8002de8:	20000000 	.word	0x20000000
 8002dec:	20000004 	.word	0x20000004

08002df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	607b      	str	r3, [r7, #4]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	2300      	movs	r3, #0
 8002e02:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e08:	4b67      	ldr	r3, [pc, #412]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d00d      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x40>
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	f200 80bd 	bhi.w	8002f94 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x34>
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d003      	beq.n	8002e2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e22:	e0b7      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e24:	4b61      	ldr	r3, [pc, #388]	; (8002fac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e26:	60bb      	str	r3, [r7, #8]
       break;
 8002e28:	e0b7      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e2a:	4b61      	ldr	r3, [pc, #388]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e2c:	60bb      	str	r3, [r7, #8]
      break;
 8002e2e:	e0b4      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e30:	4b5d      	ldr	r3, [pc, #372]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e3a:	4b5b      	ldr	r3, [pc, #364]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d04d      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e46:	4b58      	ldr	r3, [pc, #352]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	099b      	lsrs	r3, r3, #6
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e56:	f04f 0100 	mov.w	r1, #0
 8002e5a:	ea02 0800 	and.w	r8, r2, r0
 8002e5e:	ea03 0901 	and.w	r9, r3, r1
 8002e62:	4640      	mov	r0, r8
 8002e64:	4649      	mov	r1, r9
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	014b      	lsls	r3, r1, #5
 8002e70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e74:	0142      	lsls	r2, r0, #5
 8002e76:	4610      	mov	r0, r2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	ebb0 0008 	subs.w	r0, r0, r8
 8002e7e:	eb61 0109 	sbc.w	r1, r1, r9
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	018b      	lsls	r3, r1, #6
 8002e8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e90:	0182      	lsls	r2, r0, #6
 8002e92:	1a12      	subs	r2, r2, r0
 8002e94:	eb63 0301 	sbc.w	r3, r3, r1
 8002e98:	f04f 0000 	mov.w	r0, #0
 8002e9c:	f04f 0100 	mov.w	r1, #0
 8002ea0:	00d9      	lsls	r1, r3, #3
 8002ea2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ea6:	00d0      	lsls	r0, r2, #3
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	eb12 0208 	adds.w	r2, r2, r8
 8002eb0:	eb43 0309 	adc.w	r3, r3, r9
 8002eb4:	f04f 0000 	mov.w	r0, #0
 8002eb8:	f04f 0100 	mov.w	r1, #0
 8002ebc:	0259      	lsls	r1, r3, #9
 8002ebe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ec2:	0250      	lsls	r0, r2, #9
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	f7fd f9dc 	bl	8000290 <__aeabi_uldivmod>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4613      	mov	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e04a      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee2:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	099b      	lsrs	r3, r3, #6
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	ea02 0400 	and.w	r4, r2, r0
 8002efa:	ea03 0501 	and.w	r5, r3, r1
 8002efe:	4620      	mov	r0, r4
 8002f00:	4629      	mov	r1, r5
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	014b      	lsls	r3, r1, #5
 8002f0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f10:	0142      	lsls	r2, r0, #5
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	1b00      	subs	r0, r0, r4
 8002f18:	eb61 0105 	sbc.w	r1, r1, r5
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	018b      	lsls	r3, r1, #6
 8002f26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f2a:	0182      	lsls	r2, r0, #6
 8002f2c:	1a12      	subs	r2, r2, r0
 8002f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f32:	f04f 0000 	mov.w	r0, #0
 8002f36:	f04f 0100 	mov.w	r1, #0
 8002f3a:	00d9      	lsls	r1, r3, #3
 8002f3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f40:	00d0      	lsls	r0, r2, #3
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	1912      	adds	r2, r2, r4
 8002f48:	eb45 0303 	adc.w	r3, r5, r3
 8002f4c:	f04f 0000 	mov.w	r0, #0
 8002f50:	f04f 0100 	mov.w	r1, #0
 8002f54:	0299      	lsls	r1, r3, #10
 8002f56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f5a:	0290      	lsls	r0, r2, #10
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	461a      	mov	r2, r3
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	f7fd f990 	bl	8000290 <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4613      	mov	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	3301      	adds	r3, #1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	60bb      	str	r3, [r7, #8]
      break;
 8002f92:	e002      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f96:	60bb      	str	r3, [r7, #8]
      break;
 8002f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	00f42400 	.word	0x00f42400
 8002fb0:	007a1200 	.word	0x007a1200

08002fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000000 	.word	0x20000000

08002fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fd0:	f7ff fff0 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	0a9b      	lsrs	r3, r3, #10
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4903      	ldr	r1, [pc, #12]	; (8002ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	080073b8 	.word	0x080073b8

08002ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ff8:	f7ff ffdc 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	0b5b      	lsrs	r3, r3, #13
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	4903      	ldr	r1, [pc, #12]	; (8003018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800300a:	5ccb      	ldrb	r3, [r1, r3]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40023800 	.word	0x40023800
 8003018:	080073b8 	.word	0x080073b8

0800301c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e03f      	b.n	80030ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fd fc80 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2224      	movs	r2, #36	; 0x24
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800305e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fc23 	bl	80038ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003074:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003084:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003094:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b08a      	sub	sp, #40	; 0x28
 80030ba:	af02      	add	r7, sp, #8
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d17c      	bne.n	80031d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_UART_Transmit+0x2c>
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e075      	b.n	80031d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_UART_Transmit+0x3e>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e06e      	b.n	80031d2 <HAL_UART_Transmit+0x11c>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2221      	movs	r2, #33	; 0x21
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800310a:	f7fe fc77 	bl	80019fc <HAL_GetTick>
 800310e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	88fa      	ldrh	r2, [r7, #6]
 8003114:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	88fa      	ldrh	r2, [r7, #6]
 800311a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003124:	d108      	bne.n	8003138 <HAL_UART_Transmit+0x82>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d104      	bne.n	8003138 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	e003      	b.n	8003140 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800313c:	2300      	movs	r3, #0
 800313e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003148:	e02a      	b.n	80031a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2200      	movs	r2, #0
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 fa11 	bl	800357c <UART_WaitOnFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e036      	b.n	80031d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10b      	bne.n	8003182 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003178:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	3302      	adds	r3, #2
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	e007      	b.n	8003192 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	781a      	ldrb	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	3301      	adds	r3, #1
 8003190:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1cf      	bne.n	800314a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2200      	movs	r2, #0
 80031b2:	2140      	movs	r1, #64	; 0x40
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f9e1 	bl	800357c <UART_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e006      	b.n	80031d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	e000      	b.n	80031d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031d0:	2302      	movs	r3, #2
  }
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	4613      	mov	r3, r2
 80031e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d11d      	bne.n	8003230 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_UART_Receive_DMA+0x26>
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e016      	b.n	8003232 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_UART_Receive_DMA+0x38>
 800320e:	2302      	movs	r3, #2
 8003210:	e00f      	b.n	8003232 <HAL_UART_Receive_DMA+0x58>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	461a      	mov	r2, r3
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fa16 	bl	8003658 <UART_Start_Receive_DMA>
 800322c:	4603      	mov	r3, r0
 800322e:	e000      	b.n	8003232 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b090      	sub	sp, #64	; 0x40
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003242:	2300      	movs	r3, #0
 8003244:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003250:	2b80      	cmp	r3, #128	; 0x80
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b21      	cmp	r3, #33	; 0x21
 8003266:	d128      	bne.n	80032ba <HAL_UART_DMAStop+0x80>
 8003268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d025      	beq.n	80032ba <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3314      	adds	r3, #20
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	e853 3f00 	ldrex	r3, [r3]
 800327c:	623b      	str	r3, [r7, #32]
   return(result);
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003284:	63bb      	str	r3, [r7, #56]	; 0x38
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3314      	adds	r3, #20
 800328c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800328e:	633a      	str	r2, [r7, #48]	; 0x30
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003296:	e841 2300 	strex	r3, r2, [r1]
 800329a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e5      	bne.n	800326e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d004      	beq.n	80032b4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe fdc8 	bl	8001e44 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fa6d 	bl	8003794 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	bf0c      	ite	eq
 80032c8:	2301      	moveq	r3, #1
 80032ca:	2300      	movne	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b22      	cmp	r3, #34	; 0x22
 80032da:	d128      	bne.n	800332e <HAL_UART_DMAStop+0xf4>
 80032dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d025      	beq.n	800332e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3314      	adds	r3, #20
 80032e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f8:	637b      	str	r3, [r7, #52]	; 0x34
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3314      	adds	r3, #20
 8003300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003302:	61fa      	str	r2, [r7, #28]
 8003304:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	69b9      	ldr	r1, [r7, #24]
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	617b      	str	r3, [r7, #20]
   return(result);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e5      	bne.n	80032e2 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	2b00      	cmp	r3, #0
 800331c:	d004      	beq.n	8003328 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe fd8e 	bl	8001e44 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fa5b 	bl	80037e4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3740      	adds	r7, #64	; 0x40
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b09c      	sub	sp, #112	; 0x70
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d172      	bne.n	800348e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80033a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033aa:	2200      	movs	r2, #0
 80033ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	330c      	adds	r3, #12
 80033b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b8:	e853 3f00 	ldrex	r3, [r3]
 80033bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80033c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	330c      	adds	r3, #12
 80033cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80033d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033d6:	e841 2300 	strex	r3, r2, [r1]
 80033da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1e5      	bne.n	80033ae <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3314      	adds	r3, #20
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	667b      	str	r3, [r7, #100]	; 0x64
 80033fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3314      	adds	r3, #20
 8003400:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003402:	647a      	str	r2, [r7, #68]	; 0x44
 8003404:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e5      	bne.n	80033e2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3314      	adds	r3, #20
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	623b      	str	r3, [r7, #32]
   return(result);
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800342c:	663b      	str	r3, [r7, #96]	; 0x60
 800342e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3314      	adds	r3, #20
 8003434:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003436:	633a      	str	r2, [r7, #48]	; 0x30
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800343c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e5      	bne.n	8003416 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800344a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344c:	2220      	movs	r2, #32
 800344e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	2b01      	cmp	r3, #1
 8003458:	d119      	bne.n	800348e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800345a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	60fb      	str	r3, [r7, #12]
   return(result);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f023 0310 	bic.w	r3, r3, #16
 8003470:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800347a:	61fa      	str	r2, [r7, #28]
 800347c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	69b9      	ldr	r1, [r7, #24]
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	e841 2300 	strex	r3, r2, [r1]
 8003486:	617b      	str	r3, [r7, #20]
   return(result);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e5      	bne.n	800345a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800348e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	2b01      	cmp	r3, #1
 8003494:	d106      	bne.n	80034a4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003498:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800349a:	4619      	mov	r1, r3
 800349c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800349e:	f7ff ff69 	bl	8003374 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034a2:	e002      	b.n	80034aa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80034a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80034a6:	f7ff ff47 	bl	8003338 <HAL_UART_RxCpltCallback>
}
 80034aa:	bf00      	nop
 80034ac:	3770      	adds	r7, #112	; 0x70
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d108      	bne.n	80034da <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034cc:	085b      	lsrs	r3, r3, #1
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	4619      	mov	r1, r3
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f7ff ff4e 	bl	8003374 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034d8:	e002      	b.n	80034e0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f7ff ff36 	bl	800334c <HAL_UART_RxHalfCpltCallback>
}
 80034e0:	bf00      	nop
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003504:	2b80      	cmp	r3, #128	; 0x80
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b21      	cmp	r3, #33	; 0x21
 800351a:	d108      	bne.n	800352e <UART_DMAError+0x46>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2200      	movs	r2, #0
 8003526:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003528:	68b8      	ldr	r0, [r7, #8]
 800352a:	f000 f933 	bl	8003794 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003538:	2b40      	cmp	r3, #64	; 0x40
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b22      	cmp	r3, #34	; 0x22
 800354e:	d108      	bne.n	8003562 <UART_DMAError+0x7a>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2200      	movs	r2, #0
 800355a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800355c:	68b8      	ldr	r0, [r7, #8]
 800355e:	f000 f941 	bl	80037e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f043 0210 	orr.w	r2, r3, #16
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800356e:	68b8      	ldr	r0, [r7, #8]
 8003570:	f7ff fef6 	bl	8003360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003574:	bf00      	nop
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b090      	sub	sp, #64	; 0x40
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	4613      	mov	r3, r2
 800358a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800358c:	e050      	b.n	8003630 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d04c      	beq.n	8003630 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <UART_WaitOnFlagUntilTimeout+0x30>
 800359c:	f7fe fa2e 	bl	80019fc <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d241      	bcs.n	8003630 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	330c      	adds	r3, #12
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	e853 3f00 	ldrex	r3, [r3]
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	330c      	adds	r3, #12
 80035ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035cc:	637a      	str	r2, [r7, #52]	; 0x34
 80035ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035d4:	e841 2300 	strex	r3, r2, [r1]
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e5      	bne.n	80035ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3314      	adds	r3, #20
 80035e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	e853 3f00 	ldrex	r3, [r3]
 80035ee:	613b      	str	r3, [r7, #16]
   return(result);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f023 0301 	bic.w	r3, r3, #1
 80035f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3314      	adds	r3, #20
 80035fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003600:	623a      	str	r2, [r7, #32]
 8003602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003604:	69f9      	ldr	r1, [r7, #28]
 8003606:	6a3a      	ldr	r2, [r7, #32]
 8003608:	e841 2300 	strex	r3, r2, [r1]
 800360c:	61bb      	str	r3, [r7, #24]
   return(result);
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e5      	bne.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e00f      	b.n	8003650 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4013      	ands	r3, r2
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	429a      	cmp	r2, r3
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	429a      	cmp	r2, r3
 800364c:	d09f      	beq.n	800358e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3740      	adds	r7, #64	; 0x40
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b098      	sub	sp, #96	; 0x60
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	88fa      	ldrh	r2, [r7, #6]
 8003670:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2222      	movs	r2, #34	; 0x22
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	4a40      	ldr	r2, [pc, #256]	; (8003788 <UART_Start_Receive_DMA+0x130>)
 8003686:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	4a3f      	ldr	r2, [pc, #252]	; (800378c <UART_Start_Receive_DMA+0x134>)
 800368e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	4a3e      	ldr	r2, [pc, #248]	; (8003790 <UART_Start_Receive_DMA+0x138>)
 8003696:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	2200      	movs	r2, #0
 800369e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80036a0:	f107 0308 	add.w	r3, r7, #8
 80036a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3304      	adds	r3, #4
 80036b0:	4619      	mov	r1, r3
 80036b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	f7fe fb6c 	bl	8001d94 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d019      	beq.n	8003716 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	330c      	adds	r3, #12
 80036e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ec:	e853 3f00 	ldrex	r3, [r3]
 80036f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	330c      	adds	r3, #12
 8003700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003702:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003704:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003708:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e5      	bne.n	80036e2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3314      	adds	r3, #20
 800371c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	e853 3f00 	ldrex	r3, [r3]
 8003724:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	657b      	str	r3, [r7, #84]	; 0x54
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3314      	adds	r3, #20
 8003734:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003736:	63ba      	str	r2, [r7, #56]	; 0x38
 8003738:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800373c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800373e:	e841 2300 	strex	r3, r2, [r1]
 8003742:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1e5      	bne.n	8003716 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3314      	adds	r3, #20
 8003750:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	e853 3f00 	ldrex	r3, [r3]
 8003758:	617b      	str	r3, [r7, #20]
   return(result);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003760:	653b      	str	r3, [r7, #80]	; 0x50
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3314      	adds	r3, #20
 8003768:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800376a:	627a      	str	r2, [r7, #36]	; 0x24
 800376c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	6a39      	ldr	r1, [r7, #32]
 8003770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	61fb      	str	r3, [r7, #28]
   return(result);
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e5      	bne.n	800374a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3760      	adds	r7, #96	; 0x60
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	0800338d 	.word	0x0800338d
 800378c:	080034b3 	.word	0x080034b3
 8003790:	080034e9 	.word	0x080034e9

08003794 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003794:	b480      	push	{r7}
 8003796:	b089      	sub	sp, #36	; 0x24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	330c      	adds	r3, #12
 80037a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	e853 3f00 	ldrex	r3, [r3]
 80037aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80037b2:	61fb      	str	r3, [r7, #28]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	330c      	adds	r3, #12
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	61ba      	str	r2, [r7, #24]
 80037be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c0:	6979      	ldr	r1, [r7, #20]
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	e841 2300 	strex	r3, r2, [r1]
 80037c8:	613b      	str	r3, [r7, #16]
   return(result);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e5      	bne.n	800379c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80037d8:	bf00      	nop
 80037da:	3724      	adds	r7, #36	; 0x24
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b095      	sub	sp, #84	; 0x54
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	330c      	adds	r3, #12
 80037f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f6:	e853 3f00 	ldrex	r3, [r3]
 80037fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	330c      	adds	r3, #12
 800380a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800380c:	643a      	str	r2, [r7, #64]	; 0x40
 800380e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003812:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e5      	bne.n	80037ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3314      	adds	r3, #20
 8003826:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	e853 3f00 	ldrex	r3, [r3]
 800382e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	64bb      	str	r3, [r7, #72]	; 0x48
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3314      	adds	r3, #20
 800383e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003840:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e5      	bne.n	8003820 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	2b01      	cmp	r3, #1
 800385a:	d119      	bne.n	8003890 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	60bb      	str	r3, [r7, #8]
   return(result);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f023 0310 	bic.w	r3, r3, #16
 8003872:	647b      	str	r3, [r7, #68]	; 0x44
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800387c:	61ba      	str	r2, [r7, #24]
 800387e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	6979      	ldr	r1, [r7, #20]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	e841 2300 	strex	r3, r2, [r1]
 8003888:	613b      	str	r3, [r7, #16]
   return(result);
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e5      	bne.n	800385c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800389e:	bf00      	nop
 80038a0:	3754      	adds	r7, #84	; 0x54
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b0:	b09f      	sub	sp, #124	; 0x7c
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c2:	68d9      	ldr	r1, [r3, #12]
 80038c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	ea40 0301 	orr.w	r3, r0, r1
 80038cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	431a      	orrs	r2, r3
 80038de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80038e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038f0:	f021 010c 	bic.w	r1, r1, #12
 80038f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038fa:	430b      	orrs	r3, r1
 80038fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390a:	6999      	ldr	r1, [r3, #24]
 800390c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	ea40 0301 	orr.w	r3, r0, r1
 8003914:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4bc5      	ldr	r3, [pc, #788]	; (8003c30 <UART_SetConfig+0x384>)
 800391c:	429a      	cmp	r2, r3
 800391e:	d004      	beq.n	800392a <UART_SetConfig+0x7e>
 8003920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4bc3      	ldr	r3, [pc, #780]	; (8003c34 <UART_SetConfig+0x388>)
 8003926:	429a      	cmp	r2, r3
 8003928:	d103      	bne.n	8003932 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800392a:	f7ff fb63 	bl	8002ff4 <HAL_RCC_GetPCLK2Freq>
 800392e:	6778      	str	r0, [r7, #116]	; 0x74
 8003930:	e002      	b.n	8003938 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003932:	f7ff fb4b 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 8003936:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003940:	f040 80b6 	bne.w	8003ab0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003946:	461c      	mov	r4, r3
 8003948:	f04f 0500 	mov.w	r5, #0
 800394c:	4622      	mov	r2, r4
 800394e:	462b      	mov	r3, r5
 8003950:	1891      	adds	r1, r2, r2
 8003952:	6439      	str	r1, [r7, #64]	; 0x40
 8003954:	415b      	adcs	r3, r3
 8003956:	647b      	str	r3, [r7, #68]	; 0x44
 8003958:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800395c:	1912      	adds	r2, r2, r4
 800395e:	eb45 0303 	adc.w	r3, r5, r3
 8003962:	f04f 0000 	mov.w	r0, #0
 8003966:	f04f 0100 	mov.w	r1, #0
 800396a:	00d9      	lsls	r1, r3, #3
 800396c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003970:	00d0      	lsls	r0, r2, #3
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	1911      	adds	r1, r2, r4
 8003978:	6639      	str	r1, [r7, #96]	; 0x60
 800397a:	416b      	adcs	r3, r5
 800397c:	667b      	str	r3, [r7, #100]	; 0x64
 800397e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	461a      	mov	r2, r3
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	1891      	adds	r1, r2, r2
 800398a:	63b9      	str	r1, [r7, #56]	; 0x38
 800398c:	415b      	adcs	r3, r3
 800398e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003990:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003994:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003998:	f7fc fc7a 	bl	8000290 <__aeabi_uldivmod>
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4ba5      	ldr	r3, [pc, #660]	; (8003c38 <UART_SetConfig+0x38c>)
 80039a2:	fba3 2302 	umull	r2, r3, r3, r2
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	011e      	lsls	r6, r3, #4
 80039aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ac:	461c      	mov	r4, r3
 80039ae:	f04f 0500 	mov.w	r5, #0
 80039b2:	4622      	mov	r2, r4
 80039b4:	462b      	mov	r3, r5
 80039b6:	1891      	adds	r1, r2, r2
 80039b8:	6339      	str	r1, [r7, #48]	; 0x30
 80039ba:	415b      	adcs	r3, r3
 80039bc:	637b      	str	r3, [r7, #52]	; 0x34
 80039be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80039c2:	1912      	adds	r2, r2, r4
 80039c4:	eb45 0303 	adc.w	r3, r5, r3
 80039c8:	f04f 0000 	mov.w	r0, #0
 80039cc:	f04f 0100 	mov.w	r1, #0
 80039d0:	00d9      	lsls	r1, r3, #3
 80039d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039d6:	00d0      	lsls	r0, r2, #3
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	1911      	adds	r1, r2, r4
 80039de:	65b9      	str	r1, [r7, #88]	; 0x58
 80039e0:	416b      	adcs	r3, r5
 80039e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	461a      	mov	r2, r3
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	1891      	adds	r1, r2, r2
 80039f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80039f2:	415b      	adcs	r3, r3
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80039fe:	f7fc fc47 	bl	8000290 <__aeabi_uldivmod>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4b8c      	ldr	r3, [pc, #560]	; (8003c38 <UART_SetConfig+0x38c>)
 8003a08:	fba3 1302 	umull	r1, r3, r3, r2
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	2164      	movs	r1, #100	; 0x64
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	3332      	adds	r3, #50	; 0x32
 8003a1a:	4a87      	ldr	r2, [pc, #540]	; (8003c38 <UART_SetConfig+0x38c>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a28:	441e      	add	r6, r3
 8003a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f04f 0100 	mov.w	r1, #0
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	1894      	adds	r4, r2, r2
 8003a38:	623c      	str	r4, [r7, #32]
 8003a3a:	415b      	adcs	r3, r3
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a42:	1812      	adds	r2, r2, r0
 8003a44:	eb41 0303 	adc.w	r3, r1, r3
 8003a48:	f04f 0400 	mov.w	r4, #0
 8003a4c:	f04f 0500 	mov.w	r5, #0
 8003a50:	00dd      	lsls	r5, r3, #3
 8003a52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a56:	00d4      	lsls	r4, r2, #3
 8003a58:	4622      	mov	r2, r4
 8003a5a:	462b      	mov	r3, r5
 8003a5c:	1814      	adds	r4, r2, r0
 8003a5e:	653c      	str	r4, [r7, #80]	; 0x50
 8003a60:	414b      	adcs	r3, r1
 8003a62:	657b      	str	r3, [r7, #84]	; 0x54
 8003a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	1891      	adds	r1, r2, r2
 8003a70:	61b9      	str	r1, [r7, #24]
 8003a72:	415b      	adcs	r3, r3
 8003a74:	61fb      	str	r3, [r7, #28]
 8003a76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003a7e:	f7fc fc07 	bl	8000290 <__aeabi_uldivmod>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4b6c      	ldr	r3, [pc, #432]	; (8003c38 <UART_SetConfig+0x38c>)
 8003a88:	fba3 1302 	umull	r1, r3, r3, r2
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	2164      	movs	r1, #100	; 0x64
 8003a90:	fb01 f303 	mul.w	r3, r1, r3
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	3332      	adds	r3, #50	; 0x32
 8003a9a:	4a67      	ldr	r2, [pc, #412]	; (8003c38 <UART_SetConfig+0x38c>)
 8003a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	f003 0207 	and.w	r2, r3, #7
 8003aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4432      	add	r2, r6
 8003aac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003aae:	e0b9      	b.n	8003c24 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab2:	461c      	mov	r4, r3
 8003ab4:	f04f 0500 	mov.w	r5, #0
 8003ab8:	4622      	mov	r2, r4
 8003aba:	462b      	mov	r3, r5
 8003abc:	1891      	adds	r1, r2, r2
 8003abe:	6139      	str	r1, [r7, #16]
 8003ac0:	415b      	adcs	r3, r3
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ac8:	1912      	adds	r2, r2, r4
 8003aca:	eb45 0303 	adc.w	r3, r5, r3
 8003ace:	f04f 0000 	mov.w	r0, #0
 8003ad2:	f04f 0100 	mov.w	r1, #0
 8003ad6:	00d9      	lsls	r1, r3, #3
 8003ad8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003adc:	00d0      	lsls	r0, r2, #3
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	eb12 0804 	adds.w	r8, r2, r4
 8003ae6:	eb43 0905 	adc.w	r9, r3, r5
 8003aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f04f 0100 	mov.w	r1, #0
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	008b      	lsls	r3, r1, #2
 8003afe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b02:	0082      	lsls	r2, r0, #2
 8003b04:	4640      	mov	r0, r8
 8003b06:	4649      	mov	r1, r9
 8003b08:	f7fc fbc2 	bl	8000290 <__aeabi_uldivmod>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4b49      	ldr	r3, [pc, #292]	; (8003c38 <UART_SetConfig+0x38c>)
 8003b12:	fba3 2302 	umull	r2, r3, r3, r2
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	011e      	lsls	r6, r3, #4
 8003b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f04f 0100 	mov.w	r1, #0
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	1894      	adds	r4, r2, r2
 8003b28:	60bc      	str	r4, [r7, #8]
 8003b2a:	415b      	adcs	r3, r3
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b32:	1812      	adds	r2, r2, r0
 8003b34:	eb41 0303 	adc.w	r3, r1, r3
 8003b38:	f04f 0400 	mov.w	r4, #0
 8003b3c:	f04f 0500 	mov.w	r5, #0
 8003b40:	00dd      	lsls	r5, r3, #3
 8003b42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b46:	00d4      	lsls	r4, r2, #3
 8003b48:	4622      	mov	r2, r4
 8003b4a:	462b      	mov	r3, r5
 8003b4c:	1814      	adds	r4, r2, r0
 8003b4e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003b50:	414b      	adcs	r3, r1
 8003b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f04f 0100 	mov.w	r1, #0
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	008b      	lsls	r3, r1, #2
 8003b68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b6c:	0082      	lsls	r2, r0, #2
 8003b6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003b72:	f7fc fb8d 	bl	8000290 <__aeabi_uldivmod>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4b2f      	ldr	r3, [pc, #188]	; (8003c38 <UART_SetConfig+0x38c>)
 8003b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	2164      	movs	r1, #100	; 0x64
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	3332      	adds	r3, #50	; 0x32
 8003b8e:	4a2a      	ldr	r2, [pc, #168]	; (8003c38 <UART_SetConfig+0x38c>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b9a:	441e      	add	r6, r3
 8003b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f04f 0100 	mov.w	r1, #0
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	1894      	adds	r4, r2, r2
 8003baa:	603c      	str	r4, [r7, #0]
 8003bac:	415b      	adcs	r3, r3
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bb4:	1812      	adds	r2, r2, r0
 8003bb6:	eb41 0303 	adc.w	r3, r1, r3
 8003bba:	f04f 0400 	mov.w	r4, #0
 8003bbe:	f04f 0500 	mov.w	r5, #0
 8003bc2:	00dd      	lsls	r5, r3, #3
 8003bc4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bc8:	00d4      	lsls	r4, r2, #3
 8003bca:	4622      	mov	r2, r4
 8003bcc:	462b      	mov	r3, r5
 8003bce:	eb12 0a00 	adds.w	sl, r2, r0
 8003bd2:	eb43 0b01 	adc.w	fp, r3, r1
 8003bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f04f 0100 	mov.w	r1, #0
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	008b      	lsls	r3, r1, #2
 8003bea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bee:	0082      	lsls	r2, r0, #2
 8003bf0:	4650      	mov	r0, sl
 8003bf2:	4659      	mov	r1, fp
 8003bf4:	f7fc fb4c 	bl	8000290 <__aeabi_uldivmod>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <UART_SetConfig+0x38c>)
 8003bfe:	fba3 1302 	umull	r1, r3, r3, r2
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	2164      	movs	r1, #100	; 0x64
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	3332      	adds	r3, #50	; 0x32
 8003c10:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <UART_SetConfig+0x38c>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	f003 020f 	and.w	r2, r3, #15
 8003c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4432      	add	r2, r6
 8003c22:	609a      	str	r2, [r3, #8]
}
 8003c24:	bf00      	nop
 8003c26:	377c      	adds	r7, #124	; 0x7c
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c2e:	bf00      	nop
 8003c30:	40011000 	.word	0x40011000
 8003c34:	40011400 	.word	0x40011400
 8003c38:	51eb851f 	.word	0x51eb851f

08003c3c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c4e:	2b84      	cmp	r3, #132	; 0x84
 8003c50:	d005      	beq.n	8003c5e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	3303      	adds	r3, #3
 8003c5c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c70:	f000 fee0 	bl	8004a34 <vTaskStartScheduler>
  
  return osOK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c7c:	b089      	sub	sp, #36	; 0x24
 8003c7e:	af04      	add	r7, sp, #16
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d020      	beq.n	8003cce <osThreadCreate+0x54>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01c      	beq.n	8003cce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685c      	ldr	r4, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681d      	ldr	r5, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691e      	ldr	r6, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff ffc8 	bl	8003c3c <makeFreeRtosPriority>
 8003cac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cb6:	9202      	str	r2, [sp, #8]
 8003cb8:	9301      	str	r3, [sp, #4]
 8003cba:	9100      	str	r1, [sp, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	4632      	mov	r2, r6
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f000 fcee 	bl	80046a4 <xTaskCreateStatic>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	e01c      	b.n	8003d08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685c      	ldr	r4, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cda:	b29e      	uxth	r6, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff ffaa 	bl	8003c3c <makeFreeRtosPriority>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	f107 030c 	add.w	r3, r7, #12
 8003cee:	9301      	str	r3, [sp, #4]
 8003cf0:	9200      	str	r2, [sp, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	4632      	mov	r2, r6
 8003cf6:	4629      	mov	r1, r5
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f000 fd30 	bl	800475e <xTaskCreate>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d001      	beq.n	8003d08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e000      	b.n	8003d0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d08:	68fb      	ldr	r3, [r7, #12]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <osDelay+0x16>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	e000      	b.n	8003d2a <osDelay+0x18>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fe4e 	bl	80049cc <vTaskDelay>
  
  return osOK;
 8003d30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f103 0208 	add.w	r2, r3, #8
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d52:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f103 0208 	add.w	r2, r3, #8
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f103 0208 	add.w	r2, r3, #8
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	601a      	str	r2, [r3, #0]
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d103      	bne.n	8003dfc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e00c      	b.n	8003e16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3308      	adds	r3, #8
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	e002      	b.n	8003e0a <vListInsert+0x2e>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d2f6      	bcs.n	8003e04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6892      	ldr	r2, [r2, #8]
 8003e64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6852      	ldr	r2, [r2, #4]
 8003e6e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d103      	bne.n	8003e82 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	1e5a      	subs	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003eca:	bf00      	nop
 8003ecc:	e7fe      	b.n	8003ecc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ece:	f001 fd01 	bl	80058d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	68f9      	ldr	r1, [r7, #12]
 8003edc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	441a      	add	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efe:	3b01      	subs	r3, #1
 8003f00:	68f9      	ldr	r1, [r7, #12]
 8003f02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f04:	fb01 f303 	mul.w	r3, r1, r3
 8003f08:	441a      	add	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	22ff      	movs	r2, #255	; 0xff
 8003f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	22ff      	movs	r2, #255	; 0xff
 8003f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d114      	bne.n	8003f4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01a      	beq.n	8003f62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3310      	adds	r3, #16
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 ffc1 	bl	8004eb8 <xTaskRemoveFromEventList>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d012      	beq.n	8003f62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <xQueueGenericReset+0xcc>)
 8003f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	e009      	b.n	8003f62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3310      	adds	r3, #16
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fef1 	bl	8003d3a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3324      	adds	r3, #36	; 0x24
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff feec 	bl	8003d3a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f62:	f001 fce7 	bl	8005934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f66:	2301      	movs	r3, #1
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08a      	sub	sp, #40	; 0x28
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	613b      	str	r3, [r7, #16]
}
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	3348      	adds	r3, #72	; 0x48
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 fd73 	bl	8005a98 <pvPortMalloc>
 8003fb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d011      	beq.n	8003fde <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	3348      	adds	r3, #72	; 0x48
 8003fc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fcc:	79fa      	ldrb	r2, [r7, #7]
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f805 	bl	8003fe8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fde:	69bb      	ldr	r3, [r7, #24]
	}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3720      	adds	r7, #32
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d103      	bne.n	8004004 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e002      	b.n	800400a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004016:	2101      	movs	r1, #1
 8004018:	69b8      	ldr	r0, [r7, #24]
 800401a:	f7ff ff43 	bl	8003ea4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00e      	beq.n	8004052 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004046:	2300      	movs	r3, #0
 8004048:	2200      	movs	r2, #0
 800404a:	2100      	movs	r1, #0
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f81d 	bl	800408c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800405a:	b580      	push	{r7, lr}
 800405c:	b086      	sub	sp, #24
 800405e:	af00      	add	r7, sp, #0
 8004060:	4603      	mov	r3, r0
 8004062:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004064:	2301      	movs	r3, #1
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	2300      	movs	r3, #0
 800406a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	461a      	mov	r2, r3
 8004070:	6939      	ldr	r1, [r7, #16]
 8004072:	6978      	ldr	r0, [r7, #20]
 8004074:	f7ff ff7e 	bl	8003f74 <xQueueGenericCreate>
 8004078:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7ff ffd3 	bl	8004026 <prvInitialiseMutex>

		return xNewQueue;
 8004080:	68fb      	ldr	r3, [r7, #12]
	}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08e      	sub	sp, #56	; 0x38
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800409a:	2300      	movs	r3, #0
 800409c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <xQueueGenericSend+0x32>
	__asm volatile
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040ba:	bf00      	nop
 80040bc:	e7fe      	b.n	80040bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d103      	bne.n	80040cc <xQueueGenericSend+0x40>
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <xQueueGenericSend+0x44>
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <xQueueGenericSend+0x46>
 80040d0:	2300      	movs	r3, #0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <xQueueGenericSend+0x60>
	__asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040e8:	bf00      	nop
 80040ea:	e7fe      	b.n	80040ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d103      	bne.n	80040fa <xQueueGenericSend+0x6e>
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <xQueueGenericSend+0x72>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <xQueueGenericSend+0x74>
 80040fe:	2300      	movs	r3, #0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10a      	bne.n	800411a <xQueueGenericSend+0x8e>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	623b      	str	r3, [r7, #32]
}
 8004116:	bf00      	nop
 8004118:	e7fe      	b.n	8004118 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800411a:	f001 f889 	bl	8005230 <xTaskGetSchedulerState>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d102      	bne.n	800412a <xQueueGenericSend+0x9e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <xQueueGenericSend+0xa2>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <xQueueGenericSend+0xa4>
 800412e:	2300      	movs	r3, #0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <xQueueGenericSend+0xbe>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	61fb      	str	r3, [r7, #28]
}
 8004146:	bf00      	nop
 8004148:	e7fe      	b.n	8004148 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800414a:	f001 fbc3 	bl	80058d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004156:	429a      	cmp	r2, r3
 8004158:	d302      	bcc.n	8004160 <xQueueGenericSend+0xd4>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b02      	cmp	r3, #2
 800415e:	d129      	bne.n	80041b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004166:	f000 f9b3 	bl	80044d0 <prvCopyDataToQueue>
 800416a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	2b00      	cmp	r3, #0
 8004172:	d010      	beq.n	8004196 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	3324      	adds	r3, #36	; 0x24
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fe9d 	bl	8004eb8 <xTaskRemoveFromEventList>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d013      	beq.n	80041ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004184:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <xQueueGenericSend+0x1f8>)
 8004186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	e00a      	b.n	80041ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800419c:	4b39      	ldr	r3, [pc, #228]	; (8004284 <xQueueGenericSend+0x1f8>)
 800419e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041ac:	f001 fbc2 	bl	8005934 <vPortExitCritical>
				return pdPASS;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e063      	b.n	800427c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d103      	bne.n	80041c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041ba:	f001 fbbb 	bl	8005934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	e05c      	b.n	800427c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041c8:	f107 0314 	add.w	r3, r7, #20
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fed5 	bl	8004f7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041d2:	2301      	movs	r3, #1
 80041d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041d6:	f001 fbad 	bl	8005934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041da:	f000 fc8b 	bl	8004af4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041de:	f001 fb79 	bl	80058d4 <vPortEnterCritical>
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041e8:	b25b      	sxtb	r3, r3
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d103      	bne.n	80041f8 <xQueueGenericSend+0x16c>
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041fe:	b25b      	sxtb	r3, r3
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d103      	bne.n	800420e <xQueueGenericSend+0x182>
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800420e:	f001 fb91 	bl	8005934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004212:	1d3a      	adds	r2, r7, #4
 8004214:	f107 0314 	add.w	r3, r7, #20
 8004218:	4611      	mov	r1, r2
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fec4 	bl	8004fa8 <xTaskCheckForTimeOut>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d124      	bne.n	8004270 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004226:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004228:	f000 fa24 	bl	8004674 <prvIsQueueFull>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d018      	beq.n	8004264 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	3310      	adds	r3, #16
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	4611      	mov	r1, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fe18 	bl	8004e70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004242:	f000 f9af 	bl	80045a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004246:	f000 fc63 	bl	8004b10 <xTaskResumeAll>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	f47f af7c 	bne.w	800414a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004252:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <xQueueGenericSend+0x1f8>)
 8004254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	e772      	b.n	800414a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004266:	f000 f99d 	bl	80045a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800426a:	f000 fc51 	bl	8004b10 <xTaskResumeAll>
 800426e:	e76c      	b.n	800414a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004272:	f000 f997 	bl	80045a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004276:	f000 fc4b 	bl	8004b10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800427a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800427c:	4618      	mov	r0, r3
 800427e:	3738      	adds	r7, #56	; 0x38
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	e000ed04 	.word	0xe000ed04

08004288 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08e      	sub	sp, #56	; 0x38
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004292:	2300      	movs	r3, #0
 8004294:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800429a:	2300      	movs	r3, #0
 800429c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <xQueueSemaphoreTake+0x32>
	__asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	623b      	str	r3, [r7, #32]
}
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	61fb      	str	r3, [r7, #28]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042d8:	f000 ffaa 	bl	8005230 <xTaskGetSchedulerState>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d102      	bne.n	80042e8 <xQueueSemaphoreTake+0x60>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <xQueueSemaphoreTake+0x64>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <xQueueSemaphoreTake+0x66>
 80042ec:	2300      	movs	r3, #0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	61bb      	str	r3, [r7, #24]
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004308:	f001 fae4 	bl	80058d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	2b00      	cmp	r3, #0
 8004316:	d024      	beq.n	8004362 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	1e5a      	subs	r2, r3, #1
 800431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d104      	bne.n	8004332 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004328:	f001 f92a 	bl	8005580 <pvTaskIncrementMutexHeldCount>
 800432c:	4602      	mov	r2, r0
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00f      	beq.n	800435a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433c:	3310      	adds	r3, #16
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fdba 	bl	8004eb8 <xTaskRemoveFromEventList>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d007      	beq.n	800435a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800434a:	4b54      	ldr	r3, [pc, #336]	; (800449c <xQueueSemaphoreTake+0x214>)
 800434c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800435a:	f001 faeb 	bl	8005934 <vPortExitCritical>
				return pdPASS;
 800435e:	2301      	movs	r3, #1
 8004360:	e097      	b.n	8004492 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d111      	bne.n	800438c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	617b      	str	r3, [r7, #20]
}
 8004380:	bf00      	nop
 8004382:	e7fe      	b.n	8004382 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004384:	f001 fad6 	bl	8005934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004388:	2300      	movs	r3, #0
 800438a:	e082      	b.n	8004492 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800438c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004392:	f107 030c 	add.w	r3, r7, #12
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fdf0 	bl	8004f7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800439c:	2301      	movs	r3, #1
 800439e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043a0:	f001 fac8 	bl	8005934 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043a4:	f000 fba6 	bl	8004af4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043a8:	f001 fa94 	bl	80058d4 <vPortEnterCritical>
 80043ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043b2:	b25b      	sxtb	r3, r3
 80043b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b8:	d103      	bne.n	80043c2 <xQueueSemaphoreTake+0x13a>
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043c8:	b25b      	sxtb	r3, r3
 80043ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ce:	d103      	bne.n	80043d8 <xQueueSemaphoreTake+0x150>
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043d8:	f001 faac 	bl	8005934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043dc:	463a      	mov	r2, r7
 80043de:	f107 030c 	add.w	r3, r7, #12
 80043e2:	4611      	mov	r1, r2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fddf 	bl	8004fa8 <xTaskCheckForTimeOut>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d132      	bne.n	8004456 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043f2:	f000 f929 	bl	8004648 <prvIsQueueEmpty>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d026      	beq.n	800444a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d109      	bne.n	8004418 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004404:	f001 fa66 	bl	80058d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4618      	mov	r0, r3
 800440e:	f000 ff2d 	bl	800526c <xTaskPriorityInherit>
 8004412:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004414:	f001 fa8e 	bl	8005934 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	3324      	adds	r3, #36	; 0x24
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fd25 	bl	8004e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004426:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004428:	f000 f8bc 	bl	80045a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800442c:	f000 fb70 	bl	8004b10 <xTaskResumeAll>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	f47f af68 	bne.w	8004308 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004438:	4b18      	ldr	r3, [pc, #96]	; (800449c <xQueueSemaphoreTake+0x214>)
 800443a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	e75e      	b.n	8004308 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800444a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800444c:	f000 f8aa 	bl	80045a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004450:	f000 fb5e 	bl	8004b10 <xTaskResumeAll>
 8004454:	e758      	b.n	8004308 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004458:	f000 f8a4 	bl	80045a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800445c:	f000 fb58 	bl	8004b10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004462:	f000 f8f1 	bl	8004648 <prvIsQueueEmpty>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	f43f af4d 	beq.w	8004308 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00d      	beq.n	8004490 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004474:	f001 fa2e 	bl	80058d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800447a:	f000 f811 	bl	80044a0 <prvGetDisinheritPriorityAfterTimeout>
 800447e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004486:	4618      	mov	r0, r3
 8004488:	f000 ffec 	bl	8005464 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800448c:	f001 fa52 	bl	8005934 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004490:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004492:	4618      	mov	r0, r3
 8004494:	3738      	adds	r7, #56	; 0x38
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	e000ed04 	.word	0xe000ed04

080044a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d006      	beq.n	80044be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f1c3 0307 	rsb	r3, r3, #7
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	e001      	b.n	80044c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80044c2:	68fb      	ldr	r3, [r7, #12]
	}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d14d      	bne.n	8004592 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 ff2c 	bl	8005358 <xTaskPriorityDisinherit>
 8004500:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	e043      	b.n	8004592 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d119      	bne.n	8004544 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6858      	ldr	r0, [r3, #4]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	461a      	mov	r2, r3
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	f001 feae 	bl	800627c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	441a      	add	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	429a      	cmp	r2, r3
 8004538:	d32b      	bcc.n	8004592 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	e026      	b.n	8004592 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68d8      	ldr	r0, [r3, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	461a      	mov	r2, r3
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	f001 fe94 	bl	800627c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	425b      	negs	r3, r3
 800455e:	441a      	add	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d207      	bcs.n	8004580 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	425b      	negs	r3, r3
 800457a:	441a      	add	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d105      	bne.n	8004592 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	3b01      	subs	r3, #1
 8004590:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800459a:	697b      	ldr	r3, [r7, #20]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045ac:	f001 f992 	bl	80058d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045b8:	e011      	b.n	80045de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d012      	beq.n	80045e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3324      	adds	r3, #36	; 0x24
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fc76 	bl	8004eb8 <xTaskRemoveFromEventList>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80045d2:	f000 fd4b 	bl	800506c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	3b01      	subs	r3, #1
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	dce9      	bgt.n	80045ba <prvUnlockQueue+0x16>
 80045e6:	e000      	b.n	80045ea <prvUnlockQueue+0x46>
					break;
 80045e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	22ff      	movs	r2, #255	; 0xff
 80045ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80045f2:	f001 f99f 	bl	8005934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80045f6:	f001 f96d 	bl	80058d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004600:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004602:	e011      	b.n	8004628 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d012      	beq.n	8004632 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3310      	adds	r3, #16
 8004610:	4618      	mov	r0, r3
 8004612:	f000 fc51 	bl	8004eb8 <xTaskRemoveFromEventList>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800461c:	f000 fd26 	bl	800506c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004620:	7bbb      	ldrb	r3, [r7, #14]
 8004622:	3b01      	subs	r3, #1
 8004624:	b2db      	uxtb	r3, r3
 8004626:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004628:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800462c:	2b00      	cmp	r3, #0
 800462e:	dce9      	bgt.n	8004604 <prvUnlockQueue+0x60>
 8004630:	e000      	b.n	8004634 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004632:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	22ff      	movs	r2, #255	; 0xff
 8004638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800463c:	f001 f97a 	bl	8005934 <vPortExitCritical>
}
 8004640:	bf00      	nop
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004650:	f001 f940 	bl	80058d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	2b00      	cmp	r3, #0
 800465a:	d102      	bne.n	8004662 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800465c:	2301      	movs	r3, #1
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	e001      	b.n	8004666 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004666:	f001 f965 	bl	8005934 <vPortExitCritical>

	return xReturn;
 800466a:	68fb      	ldr	r3, [r7, #12]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800467c:	f001 f92a 	bl	80058d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004688:	429a      	cmp	r2, r3
 800468a:	d102      	bne.n	8004692 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800468c:	2301      	movs	r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	e001      	b.n	8004696 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004696:	f001 f94d 	bl	8005934 <vPortExitCritical>

	return xReturn;
 800469a:	68fb      	ldr	r3, [r7, #12]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08e      	sub	sp, #56	; 0x38
 80046a8:	af04      	add	r7, sp, #16
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	623b      	str	r3, [r7, #32]
}
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10a      	bne.n	80046ea <xTaskCreateStatic+0x46>
	__asm volatile
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	61fb      	str	r3, [r7, #28]
}
 80046e6:	bf00      	nop
 80046e8:	e7fe      	b.n	80046e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80046ea:	2354      	movs	r3, #84	; 0x54
 80046ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b54      	cmp	r3, #84	; 0x54
 80046f2:	d00a      	beq.n	800470a <xTaskCreateStatic+0x66>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	61bb      	str	r3, [r7, #24]
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800470a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800470c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01e      	beq.n	8004750 <xTaskCreateStatic+0xac>
 8004712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01b      	beq.n	8004750 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004720:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	2202      	movs	r2, #2
 8004726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800472a:	2300      	movs	r3, #0
 800472c:	9303      	str	r3, [sp, #12]
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	9302      	str	r3, [sp, #8]
 8004732:	f107 0314 	add.w	r3, r7, #20
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f850 	bl	80047e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800474a:	f000 f8d5 	bl	80048f8 <prvAddNewTaskToReadyList>
 800474e:	e001      	b.n	8004754 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004754:	697b      	ldr	r3, [r7, #20]
	}
 8004756:	4618      	mov	r0, r3
 8004758:	3728      	adds	r7, #40	; 0x28
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800475e:	b580      	push	{r7, lr}
 8004760:	b08c      	sub	sp, #48	; 0x30
 8004762:	af04      	add	r7, sp, #16
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	4613      	mov	r3, r2
 800476c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4618      	mov	r0, r3
 8004774:	f001 f990 	bl	8005a98 <pvPortMalloc>
 8004778:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00e      	beq.n	800479e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004780:	2054      	movs	r0, #84	; 0x54
 8004782:	f001 f989 	bl	8005a98 <pvPortMalloc>
 8004786:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
 8004794:	e005      	b.n	80047a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004796:	6978      	ldr	r0, [r7, #20]
 8004798:	f001 fa4a 	bl	8005c30 <vPortFree>
 800479c:	e001      	b.n	80047a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d017      	beq.n	80047d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047b0:	88fa      	ldrh	r2, [r7, #6]
 80047b2:	2300      	movs	r3, #0
 80047b4:	9303      	str	r3, [sp, #12]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	9302      	str	r3, [sp, #8]
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	9301      	str	r3, [sp, #4]
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f80e 	bl	80047e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047cc:	69f8      	ldr	r0, [r7, #28]
 80047ce:	f000 f893 	bl	80048f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047d2:	2301      	movs	r3, #1
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	e002      	b.n	80047de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047d8:	f04f 33ff 	mov.w	r3, #4294967295
 80047dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047de:	69bb      	ldr	r3, [r7, #24]
	}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004800:	3b01      	subs	r3, #1
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f023 0307 	bic.w	r3, r3, #7
 800480e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <prvInitialiseNewTask+0x48>
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	617b      	str	r3, [r7, #20]
}
 800482c:	bf00      	nop
 800482e:	e7fe      	b.n	800482e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01f      	beq.n	8004876 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
 800483a:	e012      	b.n	8004862 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	4413      	add	r3, r2
 8004842:	7819      	ldrb	r1, [r3, #0]
 8004844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	4413      	add	r3, r2
 800484a:	3334      	adds	r3, #52	; 0x34
 800484c:	460a      	mov	r2, r1
 800484e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	4413      	add	r3, r2
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d006      	beq.n	800486a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	3301      	adds	r3, #1
 8004860:	61fb      	str	r3, [r7, #28]
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	2b0f      	cmp	r3, #15
 8004866:	d9e9      	bls.n	800483c <prvInitialiseNewTask+0x54>
 8004868:	e000      	b.n	800486c <prvInitialiseNewTask+0x84>
			{
				break;
 800486a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004874:	e003      	b.n	800487e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	2b06      	cmp	r3, #6
 8004882:	d901      	bls.n	8004888 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004884:	2306      	movs	r3, #6
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800488c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004892:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	2200      	movs	r2, #0
 8004898:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	3304      	adds	r3, #4
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fa6b 	bl	8003d7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	3318      	adds	r3, #24
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff fa66 	bl	8003d7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	f1c3 0207 	rsb	r2, r3, #7
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	2200      	movs	r2, #0
 80048c8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	68f9      	ldr	r1, [r7, #12]
 80048d6:	69b8      	ldr	r0, [r7, #24]
 80048d8:	f000 fecc 	bl	8005674 <pxPortInitialiseStack>
 80048dc:	4602      	mov	r2, r0
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ee:	bf00      	nop
 80048f0:	3720      	adds	r7, #32
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004900:	f000 ffe8 	bl	80058d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004904:	4b2a      	ldr	r3, [pc, #168]	; (80049b0 <prvAddNewTaskToReadyList+0xb8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3301      	adds	r3, #1
 800490a:	4a29      	ldr	r2, [pc, #164]	; (80049b0 <prvAddNewTaskToReadyList+0xb8>)
 800490c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800490e:	4b29      	ldr	r3, [pc, #164]	; (80049b4 <prvAddNewTaskToReadyList+0xbc>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d109      	bne.n	800492a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004916:	4a27      	ldr	r2, [pc, #156]	; (80049b4 <prvAddNewTaskToReadyList+0xbc>)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800491c:	4b24      	ldr	r3, [pc, #144]	; (80049b0 <prvAddNewTaskToReadyList+0xb8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d110      	bne.n	8004946 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004924:	f000 fbc6 	bl	80050b4 <prvInitialiseTaskLists>
 8004928:	e00d      	b.n	8004946 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800492a:	4b23      	ldr	r3, [pc, #140]	; (80049b8 <prvAddNewTaskToReadyList+0xc0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004932:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <prvAddNewTaskToReadyList+0xbc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	429a      	cmp	r2, r3
 800493e:	d802      	bhi.n	8004946 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004940:	4a1c      	ldr	r2, [pc, #112]	; (80049b4 <prvAddNewTaskToReadyList+0xbc>)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004946:	4b1d      	ldr	r3, [pc, #116]	; (80049bc <prvAddNewTaskToReadyList+0xc4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3301      	adds	r3, #1
 800494c:	4a1b      	ldr	r2, [pc, #108]	; (80049bc <prvAddNewTaskToReadyList+0xc4>)
 800494e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	2201      	movs	r2, #1
 8004956:	409a      	lsls	r2, r3
 8004958:	4b19      	ldr	r3, [pc, #100]	; (80049c0 <prvAddNewTaskToReadyList+0xc8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4313      	orrs	r3, r2
 800495e:	4a18      	ldr	r2, [pc, #96]	; (80049c0 <prvAddNewTaskToReadyList+0xc8>)
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4a15      	ldr	r2, [pc, #84]	; (80049c4 <prvAddNewTaskToReadyList+0xcc>)
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3304      	adds	r3, #4
 8004976:	4619      	mov	r1, r3
 8004978:	4610      	mov	r0, r2
 800497a:	f7ff fa0b 	bl	8003d94 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800497e:	f000 ffd9 	bl	8005934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004982:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <prvAddNewTaskToReadyList+0xc0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00e      	beq.n	80049a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800498a:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <prvAddNewTaskToReadyList+0xbc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	429a      	cmp	r2, r3
 8004996:	d207      	bcs.n	80049a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <prvAddNewTaskToReadyList+0xd0>)
 800499a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049a8:	bf00      	nop
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	200003e8 	.word	0x200003e8
 80049b4:	200002e8 	.word	0x200002e8
 80049b8:	200003f4 	.word	0x200003f4
 80049bc:	20000404 	.word	0x20000404
 80049c0:	200003f0 	.word	0x200003f0
 80049c4:	200002ec 	.word	0x200002ec
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d017      	beq.n	8004a0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80049de:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <vTaskDelay+0x60>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <vTaskDelay+0x30>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	60bb      	str	r3, [r7, #8]
}
 80049f8:	bf00      	nop
 80049fa:	e7fe      	b.n	80049fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80049fc:	f000 f87a 	bl	8004af4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a00:	2100      	movs	r1, #0
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fdd0 	bl	80055a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a08:	f000 f882 	bl	8004b10 <xTaskResumeAll>
 8004a0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d107      	bne.n	8004a24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004a14:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <vTaskDelay+0x64>)
 8004a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a24:	bf00      	nop
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000410 	.word	0x20000410
 8004a30:	e000ed04 	.word	0xe000ed04

08004a34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08a      	sub	sp, #40	; 0x28
 8004a38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a42:	463a      	mov	r2, r7
 8004a44:	1d39      	adds	r1, r7, #4
 8004a46:	f107 0308 	add.w	r3, r7, #8
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fb fd9c 	bl	8000588 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a50:	6839      	ldr	r1, [r7, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	9202      	str	r2, [sp, #8]
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	460a      	mov	r2, r1
 8004a62:	491e      	ldr	r1, [pc, #120]	; (8004adc <vTaskStartScheduler+0xa8>)
 8004a64:	481e      	ldr	r0, [pc, #120]	; (8004ae0 <vTaskStartScheduler+0xac>)
 8004a66:	f7ff fe1d 	bl	80046a4 <xTaskCreateStatic>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ae4 <vTaskStartScheduler+0xb0>)
 8004a6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a70:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <vTaskStartScheduler+0xb0>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	e001      	b.n	8004a82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d116      	bne.n	8004ab6 <vTaskStartScheduler+0x82>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	613b      	str	r3, [r7, #16]
}
 8004a9a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a9c:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <vTaskStartScheduler+0xb4>)
 8004a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004aa4:	4b11      	ldr	r3, [pc, #68]	; (8004aec <vTaskStartScheduler+0xb8>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004aaa:	4b11      	ldr	r3, [pc, #68]	; (8004af0 <vTaskStartScheduler+0xbc>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ab0:	f000 fe6e 	bl	8005790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ab4:	e00e      	b.n	8004ad4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abc:	d10a      	bne.n	8004ad4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	60fb      	str	r3, [r7, #12]
}
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <vTaskStartScheduler+0x9e>
}
 8004ad4:	bf00      	nop
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	080073a0 	.word	0x080073a0
 8004ae0:	08005085 	.word	0x08005085
 8004ae4:	2000040c 	.word	0x2000040c
 8004ae8:	20000408 	.word	0x20000408
 8004aec:	200003f4 	.word	0x200003f4
 8004af0:	200003ec 	.word	0x200003ec

08004af4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004af8:	4b04      	ldr	r3, [pc, #16]	; (8004b0c <vTaskSuspendAll+0x18>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3301      	adds	r3, #1
 8004afe:	4a03      	ldr	r2, [pc, #12]	; (8004b0c <vTaskSuspendAll+0x18>)
 8004b00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b02:	bf00      	nop
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	20000410 	.word	0x20000410

08004b10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b1e:	4b41      	ldr	r3, [pc, #260]	; (8004c24 <xTaskResumeAll+0x114>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <xTaskResumeAll+0x2c>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	603b      	str	r3, [r7, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	e7fe      	b.n	8004b3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b3c:	f000 feca 	bl	80058d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b40:	4b38      	ldr	r3, [pc, #224]	; (8004c24 <xTaskResumeAll+0x114>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	4a37      	ldr	r2, [pc, #220]	; (8004c24 <xTaskResumeAll+0x114>)
 8004b48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b4a:	4b36      	ldr	r3, [pc, #216]	; (8004c24 <xTaskResumeAll+0x114>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d161      	bne.n	8004c16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b52:	4b35      	ldr	r3, [pc, #212]	; (8004c28 <xTaskResumeAll+0x118>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d05d      	beq.n	8004c16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b5a:	e02e      	b.n	8004bba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b5c:	4b33      	ldr	r3, [pc, #204]	; (8004c2c <xTaskResumeAll+0x11c>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3318      	adds	r3, #24
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff f970 	bl	8003e4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3304      	adds	r3, #4
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff f96b 	bl	8003e4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	4b2b      	ldr	r3, [pc, #172]	; (8004c30 <xTaskResumeAll+0x120>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	4a2a      	ldr	r2, [pc, #168]	; (8004c30 <xTaskResumeAll+0x120>)
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4a27      	ldr	r2, [pc, #156]	; (8004c34 <xTaskResumeAll+0x124>)
 8004b98:	441a      	add	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f7ff f8f7 	bl	8003d94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004baa:	4b23      	ldr	r3, [pc, #140]	; (8004c38 <xTaskResumeAll+0x128>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d302      	bcc.n	8004bba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004bb4:	4b21      	ldr	r3, [pc, #132]	; (8004c3c <xTaskResumeAll+0x12c>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bba:	4b1c      	ldr	r3, [pc, #112]	; (8004c2c <xTaskResumeAll+0x11c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1cc      	bne.n	8004b5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004bc8:	f000 fb12 	bl	80051f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004bcc:	4b1c      	ldr	r3, [pc, #112]	; (8004c40 <xTaskResumeAll+0x130>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d010      	beq.n	8004bfa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004bd8:	f000 f836 	bl	8004c48 <xTaskIncrementTick>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004be2:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <xTaskResumeAll+0x12c>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1f1      	bne.n	8004bd8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004bf4:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <xTaskResumeAll+0x130>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004bfa:	4b10      	ldr	r3, [pc, #64]	; (8004c3c <xTaskResumeAll+0x12c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d009      	beq.n	8004c16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c02:	2301      	movs	r3, #1
 8004c04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c06:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <xTaskResumeAll+0x134>)
 8004c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c16:	f000 fe8d 	bl	8005934 <vPortExitCritical>

	return xAlreadyYielded;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	20000410 	.word	0x20000410
 8004c28:	200003e8 	.word	0x200003e8
 8004c2c:	200003a8 	.word	0x200003a8
 8004c30:	200003f0 	.word	0x200003f0
 8004c34:	200002ec 	.word	0x200002ec
 8004c38:	200002e8 	.word	0x200002e8
 8004c3c:	200003fc 	.word	0x200003fc
 8004c40:	200003f8 	.word	0x200003f8
 8004c44:	e000ed04 	.word	0xe000ed04

08004c48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c52:	4b4e      	ldr	r3, [pc, #312]	; (8004d8c <xTaskIncrementTick+0x144>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f040 808e 	bne.w	8004d78 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c5c:	4b4c      	ldr	r3, [pc, #304]	; (8004d90 <xTaskIncrementTick+0x148>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3301      	adds	r3, #1
 8004c62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c64:	4a4a      	ldr	r2, [pc, #296]	; (8004d90 <xTaskIncrementTick+0x148>)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d120      	bne.n	8004cb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c70:	4b48      	ldr	r3, [pc, #288]	; (8004d94 <xTaskIncrementTick+0x14c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <xTaskIncrementTick+0x48>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	603b      	str	r3, [r7, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	e7fe      	b.n	8004c8e <xTaskIncrementTick+0x46>
 8004c90:	4b40      	ldr	r3, [pc, #256]	; (8004d94 <xTaskIncrementTick+0x14c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	4b40      	ldr	r3, [pc, #256]	; (8004d98 <xTaskIncrementTick+0x150>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a3e      	ldr	r2, [pc, #248]	; (8004d94 <xTaskIncrementTick+0x14c>)
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	4a3e      	ldr	r2, [pc, #248]	; (8004d98 <xTaskIncrementTick+0x150>)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	4b3d      	ldr	r3, [pc, #244]	; (8004d9c <xTaskIncrementTick+0x154>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	4a3c      	ldr	r2, [pc, #240]	; (8004d9c <xTaskIncrementTick+0x154>)
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	f000 fa9f 	bl	80051f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cb2:	4b3b      	ldr	r3, [pc, #236]	; (8004da0 <xTaskIncrementTick+0x158>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d348      	bcc.n	8004d4e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cbc:	4b35      	ldr	r3, [pc, #212]	; (8004d94 <xTaskIncrementTick+0x14c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d104      	bne.n	8004cd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cc6:	4b36      	ldr	r3, [pc, #216]	; (8004da0 <xTaskIncrementTick+0x158>)
 8004cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ccc:	601a      	str	r2, [r3, #0]
					break;
 8004cce:	e03e      	b.n	8004d4e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cd0:	4b30      	ldr	r3, [pc, #192]	; (8004d94 <xTaskIncrementTick+0x14c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d203      	bcs.n	8004cf0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ce8:	4a2d      	ldr	r2, [pc, #180]	; (8004da0 <xTaskIncrementTick+0x158>)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004cee:	e02e      	b.n	8004d4e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff f8aa 	bl	8003e4e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d004      	beq.n	8004d0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	3318      	adds	r3, #24
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff f8a1 	bl	8003e4e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	2201      	movs	r2, #1
 8004d12:	409a      	lsls	r2, r3
 8004d14:	4b23      	ldr	r3, [pc, #140]	; (8004da4 <xTaskIncrementTick+0x15c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	4a22      	ldr	r2, [pc, #136]	; (8004da4 <xTaskIncrementTick+0x15c>)
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4a1f      	ldr	r2, [pc, #124]	; (8004da8 <xTaskIncrementTick+0x160>)
 8004d2c:	441a      	add	r2, r3
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f7ff f82d 	bl	8003d94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3e:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <xTaskIncrementTick+0x164>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d3b9      	bcc.n	8004cbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d4c:	e7b6      	b.n	8004cbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d4e:	4b17      	ldr	r3, [pc, #92]	; (8004dac <xTaskIncrementTick+0x164>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d54:	4914      	ldr	r1, [pc, #80]	; (8004da8 <xTaskIncrementTick+0x160>)
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d901      	bls.n	8004d6a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004d66:	2301      	movs	r3, #1
 8004d68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d6a:	4b11      	ldr	r3, [pc, #68]	; (8004db0 <xTaskIncrementTick+0x168>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004d72:	2301      	movs	r3, #1
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	e004      	b.n	8004d82 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d78:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <xTaskIncrementTick+0x16c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	4a0d      	ldr	r2, [pc, #52]	; (8004db4 <xTaskIncrementTick+0x16c>)
 8004d80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d82:	697b      	ldr	r3, [r7, #20]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	20000410 	.word	0x20000410
 8004d90:	200003ec 	.word	0x200003ec
 8004d94:	200003a0 	.word	0x200003a0
 8004d98:	200003a4 	.word	0x200003a4
 8004d9c:	20000400 	.word	0x20000400
 8004da0:	20000408 	.word	0x20000408
 8004da4:	200003f0 	.word	0x200003f0
 8004da8:	200002ec 	.word	0x200002ec
 8004dac:	200002e8 	.word	0x200002e8
 8004db0:	200003fc 	.word	0x200003fc
 8004db4:	200003f8 	.word	0x200003f8

08004db8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004dbe:	4b27      	ldr	r3, [pc, #156]	; (8004e5c <vTaskSwitchContext+0xa4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004dc6:	4b26      	ldr	r3, [pc, #152]	; (8004e60 <vTaskSwitchContext+0xa8>)
 8004dc8:	2201      	movs	r2, #1
 8004dca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004dcc:	e03f      	b.n	8004e4e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004dce:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <vTaskSwitchContext+0xa8>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dd4:	4b23      	ldr	r3, [pc, #140]	; (8004e64 <vTaskSwitchContext+0xac>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	fab3 f383 	clz	r3, r3
 8004de0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004de2:	7afb      	ldrb	r3, [r7, #11]
 8004de4:	f1c3 031f 	rsb	r3, r3, #31
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	491f      	ldr	r1, [pc, #124]	; (8004e68 <vTaskSwitchContext+0xb0>)
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	607b      	str	r3, [r7, #4]
}
 8004e10:	bf00      	nop
 8004e12:	e7fe      	b.n	8004e12 <vTaskSwitchContext+0x5a>
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4a12      	ldr	r2, [pc, #72]	; (8004e68 <vTaskSwitchContext+0xb0>)
 8004e20:	4413      	add	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	605a      	str	r2, [r3, #4]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	3308      	adds	r3, #8
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d104      	bne.n	8004e44 <vTaskSwitchContext+0x8c>
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	605a      	str	r2, [r3, #4]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <vTaskSwitchContext+0xb4>)
 8004e4c:	6013      	str	r3, [r2, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000410 	.word	0x20000410
 8004e60:	200003fc 	.word	0x200003fc
 8004e64:	200003f0 	.word	0x200003f0
 8004e68:	200002ec 	.word	0x200002ec
 8004e6c:	200002e8 	.word	0x200002e8

08004e70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	60fb      	str	r3, [r7, #12]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e96:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <vTaskPlaceOnEventList+0x44>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3318      	adds	r3, #24
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fe ff9c 	bl	8003ddc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	6838      	ldr	r0, [r7, #0]
 8004ea8:	f000 fb7e 	bl	80055a8 <prvAddCurrentTaskToDelayedList>
}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	200002e8 	.word	0x200002e8

08004eb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10a      	bne.n	8004ee4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	60fb      	str	r3, [r7, #12]
}
 8004ee0:	bf00      	nop
 8004ee2:	e7fe      	b.n	8004ee2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	3318      	adds	r3, #24
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fe ffb0 	bl	8003e4e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eee:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <xTaskRemoveFromEventList+0xac>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d11c      	bne.n	8004f30 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fe ffa7 	bl	8003e4e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	2201      	movs	r2, #1
 8004f06:	409a      	lsls	r2, r3
 8004f08:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <xTaskRemoveFromEventList+0xb0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	4a16      	ldr	r2, [pc, #88]	; (8004f68 <xTaskRemoveFromEventList+0xb0>)
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4a13      	ldr	r2, [pc, #76]	; (8004f6c <xTaskRemoveFromEventList+0xb4>)
 8004f20:	441a      	add	r2, r3
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f7fe ff33 	bl	8003d94 <vListInsertEnd>
 8004f2e:	e005      	b.n	8004f3c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	3318      	adds	r3, #24
 8004f34:	4619      	mov	r1, r3
 8004f36:	480e      	ldr	r0, [pc, #56]	; (8004f70 <xTaskRemoveFromEventList+0xb8>)
 8004f38:	f7fe ff2c 	bl	8003d94 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <xTaskRemoveFromEventList+0xbc>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d905      	bls.n	8004f56 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <xTaskRemoveFromEventList+0xc0>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	e001      	b.n	8004f5a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f5a:	697b      	ldr	r3, [r7, #20]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000410 	.word	0x20000410
 8004f68:	200003f0 	.word	0x200003f0
 8004f6c:	200002ec 	.word	0x200002ec
 8004f70:	200003a8 	.word	0x200003a8
 8004f74:	200002e8 	.word	0x200002e8
 8004f78:	200003fc 	.word	0x200003fc

08004f7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f84:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <vTaskInternalSetTimeOutState+0x24>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <vTaskInternalSetTimeOutState+0x28>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	605a      	str	r2, [r3, #4]
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	20000400 	.word	0x20000400
 8004fa4:	200003ec 	.word	0x200003ec

08004fa8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	613b      	str	r3, [r7, #16]
}
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	60fb      	str	r3, [r7, #12]
}
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004fea:	f000 fc73 	bl	80058d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fee:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <xTaskCheckForTimeOut+0xbc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005006:	d102      	bne.n	800500e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005008:	2300      	movs	r3, #0
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	e023      	b.n	8005056 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b15      	ldr	r3, [pc, #84]	; (8005068 <xTaskCheckForTimeOut+0xc0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d007      	beq.n	800502a <xTaskCheckForTimeOut+0x82>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	429a      	cmp	r2, r3
 8005022:	d302      	bcc.n	800502a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005024:	2301      	movs	r3, #1
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	e015      	b.n	8005056 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	429a      	cmp	r2, r3
 8005032:	d20b      	bcs.n	800504c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	1ad2      	subs	r2, r2, r3
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff ff9b 	bl	8004f7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	e004      	b.n	8005056 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005052:	2301      	movs	r3, #1
 8005054:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005056:	f000 fc6d 	bl	8005934 <vPortExitCritical>

	return xReturn;
 800505a:	69fb      	ldr	r3, [r7, #28]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3720      	adds	r7, #32
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	200003ec 	.word	0x200003ec
 8005068:	20000400 	.word	0x20000400

0800506c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005070:	4b03      	ldr	r3, [pc, #12]	; (8005080 <vTaskMissedYield+0x14>)
 8005072:	2201      	movs	r2, #1
 8005074:	601a      	str	r2, [r3, #0]
}
 8005076:	bf00      	nop
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	200003fc 	.word	0x200003fc

08005084 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800508c:	f000 f852 	bl	8005134 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <prvIdleTask+0x28>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d9f9      	bls.n	800508c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005098:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <prvIdleTask+0x2c>)
 800509a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80050a8:	e7f0      	b.n	800508c <prvIdleTask+0x8>
 80050aa:	bf00      	nop
 80050ac:	200002ec 	.word	0x200002ec
 80050b0:	e000ed04 	.word	0xe000ed04

080050b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050ba:	2300      	movs	r3, #0
 80050bc:	607b      	str	r3, [r7, #4]
 80050be:	e00c      	b.n	80050da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4a12      	ldr	r2, [pc, #72]	; (8005114 <prvInitialiseTaskLists+0x60>)
 80050cc:	4413      	add	r3, r2
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe fe33 	bl	8003d3a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3301      	adds	r3, #1
 80050d8:	607b      	str	r3, [r7, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b06      	cmp	r3, #6
 80050de:	d9ef      	bls.n	80050c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050e0:	480d      	ldr	r0, [pc, #52]	; (8005118 <prvInitialiseTaskLists+0x64>)
 80050e2:	f7fe fe2a 	bl	8003d3a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050e6:	480d      	ldr	r0, [pc, #52]	; (800511c <prvInitialiseTaskLists+0x68>)
 80050e8:	f7fe fe27 	bl	8003d3a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050ec:	480c      	ldr	r0, [pc, #48]	; (8005120 <prvInitialiseTaskLists+0x6c>)
 80050ee:	f7fe fe24 	bl	8003d3a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050f2:	480c      	ldr	r0, [pc, #48]	; (8005124 <prvInitialiseTaskLists+0x70>)
 80050f4:	f7fe fe21 	bl	8003d3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050f8:	480b      	ldr	r0, [pc, #44]	; (8005128 <prvInitialiseTaskLists+0x74>)
 80050fa:	f7fe fe1e 	bl	8003d3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050fe:	4b0b      	ldr	r3, [pc, #44]	; (800512c <prvInitialiseTaskLists+0x78>)
 8005100:	4a05      	ldr	r2, [pc, #20]	; (8005118 <prvInitialiseTaskLists+0x64>)
 8005102:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005104:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <prvInitialiseTaskLists+0x7c>)
 8005106:	4a05      	ldr	r2, [pc, #20]	; (800511c <prvInitialiseTaskLists+0x68>)
 8005108:	601a      	str	r2, [r3, #0]
}
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	200002ec 	.word	0x200002ec
 8005118:	20000378 	.word	0x20000378
 800511c:	2000038c 	.word	0x2000038c
 8005120:	200003a8 	.word	0x200003a8
 8005124:	200003bc 	.word	0x200003bc
 8005128:	200003d4 	.word	0x200003d4
 800512c:	200003a0 	.word	0x200003a0
 8005130:	200003a4 	.word	0x200003a4

08005134 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800513a:	e019      	b.n	8005170 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800513c:	f000 fbca 	bl	80058d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005140:	4b10      	ldr	r3, [pc, #64]	; (8005184 <prvCheckTasksWaitingTermination+0x50>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3304      	adds	r3, #4
 800514c:	4618      	mov	r0, r3
 800514e:	f7fe fe7e 	bl	8003e4e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005152:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <prvCheckTasksWaitingTermination+0x54>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3b01      	subs	r3, #1
 8005158:	4a0b      	ldr	r2, [pc, #44]	; (8005188 <prvCheckTasksWaitingTermination+0x54>)
 800515a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800515c:	4b0b      	ldr	r3, [pc, #44]	; (800518c <prvCheckTasksWaitingTermination+0x58>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3b01      	subs	r3, #1
 8005162:	4a0a      	ldr	r2, [pc, #40]	; (800518c <prvCheckTasksWaitingTermination+0x58>)
 8005164:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005166:	f000 fbe5 	bl	8005934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f810 	bl	8005190 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005170:	4b06      	ldr	r3, [pc, #24]	; (800518c <prvCheckTasksWaitingTermination+0x58>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e1      	bne.n	800513c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	200003bc 	.word	0x200003bc
 8005188:	200003e8 	.word	0x200003e8
 800518c:	200003d0 	.word	0x200003d0

08005190 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d108      	bne.n	80051b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fd42 	bl	8005c30 <vPortFree>
				vPortFree( pxTCB );
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fd3f 	bl	8005c30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051b2:	e018      	b.n	80051e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d103      	bne.n	80051c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fd36 	bl	8005c30 <vPortFree>
	}
 80051c4:	e00f      	b.n	80051e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d00a      	beq.n	80051e6 <prvDeleteTCB+0x56>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	60fb      	str	r3, [r7, #12]
}
 80051e2:	bf00      	nop
 80051e4:	e7fe      	b.n	80051e4 <prvDeleteTCB+0x54>
	}
 80051e6:	bf00      	nop
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051f6:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <prvResetNextTaskUnblockTime+0x38>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d104      	bne.n	800520a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005200:	4b0a      	ldr	r3, [pc, #40]	; (800522c <prvResetNextTaskUnblockTime+0x3c>)
 8005202:	f04f 32ff 	mov.w	r2, #4294967295
 8005206:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005208:	e008      	b.n	800521c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800520a:	4b07      	ldr	r3, [pc, #28]	; (8005228 <prvResetNextTaskUnblockTime+0x38>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	4a04      	ldr	r2, [pc, #16]	; (800522c <prvResetNextTaskUnblockTime+0x3c>)
 800521a:	6013      	str	r3, [r2, #0]
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	200003a0 	.word	0x200003a0
 800522c:	20000408 	.word	0x20000408

08005230 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <xTaskGetSchedulerState+0x34>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d102      	bne.n	8005244 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800523e:	2301      	movs	r3, #1
 8005240:	607b      	str	r3, [r7, #4]
 8005242:	e008      	b.n	8005256 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005244:	4b08      	ldr	r3, [pc, #32]	; (8005268 <xTaskGetSchedulerState+0x38>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800524c:	2302      	movs	r3, #2
 800524e:	607b      	str	r3, [r7, #4]
 8005250:	e001      	b.n	8005256 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005252:	2300      	movs	r3, #0
 8005254:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005256:	687b      	ldr	r3, [r7, #4]
	}
 8005258:	4618      	mov	r0, r3
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	200003f4 	.word	0x200003f4
 8005268:	20000410 	.word	0x20000410

0800526c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005278:	2300      	movs	r3, #0
 800527a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d05e      	beq.n	8005340 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005286:	4b31      	ldr	r3, [pc, #196]	; (800534c <xTaskPriorityInherit+0xe0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	429a      	cmp	r2, r3
 800528e:	d24e      	bcs.n	800532e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	2b00      	cmp	r3, #0
 8005296:	db06      	blt.n	80052a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005298:	4b2c      	ldr	r3, [pc, #176]	; (800534c <xTaskPriorityInherit+0xe0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	f1c3 0207 	rsb	r2, r3, #7
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	6959      	ldr	r1, [r3, #20]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4a26      	ldr	r2, [pc, #152]	; (8005350 <xTaskPriorityInherit+0xe4>)
 80052b8:	4413      	add	r3, r2
 80052ba:	4299      	cmp	r1, r3
 80052bc:	d12f      	bne.n	800531e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fe fdc3 	bl	8003e4e <uxListRemove>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10a      	bne.n	80052e4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	2201      	movs	r2, #1
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	43da      	mvns	r2, r3
 80052da:	4b1e      	ldr	r3, [pc, #120]	; (8005354 <xTaskPriorityInherit+0xe8>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4013      	ands	r3, r2
 80052e0:	4a1c      	ldr	r2, [pc, #112]	; (8005354 <xTaskPriorityInherit+0xe8>)
 80052e2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052e4:	4b19      	ldr	r3, [pc, #100]	; (800534c <xTaskPriorityInherit+0xe0>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	2201      	movs	r2, #1
 80052f4:	409a      	lsls	r2, r3
 80052f6:	4b17      	ldr	r3, [pc, #92]	; (8005354 <xTaskPriorityInherit+0xe8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	4a15      	ldr	r2, [pc, #84]	; (8005354 <xTaskPriorityInherit+0xe8>)
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005304:	4613      	mov	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4a10      	ldr	r2, [pc, #64]	; (8005350 <xTaskPriorityInherit+0xe4>)
 800530e:	441a      	add	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	3304      	adds	r3, #4
 8005314:	4619      	mov	r1, r3
 8005316:	4610      	mov	r0, r2
 8005318:	f7fe fd3c 	bl	8003d94 <vListInsertEnd>
 800531c:	e004      	b.n	8005328 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800531e:	4b0b      	ldr	r3, [pc, #44]	; (800534c <xTaskPriorityInherit+0xe0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005328:	2301      	movs	r3, #1
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	e008      	b.n	8005340 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005332:	4b06      	ldr	r3, [pc, #24]	; (800534c <xTaskPriorityInherit+0xe0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	429a      	cmp	r2, r3
 800533a:	d201      	bcs.n	8005340 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800533c:	2301      	movs	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005340:	68fb      	ldr	r3, [r7, #12]
	}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	200002e8 	.word	0x200002e8
 8005350:	200002ec 	.word	0x200002ec
 8005354:	200003f0 	.word	0x200003f0

08005358 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005364:	2300      	movs	r3, #0
 8005366:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d06e      	beq.n	800544c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800536e:	4b3a      	ldr	r3, [pc, #232]	; (8005458 <xTaskPriorityDisinherit+0x100>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	429a      	cmp	r2, r3
 8005376:	d00a      	beq.n	800538e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	60fb      	str	r3, [r7, #12]
}
 800538a:	bf00      	nop
 800538c:	e7fe      	b.n	800538c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10a      	bne.n	80053ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	60bb      	str	r3, [r7, #8]
}
 80053a8:	bf00      	nop
 80053aa:	e7fe      	b.n	80053aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b0:	1e5a      	subs	r2, r3, #1
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053be:	429a      	cmp	r2, r3
 80053c0:	d044      	beq.n	800544c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d140      	bne.n	800544c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	3304      	adds	r3, #4
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe fd3d 	bl	8003e4e <uxListRemove>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d115      	bne.n	8005406 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053de:	491f      	ldr	r1, [pc, #124]	; (800545c <xTaskPriorityDisinherit+0x104>)
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10a      	bne.n	8005406 <xTaskPriorityDisinherit+0xae>
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	2201      	movs	r2, #1
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	43da      	mvns	r2, r3
 80053fc:	4b18      	ldr	r3, [pc, #96]	; (8005460 <xTaskPriorityDisinherit+0x108>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4013      	ands	r3, r2
 8005402:	4a17      	ldr	r2, [pc, #92]	; (8005460 <xTaskPriorityDisinherit+0x108>)
 8005404:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	f1c3 0207 	rsb	r2, r3, #7
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541e:	2201      	movs	r2, #1
 8005420:	409a      	lsls	r2, r3
 8005422:	4b0f      	ldr	r3, [pc, #60]	; (8005460 <xTaskPriorityDisinherit+0x108>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4313      	orrs	r3, r2
 8005428:	4a0d      	ldr	r2, [pc, #52]	; (8005460 <xTaskPriorityDisinherit+0x108>)
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4a08      	ldr	r2, [pc, #32]	; (800545c <xTaskPriorityDisinherit+0x104>)
 800543a:	441a      	add	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	3304      	adds	r3, #4
 8005440:	4619      	mov	r1, r3
 8005442:	4610      	mov	r0, r2
 8005444:	f7fe fca6 	bl	8003d94 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005448:	2301      	movs	r3, #1
 800544a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800544c:	697b      	ldr	r3, [r7, #20]
	}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	200002e8 	.word	0x200002e8
 800545c:	200002ec 	.word	0x200002ec
 8005460:	200003f0 	.word	0x200003f0

08005464 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005472:	2301      	movs	r3, #1
 8005474:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d077      	beq.n	800556c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	60fb      	str	r3, [r7, #12]
}
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d902      	bls.n	80054aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	e002      	b.n	80054b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d058      	beq.n	800556c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d153      	bne.n	800556c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80054c4:	4b2b      	ldr	r3, [pc, #172]	; (8005574 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d10a      	bne.n	80054e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	60bb      	str	r3, [r7, #8]
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	69fa      	ldr	r2, [r7, #28]
 80054ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	db04      	blt.n	8005502 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f1c3 0207 	rsb	r2, r3, #7
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	6959      	ldr	r1, [r3, #20]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4a19      	ldr	r2, [pc, #100]	; (8005578 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005512:	4413      	add	r3, r2
 8005514:	4299      	cmp	r1, r3
 8005516:	d129      	bne.n	800556c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	3304      	adds	r3, #4
 800551c:	4618      	mov	r0, r3
 800551e:	f7fe fc96 	bl	8003e4e <uxListRemove>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10a      	bne.n	800553e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	2201      	movs	r2, #1
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43da      	mvns	r2, r3
 8005534:	4b11      	ldr	r3, [pc, #68]	; (800557c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4013      	ands	r3, r2
 800553a:	4a10      	ldr	r2, [pc, #64]	; (800557c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800553c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	2201      	movs	r2, #1
 8005544:	409a      	lsls	r2, r3
 8005546:	4b0d      	ldr	r3, [pc, #52]	; (800557c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4313      	orrs	r3, r2
 800554c:	4a0b      	ldr	r2, [pc, #44]	; (800557c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4a06      	ldr	r2, [pc, #24]	; (8005578 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800555e:	441a      	add	r2, r3
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	3304      	adds	r3, #4
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f7fe fc14 	bl	8003d94 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800556c:	bf00      	nop
 800556e:	3720      	adds	r7, #32
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	200002e8 	.word	0x200002e8
 8005578:	200002ec 	.word	0x200002ec
 800557c:	200003f0 	.word	0x200003f0

08005580 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005584:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d004      	beq.n	8005596 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800558c:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005592:	3201      	adds	r2, #1
 8005594:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005596:	4b03      	ldr	r3, [pc, #12]	; (80055a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005598:	681b      	ldr	r3, [r3, #0]
	}
 800559a:	4618      	mov	r0, r3
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	200002e8 	.word	0x200002e8

080055a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055b2:	4b29      	ldr	r3, [pc, #164]	; (8005658 <prvAddCurrentTaskToDelayedList+0xb0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055b8:	4b28      	ldr	r3, [pc, #160]	; (800565c <prvAddCurrentTaskToDelayedList+0xb4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3304      	adds	r3, #4
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe fc45 	bl	8003e4e <uxListRemove>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80055ca:	4b24      	ldr	r3, [pc, #144]	; (800565c <prvAddCurrentTaskToDelayedList+0xb4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	2201      	movs	r2, #1
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43da      	mvns	r2, r3
 80055d8:	4b21      	ldr	r3, [pc, #132]	; (8005660 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4013      	ands	r3, r2
 80055de:	4a20      	ldr	r2, [pc, #128]	; (8005660 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d10a      	bne.n	8005600 <prvAddCurrentTaskToDelayedList+0x58>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f0:	4b1a      	ldr	r3, [pc, #104]	; (800565c <prvAddCurrentTaskToDelayedList+0xb4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4619      	mov	r1, r3
 80055f8:	481a      	ldr	r0, [pc, #104]	; (8005664 <prvAddCurrentTaskToDelayedList+0xbc>)
 80055fa:	f7fe fbcb 	bl	8003d94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055fe:	e026      	b.n	800564e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4413      	add	r3, r2
 8005606:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005608:	4b14      	ldr	r3, [pc, #80]	; (800565c <prvAddCurrentTaskToDelayedList+0xb4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	429a      	cmp	r2, r3
 8005616:	d209      	bcs.n	800562c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005618:	4b13      	ldr	r3, [pc, #76]	; (8005668 <prvAddCurrentTaskToDelayedList+0xc0>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4b0f      	ldr	r3, [pc, #60]	; (800565c <prvAddCurrentTaskToDelayedList+0xb4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3304      	adds	r3, #4
 8005622:	4619      	mov	r1, r3
 8005624:	4610      	mov	r0, r2
 8005626:	f7fe fbd9 	bl	8003ddc <vListInsert>
}
 800562a:	e010      	b.n	800564e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800562c:	4b0f      	ldr	r3, [pc, #60]	; (800566c <prvAddCurrentTaskToDelayedList+0xc4>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	4b0a      	ldr	r3, [pc, #40]	; (800565c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3304      	adds	r3, #4
 8005636:	4619      	mov	r1, r3
 8005638:	4610      	mov	r0, r2
 800563a:	f7fe fbcf 	bl	8003ddc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800563e:	4b0c      	ldr	r3, [pc, #48]	; (8005670 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	429a      	cmp	r2, r3
 8005646:	d202      	bcs.n	800564e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005648:	4a09      	ldr	r2, [pc, #36]	; (8005670 <prvAddCurrentTaskToDelayedList+0xc8>)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	6013      	str	r3, [r2, #0]
}
 800564e:	bf00      	nop
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	200003ec 	.word	0x200003ec
 800565c:	200002e8 	.word	0x200002e8
 8005660:	200003f0 	.word	0x200003f0
 8005664:	200003d4 	.word	0x200003d4
 8005668:	200003a4 	.word	0x200003a4
 800566c:	200003a0 	.word	0x200003a0
 8005670:	20000408 	.word	0x20000408

08005674 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3b04      	subs	r3, #4
 8005684:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800568c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3b04      	subs	r3, #4
 8005692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f023 0201 	bic.w	r2, r3, #1
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3b04      	subs	r3, #4
 80056a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056a4:	4a0c      	ldr	r2, [pc, #48]	; (80056d8 <pxPortInitialiseStack+0x64>)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3b14      	subs	r3, #20
 80056ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3b04      	subs	r3, #4
 80056ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f06f 0202 	mvn.w	r2, #2
 80056c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3b20      	subs	r3, #32
 80056c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056ca:	68fb      	ldr	r3, [r7, #12]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	080056dd 	.word	0x080056dd

080056dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056e6:	4b12      	ldr	r3, [pc, #72]	; (8005730 <prvTaskExitError+0x54>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	d00a      	beq.n	8005706 <prvTaskExitError+0x2a>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	60fb      	str	r3, [r7, #12]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <prvTaskExitError+0x28>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	60bb      	str	r3, [r7, #8]
}
 8005718:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800571a:	bf00      	nop
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0fc      	beq.n	800571c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005722:	bf00      	nop
 8005724:	bf00      	nop
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	2000000c 	.word	0x2000000c
	...

08005740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005740:	4b07      	ldr	r3, [pc, #28]	; (8005760 <pxCurrentTCBConst2>)
 8005742:	6819      	ldr	r1, [r3, #0]
 8005744:	6808      	ldr	r0, [r1, #0]
 8005746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574a:	f380 8809 	msr	PSP, r0
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f380 8811 	msr	BASEPRI, r0
 800575a:	4770      	bx	lr
 800575c:	f3af 8000 	nop.w

08005760 <pxCurrentTCBConst2>:
 8005760:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop

08005768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005768:	4808      	ldr	r0, [pc, #32]	; (800578c <prvPortStartFirstTask+0x24>)
 800576a:	6800      	ldr	r0, [r0, #0]
 800576c:	6800      	ldr	r0, [r0, #0]
 800576e:	f380 8808 	msr	MSP, r0
 8005772:	f04f 0000 	mov.w	r0, #0
 8005776:	f380 8814 	msr	CONTROL, r0
 800577a:	b662      	cpsie	i
 800577c:	b661      	cpsie	f
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	df00      	svc	0
 8005788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800578a:	bf00      	nop
 800578c:	e000ed08 	.word	0xe000ed08

08005790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005796:	4b46      	ldr	r3, [pc, #280]	; (80058b0 <xPortStartScheduler+0x120>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a46      	ldr	r2, [pc, #280]	; (80058b4 <xPortStartScheduler+0x124>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d10a      	bne.n	80057b6 <xPortStartScheduler+0x26>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	613b      	str	r3, [r7, #16]
}
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057b6:	4b3e      	ldr	r3, [pc, #248]	; (80058b0 <xPortStartScheduler+0x120>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a3f      	ldr	r2, [pc, #252]	; (80058b8 <xPortStartScheduler+0x128>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d10a      	bne.n	80057d6 <xPortStartScheduler+0x46>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	60fb      	str	r3, [r7, #12]
}
 80057d2:	bf00      	nop
 80057d4:	e7fe      	b.n	80057d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057d6:	4b39      	ldr	r3, [pc, #228]	; (80058bc <xPortStartScheduler+0x12c>)
 80057d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	22ff      	movs	r2, #255	; 0xff
 80057e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	4b31      	ldr	r3, [pc, #196]	; (80058c0 <xPortStartScheduler+0x130>)
 80057fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057fe:	4b31      	ldr	r3, [pc, #196]	; (80058c4 <xPortStartScheduler+0x134>)
 8005800:	2207      	movs	r2, #7
 8005802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005804:	e009      	b.n	800581a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005806:	4b2f      	ldr	r3, [pc, #188]	; (80058c4 <xPortStartScheduler+0x134>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3b01      	subs	r3, #1
 800580c:	4a2d      	ldr	r2, [pc, #180]	; (80058c4 <xPortStartScheduler+0x134>)
 800580e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	b2db      	uxtb	r3, r3
 8005818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005822:	2b80      	cmp	r3, #128	; 0x80
 8005824:	d0ef      	beq.n	8005806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005826:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <xPortStartScheduler+0x134>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f1c3 0307 	rsb	r3, r3, #7
 800582e:	2b04      	cmp	r3, #4
 8005830:	d00a      	beq.n	8005848 <xPortStartScheduler+0xb8>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	60bb      	str	r3, [r7, #8]
}
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005848:	4b1e      	ldr	r3, [pc, #120]	; (80058c4 <xPortStartScheduler+0x134>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	4a1d      	ldr	r2, [pc, #116]	; (80058c4 <xPortStartScheduler+0x134>)
 8005850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005852:	4b1c      	ldr	r3, [pc, #112]	; (80058c4 <xPortStartScheduler+0x134>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800585a:	4a1a      	ldr	r2, [pc, #104]	; (80058c4 <xPortStartScheduler+0x134>)
 800585c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005866:	4b18      	ldr	r3, [pc, #96]	; (80058c8 <xPortStartScheduler+0x138>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a17      	ldr	r2, [pc, #92]	; (80058c8 <xPortStartScheduler+0x138>)
 800586c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005872:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <xPortStartScheduler+0x138>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a14      	ldr	r2, [pc, #80]	; (80058c8 <xPortStartScheduler+0x138>)
 8005878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800587c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800587e:	f000 f8dd 	bl	8005a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005882:	4b12      	ldr	r3, [pc, #72]	; (80058cc <xPortStartScheduler+0x13c>)
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005888:	f000 f8fc 	bl	8005a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800588c:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <xPortStartScheduler+0x140>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a0f      	ldr	r2, [pc, #60]	; (80058d0 <xPortStartScheduler+0x140>)
 8005892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005898:	f7ff ff66 	bl	8005768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800589c:	f7ff fa8c 	bl	8004db8 <vTaskSwitchContext>
	prvTaskExitError();
 80058a0:	f7ff ff1c 	bl	80056dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	e000ed00 	.word	0xe000ed00
 80058b4:	410fc271 	.word	0x410fc271
 80058b8:	410fc270 	.word	0x410fc270
 80058bc:	e000e400 	.word	0xe000e400
 80058c0:	20000414 	.word	0x20000414
 80058c4:	20000418 	.word	0x20000418
 80058c8:	e000ed20 	.word	0xe000ed20
 80058cc:	2000000c 	.word	0x2000000c
 80058d0:	e000ef34 	.word	0xe000ef34

080058d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	607b      	str	r3, [r7, #4]
}
 80058ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058ee:	4b0f      	ldr	r3, [pc, #60]	; (800592c <vPortEnterCritical+0x58>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3301      	adds	r3, #1
 80058f4:	4a0d      	ldr	r2, [pc, #52]	; (800592c <vPortEnterCritical+0x58>)
 80058f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <vPortEnterCritical+0x58>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d10f      	bne.n	8005920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <vPortEnterCritical+0x5c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <vPortEnterCritical+0x4c>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	603b      	str	r3, [r7, #0]
}
 800591c:	bf00      	nop
 800591e:	e7fe      	b.n	800591e <vPortEnterCritical+0x4a>
	}
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	2000000c 	.word	0x2000000c
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800593a:	4b12      	ldr	r3, [pc, #72]	; (8005984 <vPortExitCritical+0x50>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10a      	bne.n	8005958 <vPortExitCritical+0x24>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	607b      	str	r3, [r7, #4]
}
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005958:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <vPortExitCritical+0x50>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3b01      	subs	r3, #1
 800595e:	4a09      	ldr	r2, [pc, #36]	; (8005984 <vPortExitCritical+0x50>)
 8005960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005962:	4b08      	ldr	r3, [pc, #32]	; (8005984 <vPortExitCritical+0x50>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d105      	bne.n	8005976 <vPortExitCritical+0x42>
 800596a:	2300      	movs	r3, #0
 800596c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	2000000c 	.word	0x2000000c
	...

08005990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005990:	f3ef 8009 	mrs	r0, PSP
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	4b15      	ldr	r3, [pc, #84]	; (80059f0 <pxCurrentTCBConst>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	f01e 0f10 	tst.w	lr, #16
 80059a0:	bf08      	it	eq
 80059a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059aa:	6010      	str	r0, [r2, #0]
 80059ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059b4:	f380 8811 	msr	BASEPRI, r0
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f7ff f9fa 	bl	8004db8 <vTaskSwitchContext>
 80059c4:	f04f 0000 	mov.w	r0, #0
 80059c8:	f380 8811 	msr	BASEPRI, r0
 80059cc:	bc09      	pop	{r0, r3}
 80059ce:	6819      	ldr	r1, [r3, #0]
 80059d0:	6808      	ldr	r0, [r1, #0]
 80059d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d6:	f01e 0f10 	tst.w	lr, #16
 80059da:	bf08      	it	eq
 80059dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059e0:	f380 8809 	msr	PSP, r0
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	f3af 8000 	nop.w

080059f0 <pxCurrentTCBConst>:
 80059f0:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop

080059f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	607b      	str	r3, [r7, #4]
}
 8005a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a12:	f7ff f919 	bl	8004c48 <xTaskIncrementTick>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a1c:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <xPortSysTickHandler+0x40>)
 8005a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	2300      	movs	r3, #0
 8005a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f383 8811 	msr	BASEPRI, r3
}
 8005a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a30:	bf00      	nop
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a40:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <vPortSetupTimerInterrupt+0x34>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a46:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <vPortSetupTimerInterrupt+0x38>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <vPortSetupTimerInterrupt+0x3c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a0a      	ldr	r2, [pc, #40]	; (8005a7c <vPortSetupTimerInterrupt+0x40>)
 8005a52:	fba2 2303 	umull	r2, r3, r2, r3
 8005a56:	099b      	lsrs	r3, r3, #6
 8005a58:	4a09      	ldr	r2, [pc, #36]	; (8005a80 <vPortSetupTimerInterrupt+0x44>)
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a5e:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <vPortSetupTimerInterrupt+0x34>)
 8005a60:	2207      	movs	r2, #7
 8005a62:	601a      	str	r2, [r3, #0]
}
 8005a64:	bf00      	nop
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	e000e010 	.word	0xe000e010
 8005a74:	e000e018 	.word	0xe000e018
 8005a78:	20000000 	.word	0x20000000
 8005a7c:	10624dd3 	.word	0x10624dd3
 8005a80:	e000e014 	.word	0xe000e014

08005a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a94 <vPortEnableVFP+0x10>
 8005a88:	6801      	ldr	r1, [r0, #0]
 8005a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a8e:	6001      	str	r1, [r0, #0]
 8005a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a92:	bf00      	nop
 8005a94:	e000ed88 	.word	0xe000ed88

08005a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08a      	sub	sp, #40	; 0x28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005aa4:	f7ff f826 	bl	8004af4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005aa8:	4b5b      	ldr	r3, [pc, #364]	; (8005c18 <pvPortMalloc+0x180>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ab0:	f000 f920 	bl	8005cf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ab4:	4b59      	ldr	r3, [pc, #356]	; (8005c1c <pvPortMalloc+0x184>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4013      	ands	r3, r2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f040 8093 	bne.w	8005be8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01d      	beq.n	8005b04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ac8:	2208      	movs	r2, #8
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4413      	add	r3, r2
 8005ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d014      	beq.n	8005b04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f023 0307 	bic.w	r3, r3, #7
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <pvPortMalloc+0x6c>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	617b      	str	r3, [r7, #20]
}
 8005b00:	bf00      	nop
 8005b02:	e7fe      	b.n	8005b02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d06e      	beq.n	8005be8 <pvPortMalloc+0x150>
 8005b0a:	4b45      	ldr	r3, [pc, #276]	; (8005c20 <pvPortMalloc+0x188>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d869      	bhi.n	8005be8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b14:	4b43      	ldr	r3, [pc, #268]	; (8005c24 <pvPortMalloc+0x18c>)
 8005b16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b18:	4b42      	ldr	r3, [pc, #264]	; (8005c24 <pvPortMalloc+0x18c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b1e:	e004      	b.n	8005b2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d903      	bls.n	8005b3c <pvPortMalloc+0xa4>
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1f1      	bne.n	8005b20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b3c:	4b36      	ldr	r3, [pc, #216]	; (8005c18 <pvPortMalloc+0x180>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d050      	beq.n	8005be8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2208      	movs	r2, #8
 8005b4c:	4413      	add	r3, r2
 8005b4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	1ad2      	subs	r2, r2, r3
 8005b60:	2308      	movs	r3, #8
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d91f      	bls.n	8005ba8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <pvPortMalloc+0xf8>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	613b      	str	r3, [r7, #16]
}
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	1ad2      	subs	r2, r2, r3
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ba2:	69b8      	ldr	r0, [r7, #24]
 8005ba4:	f000 f908 	bl	8005db8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ba8:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <pvPortMalloc+0x188>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	4a1b      	ldr	r2, [pc, #108]	; (8005c20 <pvPortMalloc+0x188>)
 8005bb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005bb6:	4b1a      	ldr	r3, [pc, #104]	; (8005c20 <pvPortMalloc+0x188>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <pvPortMalloc+0x190>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d203      	bcs.n	8005bca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005bc2:	4b17      	ldr	r3, [pc, #92]	; (8005c20 <pvPortMalloc+0x188>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a18      	ldr	r2, [pc, #96]	; (8005c28 <pvPortMalloc+0x190>)
 8005bc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	4b13      	ldr	r3, [pc, #76]	; (8005c1c <pvPortMalloc+0x184>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005bde:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <pvPortMalloc+0x194>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3301      	adds	r3, #1
 8005be4:	4a11      	ldr	r2, [pc, #68]	; (8005c2c <pvPortMalloc+0x194>)
 8005be6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005be8:	f7fe ff92 	bl	8004b10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <pvPortMalloc+0x174>
	__asm volatile
 8005bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	60fb      	str	r3, [r7, #12]
}
 8005c08:	bf00      	nop
 8005c0a:	e7fe      	b.n	8005c0a <pvPortMalloc+0x172>
	return pvReturn;
 8005c0c:	69fb      	ldr	r3, [r7, #28]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3728      	adds	r7, #40	; 0x28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20004024 	.word	0x20004024
 8005c1c:	20004038 	.word	0x20004038
 8005c20:	20004028 	.word	0x20004028
 8005c24:	2000401c 	.word	0x2000401c
 8005c28:	2000402c 	.word	0x2000402c
 8005c2c:	20004030 	.word	0x20004030

08005c30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d04d      	beq.n	8005cde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c42:	2308      	movs	r3, #8
 8005c44:	425b      	negs	r3, r3
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4413      	add	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	4b24      	ldr	r3, [pc, #144]	; (8005ce8 <vPortFree+0xb8>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10a      	bne.n	8005c74 <vPortFree+0x44>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	60fb      	str	r3, [r7, #12]
}
 8005c70:	bf00      	nop
 8005c72:	e7fe      	b.n	8005c72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <vPortFree+0x62>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	60bb      	str	r3, [r7, #8]
}
 8005c8e:	bf00      	nop
 8005c90:	e7fe      	b.n	8005c90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	4b14      	ldr	r3, [pc, #80]	; (8005ce8 <vPortFree+0xb8>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01e      	beq.n	8005cde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d11a      	bne.n	8005cde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	4b0e      	ldr	r3, [pc, #56]	; (8005ce8 <vPortFree+0xb8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	401a      	ands	r2, r3
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005cb8:	f7fe ff1c 	bl	8004af4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <vPortFree+0xbc>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	4a09      	ldr	r2, [pc, #36]	; (8005cec <vPortFree+0xbc>)
 8005cc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cca:	6938      	ldr	r0, [r7, #16]
 8005ccc:	f000 f874 	bl	8005db8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005cd0:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <vPortFree+0xc0>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	4a06      	ldr	r2, [pc, #24]	; (8005cf0 <vPortFree+0xc0>)
 8005cd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005cda:	f7fe ff19 	bl	8004b10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cde:	bf00      	nop
 8005ce0:	3718      	adds	r7, #24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20004038 	.word	0x20004038
 8005cec:	20004028 	.word	0x20004028
 8005cf0:	20004034 	.word	0x20004034

08005cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005cfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d00:	4b27      	ldr	r3, [pc, #156]	; (8005da0 <prvHeapInit+0xac>)
 8005d02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00c      	beq.n	8005d28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3307      	adds	r3, #7
 8005d12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0307 	bic.w	r3, r3, #7
 8005d1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	4a1f      	ldr	r2, [pc, #124]	; (8005da0 <prvHeapInit+0xac>)
 8005d24:	4413      	add	r3, r2
 8005d26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d2c:	4a1d      	ldr	r2, [pc, #116]	; (8005da4 <prvHeapInit+0xb0>)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d32:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <prvHeapInit+0xb0>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d40:	2208      	movs	r2, #8
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0307 	bic.w	r3, r3, #7
 8005d4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4a15      	ldr	r2, [pc, #84]	; (8005da8 <prvHeapInit+0xb4>)
 8005d54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d56:	4b14      	ldr	r3, [pc, #80]	; (8005da8 <prvHeapInit+0xb4>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d5e:	4b12      	ldr	r3, [pc, #72]	; (8005da8 <prvHeapInit+0xb4>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	1ad2      	subs	r2, r2, r3
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d74:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <prvHeapInit+0xb4>)
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	4a0a      	ldr	r2, [pc, #40]	; (8005dac <prvHeapInit+0xb8>)
 8005d82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	4a09      	ldr	r2, [pc, #36]	; (8005db0 <prvHeapInit+0xbc>)
 8005d8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d8c:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <prvHeapInit+0xc0>)
 8005d8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d92:	601a      	str	r2, [r3, #0]
}
 8005d94:	bf00      	nop
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	2000041c 	.word	0x2000041c
 8005da4:	2000401c 	.word	0x2000401c
 8005da8:	20004024 	.word	0x20004024
 8005dac:	2000402c 	.word	0x2000402c
 8005db0:	20004028 	.word	0x20004028
 8005db4:	20004038 	.word	0x20004038

08005db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005dc0:	4b28      	ldr	r3, [pc, #160]	; (8005e64 <prvInsertBlockIntoFreeList+0xac>)
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	e002      	b.n	8005dcc <prvInsertBlockIntoFreeList+0x14>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d8f7      	bhi.n	8005dc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	4413      	add	r3, r2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d108      	bne.n	8005dfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	441a      	add	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	441a      	add	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d118      	bne.n	8005e40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4b15      	ldr	r3, [pc, #84]	; (8005e68 <prvInsertBlockIntoFreeList+0xb0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d00d      	beq.n	8005e36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	441a      	add	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	e008      	b.n	8005e48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e36:	4b0c      	ldr	r3, [pc, #48]	; (8005e68 <prvInsertBlockIntoFreeList+0xb0>)
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	e003      	b.n	8005e48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d002      	beq.n	8005e56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e56:	bf00      	nop
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	2000401c 	.word	0x2000401c
 8005e68:	20004024 	.word	0x20004024

08005e6c <__errno>:
 8005e6c:	4b01      	ldr	r3, [pc, #4]	; (8005e74 <__errno+0x8>)
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	20000010 	.word	0x20000010

08005e78 <__sflush_r>:
 8005e78:	898a      	ldrh	r2, [r1, #12]
 8005e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e7e:	4605      	mov	r5, r0
 8005e80:	0710      	lsls	r0, r2, #28
 8005e82:	460c      	mov	r4, r1
 8005e84:	d458      	bmi.n	8005f38 <__sflush_r+0xc0>
 8005e86:	684b      	ldr	r3, [r1, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	dc05      	bgt.n	8005e98 <__sflush_r+0x20>
 8005e8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	dc02      	bgt.n	8005e98 <__sflush_r+0x20>
 8005e92:	2000      	movs	r0, #0
 8005e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e9a:	2e00      	cmp	r6, #0
 8005e9c:	d0f9      	beq.n	8005e92 <__sflush_r+0x1a>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ea4:	682f      	ldr	r7, [r5, #0]
 8005ea6:	602b      	str	r3, [r5, #0]
 8005ea8:	d032      	beq.n	8005f10 <__sflush_r+0x98>
 8005eaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	075a      	lsls	r2, r3, #29
 8005eb0:	d505      	bpl.n	8005ebe <__sflush_r+0x46>
 8005eb2:	6863      	ldr	r3, [r4, #4]
 8005eb4:	1ac0      	subs	r0, r0, r3
 8005eb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005eb8:	b10b      	cbz	r3, 8005ebe <__sflush_r+0x46>
 8005eba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ebc:	1ac0      	subs	r0, r0, r3
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ec4:	6a21      	ldr	r1, [r4, #32]
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b0      	blx	r6
 8005eca:	1c43      	adds	r3, r0, #1
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	d106      	bne.n	8005ede <__sflush_r+0x66>
 8005ed0:	6829      	ldr	r1, [r5, #0]
 8005ed2:	291d      	cmp	r1, #29
 8005ed4:	d82c      	bhi.n	8005f30 <__sflush_r+0xb8>
 8005ed6:	4a2a      	ldr	r2, [pc, #168]	; (8005f80 <__sflush_r+0x108>)
 8005ed8:	40ca      	lsrs	r2, r1
 8005eda:	07d6      	lsls	r6, r2, #31
 8005edc:	d528      	bpl.n	8005f30 <__sflush_r+0xb8>
 8005ede:	2200      	movs	r2, #0
 8005ee0:	6062      	str	r2, [r4, #4]
 8005ee2:	04d9      	lsls	r1, r3, #19
 8005ee4:	6922      	ldr	r2, [r4, #16]
 8005ee6:	6022      	str	r2, [r4, #0]
 8005ee8:	d504      	bpl.n	8005ef4 <__sflush_r+0x7c>
 8005eea:	1c42      	adds	r2, r0, #1
 8005eec:	d101      	bne.n	8005ef2 <__sflush_r+0x7a>
 8005eee:	682b      	ldr	r3, [r5, #0]
 8005ef0:	b903      	cbnz	r3, 8005ef4 <__sflush_r+0x7c>
 8005ef2:	6560      	str	r0, [r4, #84]	; 0x54
 8005ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ef6:	602f      	str	r7, [r5, #0]
 8005ef8:	2900      	cmp	r1, #0
 8005efa:	d0ca      	beq.n	8005e92 <__sflush_r+0x1a>
 8005efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f00:	4299      	cmp	r1, r3
 8005f02:	d002      	beq.n	8005f0a <__sflush_r+0x92>
 8005f04:	4628      	mov	r0, r5
 8005f06:	f000 f9cf 	bl	80062a8 <_free_r>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	6360      	str	r0, [r4, #52]	; 0x34
 8005f0e:	e7c1      	b.n	8005e94 <__sflush_r+0x1c>
 8005f10:	6a21      	ldr	r1, [r4, #32]
 8005f12:	2301      	movs	r3, #1
 8005f14:	4628      	mov	r0, r5
 8005f16:	47b0      	blx	r6
 8005f18:	1c41      	adds	r1, r0, #1
 8005f1a:	d1c7      	bne.n	8005eac <__sflush_r+0x34>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0c4      	beq.n	8005eac <__sflush_r+0x34>
 8005f22:	2b1d      	cmp	r3, #29
 8005f24:	d001      	beq.n	8005f2a <__sflush_r+0xb2>
 8005f26:	2b16      	cmp	r3, #22
 8005f28:	d101      	bne.n	8005f2e <__sflush_r+0xb6>
 8005f2a:	602f      	str	r7, [r5, #0]
 8005f2c:	e7b1      	b.n	8005e92 <__sflush_r+0x1a>
 8005f2e:	89a3      	ldrh	r3, [r4, #12]
 8005f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f34:	81a3      	strh	r3, [r4, #12]
 8005f36:	e7ad      	b.n	8005e94 <__sflush_r+0x1c>
 8005f38:	690f      	ldr	r7, [r1, #16]
 8005f3a:	2f00      	cmp	r7, #0
 8005f3c:	d0a9      	beq.n	8005e92 <__sflush_r+0x1a>
 8005f3e:	0793      	lsls	r3, r2, #30
 8005f40:	680e      	ldr	r6, [r1, #0]
 8005f42:	bf08      	it	eq
 8005f44:	694b      	ldreq	r3, [r1, #20]
 8005f46:	600f      	str	r7, [r1, #0]
 8005f48:	bf18      	it	ne
 8005f4a:	2300      	movne	r3, #0
 8005f4c:	eba6 0807 	sub.w	r8, r6, r7
 8005f50:	608b      	str	r3, [r1, #8]
 8005f52:	f1b8 0f00 	cmp.w	r8, #0
 8005f56:	dd9c      	ble.n	8005e92 <__sflush_r+0x1a>
 8005f58:	6a21      	ldr	r1, [r4, #32]
 8005f5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f5c:	4643      	mov	r3, r8
 8005f5e:	463a      	mov	r2, r7
 8005f60:	4628      	mov	r0, r5
 8005f62:	47b0      	blx	r6
 8005f64:	2800      	cmp	r0, #0
 8005f66:	dc06      	bgt.n	8005f76 <__sflush_r+0xfe>
 8005f68:	89a3      	ldrh	r3, [r4, #12]
 8005f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f6e:	81a3      	strh	r3, [r4, #12]
 8005f70:	f04f 30ff 	mov.w	r0, #4294967295
 8005f74:	e78e      	b.n	8005e94 <__sflush_r+0x1c>
 8005f76:	4407      	add	r7, r0
 8005f78:	eba8 0800 	sub.w	r8, r8, r0
 8005f7c:	e7e9      	b.n	8005f52 <__sflush_r+0xda>
 8005f7e:	bf00      	nop
 8005f80:	20400001 	.word	0x20400001

08005f84 <_fflush_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	690b      	ldr	r3, [r1, #16]
 8005f88:	4605      	mov	r5, r0
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	b913      	cbnz	r3, 8005f94 <_fflush_r+0x10>
 8005f8e:	2500      	movs	r5, #0
 8005f90:	4628      	mov	r0, r5
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
 8005f94:	b118      	cbz	r0, 8005f9e <_fflush_r+0x1a>
 8005f96:	6983      	ldr	r3, [r0, #24]
 8005f98:	b90b      	cbnz	r3, 8005f9e <_fflush_r+0x1a>
 8005f9a:	f000 f899 	bl	80060d0 <__sinit>
 8005f9e:	4b14      	ldr	r3, [pc, #80]	; (8005ff0 <_fflush_r+0x6c>)
 8005fa0:	429c      	cmp	r4, r3
 8005fa2:	d11b      	bne.n	8005fdc <_fflush_r+0x58>
 8005fa4:	686c      	ldr	r4, [r5, #4]
 8005fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0ef      	beq.n	8005f8e <_fflush_r+0xa>
 8005fae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fb0:	07d0      	lsls	r0, r2, #31
 8005fb2:	d404      	bmi.n	8005fbe <_fflush_r+0x3a>
 8005fb4:	0599      	lsls	r1, r3, #22
 8005fb6:	d402      	bmi.n	8005fbe <_fflush_r+0x3a>
 8005fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fba:	f000 f94c 	bl	8006256 <__retarget_lock_acquire_recursive>
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	f7ff ff59 	bl	8005e78 <__sflush_r>
 8005fc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fc8:	07da      	lsls	r2, r3, #31
 8005fca:	4605      	mov	r5, r0
 8005fcc:	d4e0      	bmi.n	8005f90 <_fflush_r+0xc>
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	059b      	lsls	r3, r3, #22
 8005fd2:	d4dd      	bmi.n	8005f90 <_fflush_r+0xc>
 8005fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fd6:	f000 f93f 	bl	8006258 <__retarget_lock_release_recursive>
 8005fda:	e7d9      	b.n	8005f90 <_fflush_r+0xc>
 8005fdc:	4b05      	ldr	r3, [pc, #20]	; (8005ff4 <_fflush_r+0x70>)
 8005fde:	429c      	cmp	r4, r3
 8005fe0:	d101      	bne.n	8005fe6 <_fflush_r+0x62>
 8005fe2:	68ac      	ldr	r4, [r5, #8]
 8005fe4:	e7df      	b.n	8005fa6 <_fflush_r+0x22>
 8005fe6:	4b04      	ldr	r3, [pc, #16]	; (8005ff8 <_fflush_r+0x74>)
 8005fe8:	429c      	cmp	r4, r3
 8005fea:	bf08      	it	eq
 8005fec:	68ec      	ldreq	r4, [r5, #12]
 8005fee:	e7da      	b.n	8005fa6 <_fflush_r+0x22>
 8005ff0:	080073e8 	.word	0x080073e8
 8005ff4:	08007408 	.word	0x08007408
 8005ff8:	080073c8 	.word	0x080073c8

08005ffc <fflush>:
 8005ffc:	4601      	mov	r1, r0
 8005ffe:	b920      	cbnz	r0, 800600a <fflush+0xe>
 8006000:	4b04      	ldr	r3, [pc, #16]	; (8006014 <fflush+0x18>)
 8006002:	4905      	ldr	r1, [pc, #20]	; (8006018 <fflush+0x1c>)
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	f000 b8e1 	b.w	80061cc <_fwalk_reent>
 800600a:	4b04      	ldr	r3, [pc, #16]	; (800601c <fflush+0x20>)
 800600c:	6818      	ldr	r0, [r3, #0]
 800600e:	f7ff bfb9 	b.w	8005f84 <_fflush_r>
 8006012:	bf00      	nop
 8006014:	08007428 	.word	0x08007428
 8006018:	08005f85 	.word	0x08005f85
 800601c:	20000010 	.word	0x20000010

08006020 <std>:
 8006020:	2300      	movs	r3, #0
 8006022:	b510      	push	{r4, lr}
 8006024:	4604      	mov	r4, r0
 8006026:	e9c0 3300 	strd	r3, r3, [r0]
 800602a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800602e:	6083      	str	r3, [r0, #8]
 8006030:	8181      	strh	r1, [r0, #12]
 8006032:	6643      	str	r3, [r0, #100]	; 0x64
 8006034:	81c2      	strh	r2, [r0, #14]
 8006036:	6183      	str	r3, [r0, #24]
 8006038:	4619      	mov	r1, r3
 800603a:	2208      	movs	r2, #8
 800603c:	305c      	adds	r0, #92	; 0x5c
 800603e:	f000 f92b 	bl	8006298 <memset>
 8006042:	4b05      	ldr	r3, [pc, #20]	; (8006058 <std+0x38>)
 8006044:	6263      	str	r3, [r4, #36]	; 0x24
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <std+0x3c>)
 8006048:	62a3      	str	r3, [r4, #40]	; 0x28
 800604a:	4b05      	ldr	r3, [pc, #20]	; (8006060 <std+0x40>)
 800604c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <std+0x44>)
 8006050:	6224      	str	r4, [r4, #32]
 8006052:	6323      	str	r3, [r4, #48]	; 0x30
 8006054:	bd10      	pop	{r4, pc}
 8006056:	bf00      	nop
 8006058:	08006579 	.word	0x08006579
 800605c:	0800659b 	.word	0x0800659b
 8006060:	080065d3 	.word	0x080065d3
 8006064:	080065f7 	.word	0x080065f7

08006068 <_cleanup_r>:
 8006068:	4901      	ldr	r1, [pc, #4]	; (8006070 <_cleanup_r+0x8>)
 800606a:	f000 b8af 	b.w	80061cc <_fwalk_reent>
 800606e:	bf00      	nop
 8006070:	08005f85 	.word	0x08005f85

08006074 <__sfmoreglue>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	1e4a      	subs	r2, r1, #1
 8006078:	2568      	movs	r5, #104	; 0x68
 800607a:	4355      	muls	r5, r2
 800607c:	460e      	mov	r6, r1
 800607e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006082:	f000 f961 	bl	8006348 <_malloc_r>
 8006086:	4604      	mov	r4, r0
 8006088:	b140      	cbz	r0, 800609c <__sfmoreglue+0x28>
 800608a:	2100      	movs	r1, #0
 800608c:	e9c0 1600 	strd	r1, r6, [r0]
 8006090:	300c      	adds	r0, #12
 8006092:	60a0      	str	r0, [r4, #8]
 8006094:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006098:	f000 f8fe 	bl	8006298 <memset>
 800609c:	4620      	mov	r0, r4
 800609e:	bd70      	pop	{r4, r5, r6, pc}

080060a0 <__sfp_lock_acquire>:
 80060a0:	4801      	ldr	r0, [pc, #4]	; (80060a8 <__sfp_lock_acquire+0x8>)
 80060a2:	f000 b8d8 	b.w	8006256 <__retarget_lock_acquire_recursive>
 80060a6:	bf00      	nop
 80060a8:	20004e68 	.word	0x20004e68

080060ac <__sfp_lock_release>:
 80060ac:	4801      	ldr	r0, [pc, #4]	; (80060b4 <__sfp_lock_release+0x8>)
 80060ae:	f000 b8d3 	b.w	8006258 <__retarget_lock_release_recursive>
 80060b2:	bf00      	nop
 80060b4:	20004e68 	.word	0x20004e68

080060b8 <__sinit_lock_acquire>:
 80060b8:	4801      	ldr	r0, [pc, #4]	; (80060c0 <__sinit_lock_acquire+0x8>)
 80060ba:	f000 b8cc 	b.w	8006256 <__retarget_lock_acquire_recursive>
 80060be:	bf00      	nop
 80060c0:	20004e63 	.word	0x20004e63

080060c4 <__sinit_lock_release>:
 80060c4:	4801      	ldr	r0, [pc, #4]	; (80060cc <__sinit_lock_release+0x8>)
 80060c6:	f000 b8c7 	b.w	8006258 <__retarget_lock_release_recursive>
 80060ca:	bf00      	nop
 80060cc:	20004e63 	.word	0x20004e63

080060d0 <__sinit>:
 80060d0:	b510      	push	{r4, lr}
 80060d2:	4604      	mov	r4, r0
 80060d4:	f7ff fff0 	bl	80060b8 <__sinit_lock_acquire>
 80060d8:	69a3      	ldr	r3, [r4, #24]
 80060da:	b11b      	cbz	r3, 80060e4 <__sinit+0x14>
 80060dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e0:	f7ff bff0 	b.w	80060c4 <__sinit_lock_release>
 80060e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060e8:	6523      	str	r3, [r4, #80]	; 0x50
 80060ea:	4b13      	ldr	r3, [pc, #76]	; (8006138 <__sinit+0x68>)
 80060ec:	4a13      	ldr	r2, [pc, #76]	; (800613c <__sinit+0x6c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80060f2:	42a3      	cmp	r3, r4
 80060f4:	bf04      	itt	eq
 80060f6:	2301      	moveq	r3, #1
 80060f8:	61a3      	streq	r3, [r4, #24]
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 f820 	bl	8006140 <__sfp>
 8006100:	6060      	str	r0, [r4, #4]
 8006102:	4620      	mov	r0, r4
 8006104:	f000 f81c 	bl	8006140 <__sfp>
 8006108:	60a0      	str	r0, [r4, #8]
 800610a:	4620      	mov	r0, r4
 800610c:	f000 f818 	bl	8006140 <__sfp>
 8006110:	2200      	movs	r2, #0
 8006112:	60e0      	str	r0, [r4, #12]
 8006114:	2104      	movs	r1, #4
 8006116:	6860      	ldr	r0, [r4, #4]
 8006118:	f7ff ff82 	bl	8006020 <std>
 800611c:	68a0      	ldr	r0, [r4, #8]
 800611e:	2201      	movs	r2, #1
 8006120:	2109      	movs	r1, #9
 8006122:	f7ff ff7d 	bl	8006020 <std>
 8006126:	68e0      	ldr	r0, [r4, #12]
 8006128:	2202      	movs	r2, #2
 800612a:	2112      	movs	r1, #18
 800612c:	f7ff ff78 	bl	8006020 <std>
 8006130:	2301      	movs	r3, #1
 8006132:	61a3      	str	r3, [r4, #24]
 8006134:	e7d2      	b.n	80060dc <__sinit+0xc>
 8006136:	bf00      	nop
 8006138:	08007428 	.word	0x08007428
 800613c:	08006069 	.word	0x08006069

08006140 <__sfp>:
 8006140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006142:	4607      	mov	r7, r0
 8006144:	f7ff ffac 	bl	80060a0 <__sfp_lock_acquire>
 8006148:	4b1e      	ldr	r3, [pc, #120]	; (80061c4 <__sfp+0x84>)
 800614a:	681e      	ldr	r6, [r3, #0]
 800614c:	69b3      	ldr	r3, [r6, #24]
 800614e:	b913      	cbnz	r3, 8006156 <__sfp+0x16>
 8006150:	4630      	mov	r0, r6
 8006152:	f7ff ffbd 	bl	80060d0 <__sinit>
 8006156:	3648      	adds	r6, #72	; 0x48
 8006158:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800615c:	3b01      	subs	r3, #1
 800615e:	d503      	bpl.n	8006168 <__sfp+0x28>
 8006160:	6833      	ldr	r3, [r6, #0]
 8006162:	b30b      	cbz	r3, 80061a8 <__sfp+0x68>
 8006164:	6836      	ldr	r6, [r6, #0]
 8006166:	e7f7      	b.n	8006158 <__sfp+0x18>
 8006168:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800616c:	b9d5      	cbnz	r5, 80061a4 <__sfp+0x64>
 800616e:	4b16      	ldr	r3, [pc, #88]	; (80061c8 <__sfp+0x88>)
 8006170:	60e3      	str	r3, [r4, #12]
 8006172:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006176:	6665      	str	r5, [r4, #100]	; 0x64
 8006178:	f000 f86c 	bl	8006254 <__retarget_lock_init_recursive>
 800617c:	f7ff ff96 	bl	80060ac <__sfp_lock_release>
 8006180:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006184:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006188:	6025      	str	r5, [r4, #0]
 800618a:	61a5      	str	r5, [r4, #24]
 800618c:	2208      	movs	r2, #8
 800618e:	4629      	mov	r1, r5
 8006190:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006194:	f000 f880 	bl	8006298 <memset>
 8006198:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800619c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061a0:	4620      	mov	r0, r4
 80061a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a4:	3468      	adds	r4, #104	; 0x68
 80061a6:	e7d9      	b.n	800615c <__sfp+0x1c>
 80061a8:	2104      	movs	r1, #4
 80061aa:	4638      	mov	r0, r7
 80061ac:	f7ff ff62 	bl	8006074 <__sfmoreglue>
 80061b0:	4604      	mov	r4, r0
 80061b2:	6030      	str	r0, [r6, #0]
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d1d5      	bne.n	8006164 <__sfp+0x24>
 80061b8:	f7ff ff78 	bl	80060ac <__sfp_lock_release>
 80061bc:	230c      	movs	r3, #12
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	e7ee      	b.n	80061a0 <__sfp+0x60>
 80061c2:	bf00      	nop
 80061c4:	08007428 	.word	0x08007428
 80061c8:	ffff0001 	.word	0xffff0001

080061cc <_fwalk_reent>:
 80061cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d0:	4606      	mov	r6, r0
 80061d2:	4688      	mov	r8, r1
 80061d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061d8:	2700      	movs	r7, #0
 80061da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061de:	f1b9 0901 	subs.w	r9, r9, #1
 80061e2:	d505      	bpl.n	80061f0 <_fwalk_reent+0x24>
 80061e4:	6824      	ldr	r4, [r4, #0]
 80061e6:	2c00      	cmp	r4, #0
 80061e8:	d1f7      	bne.n	80061da <_fwalk_reent+0xe>
 80061ea:	4638      	mov	r0, r7
 80061ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f0:	89ab      	ldrh	r3, [r5, #12]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d907      	bls.n	8006206 <_fwalk_reent+0x3a>
 80061f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061fa:	3301      	adds	r3, #1
 80061fc:	d003      	beq.n	8006206 <_fwalk_reent+0x3a>
 80061fe:	4629      	mov	r1, r5
 8006200:	4630      	mov	r0, r6
 8006202:	47c0      	blx	r8
 8006204:	4307      	orrs	r7, r0
 8006206:	3568      	adds	r5, #104	; 0x68
 8006208:	e7e9      	b.n	80061de <_fwalk_reent+0x12>
	...

0800620c <__libc_init_array>:
 800620c:	b570      	push	{r4, r5, r6, lr}
 800620e:	4d0d      	ldr	r5, [pc, #52]	; (8006244 <__libc_init_array+0x38>)
 8006210:	4c0d      	ldr	r4, [pc, #52]	; (8006248 <__libc_init_array+0x3c>)
 8006212:	1b64      	subs	r4, r4, r5
 8006214:	10a4      	asrs	r4, r4, #2
 8006216:	2600      	movs	r6, #0
 8006218:	42a6      	cmp	r6, r4
 800621a:	d109      	bne.n	8006230 <__libc_init_array+0x24>
 800621c:	4d0b      	ldr	r5, [pc, #44]	; (800624c <__libc_init_array+0x40>)
 800621e:	4c0c      	ldr	r4, [pc, #48]	; (8006250 <__libc_init_array+0x44>)
 8006220:	f001 f818 	bl	8007254 <_init>
 8006224:	1b64      	subs	r4, r4, r5
 8006226:	10a4      	asrs	r4, r4, #2
 8006228:	2600      	movs	r6, #0
 800622a:	42a6      	cmp	r6, r4
 800622c:	d105      	bne.n	800623a <__libc_init_array+0x2e>
 800622e:	bd70      	pop	{r4, r5, r6, pc}
 8006230:	f855 3b04 	ldr.w	r3, [r5], #4
 8006234:	4798      	blx	r3
 8006236:	3601      	adds	r6, #1
 8006238:	e7ee      	b.n	8006218 <__libc_init_array+0xc>
 800623a:	f855 3b04 	ldr.w	r3, [r5], #4
 800623e:	4798      	blx	r3
 8006240:	3601      	adds	r6, #1
 8006242:	e7f2      	b.n	800622a <__libc_init_array+0x1e>
 8006244:	08007468 	.word	0x08007468
 8006248:	08007468 	.word	0x08007468
 800624c:	08007468 	.word	0x08007468
 8006250:	0800746c 	.word	0x0800746c

08006254 <__retarget_lock_init_recursive>:
 8006254:	4770      	bx	lr

08006256 <__retarget_lock_acquire_recursive>:
 8006256:	4770      	bx	lr

08006258 <__retarget_lock_release_recursive>:
 8006258:	4770      	bx	lr
	...

0800625c <malloc>:
 800625c:	4b02      	ldr	r3, [pc, #8]	; (8006268 <malloc+0xc>)
 800625e:	4601      	mov	r1, r0
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	f000 b871 	b.w	8006348 <_malloc_r>
 8006266:	bf00      	nop
 8006268:	20000010 	.word	0x20000010

0800626c <free>:
 800626c:	4b02      	ldr	r3, [pc, #8]	; (8006278 <free+0xc>)
 800626e:	4601      	mov	r1, r0
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	f000 b819 	b.w	80062a8 <_free_r>
 8006276:	bf00      	nop
 8006278:	20000010 	.word	0x20000010

0800627c <memcpy>:
 800627c:	440a      	add	r2, r1
 800627e:	4291      	cmp	r1, r2
 8006280:	f100 33ff 	add.w	r3, r0, #4294967295
 8006284:	d100      	bne.n	8006288 <memcpy+0xc>
 8006286:	4770      	bx	lr
 8006288:	b510      	push	{r4, lr}
 800628a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800628e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006292:	4291      	cmp	r1, r2
 8006294:	d1f9      	bne.n	800628a <memcpy+0xe>
 8006296:	bd10      	pop	{r4, pc}

08006298 <memset>:
 8006298:	4402      	add	r2, r0
 800629a:	4603      	mov	r3, r0
 800629c:	4293      	cmp	r3, r2
 800629e:	d100      	bne.n	80062a2 <memset+0xa>
 80062a0:	4770      	bx	lr
 80062a2:	f803 1b01 	strb.w	r1, [r3], #1
 80062a6:	e7f9      	b.n	800629c <memset+0x4>

080062a8 <_free_r>:
 80062a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062aa:	2900      	cmp	r1, #0
 80062ac:	d048      	beq.n	8006340 <_free_r+0x98>
 80062ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062b2:	9001      	str	r0, [sp, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f1a1 0404 	sub.w	r4, r1, #4
 80062ba:	bfb8      	it	lt
 80062bc:	18e4      	addlt	r4, r4, r3
 80062be:	f000 faf7 	bl	80068b0 <__malloc_lock>
 80062c2:	4a20      	ldr	r2, [pc, #128]	; (8006344 <_free_r+0x9c>)
 80062c4:	9801      	ldr	r0, [sp, #4]
 80062c6:	6813      	ldr	r3, [r2, #0]
 80062c8:	4615      	mov	r5, r2
 80062ca:	b933      	cbnz	r3, 80062da <_free_r+0x32>
 80062cc:	6063      	str	r3, [r4, #4]
 80062ce:	6014      	str	r4, [r2, #0]
 80062d0:	b003      	add	sp, #12
 80062d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062d6:	f000 baf1 	b.w	80068bc <__malloc_unlock>
 80062da:	42a3      	cmp	r3, r4
 80062dc:	d90b      	bls.n	80062f6 <_free_r+0x4e>
 80062de:	6821      	ldr	r1, [r4, #0]
 80062e0:	1862      	adds	r2, r4, r1
 80062e2:	4293      	cmp	r3, r2
 80062e4:	bf04      	itt	eq
 80062e6:	681a      	ldreq	r2, [r3, #0]
 80062e8:	685b      	ldreq	r3, [r3, #4]
 80062ea:	6063      	str	r3, [r4, #4]
 80062ec:	bf04      	itt	eq
 80062ee:	1852      	addeq	r2, r2, r1
 80062f0:	6022      	streq	r2, [r4, #0]
 80062f2:	602c      	str	r4, [r5, #0]
 80062f4:	e7ec      	b.n	80062d0 <_free_r+0x28>
 80062f6:	461a      	mov	r2, r3
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	b10b      	cbz	r3, 8006300 <_free_r+0x58>
 80062fc:	42a3      	cmp	r3, r4
 80062fe:	d9fa      	bls.n	80062f6 <_free_r+0x4e>
 8006300:	6811      	ldr	r1, [r2, #0]
 8006302:	1855      	adds	r5, r2, r1
 8006304:	42a5      	cmp	r5, r4
 8006306:	d10b      	bne.n	8006320 <_free_r+0x78>
 8006308:	6824      	ldr	r4, [r4, #0]
 800630a:	4421      	add	r1, r4
 800630c:	1854      	adds	r4, r2, r1
 800630e:	42a3      	cmp	r3, r4
 8006310:	6011      	str	r1, [r2, #0]
 8006312:	d1dd      	bne.n	80062d0 <_free_r+0x28>
 8006314:	681c      	ldr	r4, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	6053      	str	r3, [r2, #4]
 800631a:	4421      	add	r1, r4
 800631c:	6011      	str	r1, [r2, #0]
 800631e:	e7d7      	b.n	80062d0 <_free_r+0x28>
 8006320:	d902      	bls.n	8006328 <_free_r+0x80>
 8006322:	230c      	movs	r3, #12
 8006324:	6003      	str	r3, [r0, #0]
 8006326:	e7d3      	b.n	80062d0 <_free_r+0x28>
 8006328:	6825      	ldr	r5, [r4, #0]
 800632a:	1961      	adds	r1, r4, r5
 800632c:	428b      	cmp	r3, r1
 800632e:	bf04      	itt	eq
 8006330:	6819      	ldreq	r1, [r3, #0]
 8006332:	685b      	ldreq	r3, [r3, #4]
 8006334:	6063      	str	r3, [r4, #4]
 8006336:	bf04      	itt	eq
 8006338:	1949      	addeq	r1, r1, r5
 800633a:	6021      	streq	r1, [r4, #0]
 800633c:	6054      	str	r4, [r2, #4]
 800633e:	e7c7      	b.n	80062d0 <_free_r+0x28>
 8006340:	b003      	add	sp, #12
 8006342:	bd30      	pop	{r4, r5, pc}
 8006344:	2000403c 	.word	0x2000403c

08006348 <_malloc_r>:
 8006348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634a:	1ccd      	adds	r5, r1, #3
 800634c:	f025 0503 	bic.w	r5, r5, #3
 8006350:	3508      	adds	r5, #8
 8006352:	2d0c      	cmp	r5, #12
 8006354:	bf38      	it	cc
 8006356:	250c      	movcc	r5, #12
 8006358:	2d00      	cmp	r5, #0
 800635a:	4606      	mov	r6, r0
 800635c:	db01      	blt.n	8006362 <_malloc_r+0x1a>
 800635e:	42a9      	cmp	r1, r5
 8006360:	d903      	bls.n	800636a <_malloc_r+0x22>
 8006362:	230c      	movs	r3, #12
 8006364:	6033      	str	r3, [r6, #0]
 8006366:	2000      	movs	r0, #0
 8006368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800636a:	f000 faa1 	bl	80068b0 <__malloc_lock>
 800636e:	4921      	ldr	r1, [pc, #132]	; (80063f4 <_malloc_r+0xac>)
 8006370:	680a      	ldr	r2, [r1, #0]
 8006372:	4614      	mov	r4, r2
 8006374:	b99c      	cbnz	r4, 800639e <_malloc_r+0x56>
 8006376:	4f20      	ldr	r7, [pc, #128]	; (80063f8 <_malloc_r+0xb0>)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	b923      	cbnz	r3, 8006386 <_malloc_r+0x3e>
 800637c:	4621      	mov	r1, r4
 800637e:	4630      	mov	r0, r6
 8006380:	f000 f8ca 	bl	8006518 <_sbrk_r>
 8006384:	6038      	str	r0, [r7, #0]
 8006386:	4629      	mov	r1, r5
 8006388:	4630      	mov	r0, r6
 800638a:	f000 f8c5 	bl	8006518 <_sbrk_r>
 800638e:	1c43      	adds	r3, r0, #1
 8006390:	d123      	bne.n	80063da <_malloc_r+0x92>
 8006392:	230c      	movs	r3, #12
 8006394:	6033      	str	r3, [r6, #0]
 8006396:	4630      	mov	r0, r6
 8006398:	f000 fa90 	bl	80068bc <__malloc_unlock>
 800639c:	e7e3      	b.n	8006366 <_malloc_r+0x1e>
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	1b5b      	subs	r3, r3, r5
 80063a2:	d417      	bmi.n	80063d4 <_malloc_r+0x8c>
 80063a4:	2b0b      	cmp	r3, #11
 80063a6:	d903      	bls.n	80063b0 <_malloc_r+0x68>
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	441c      	add	r4, r3
 80063ac:	6025      	str	r5, [r4, #0]
 80063ae:	e004      	b.n	80063ba <_malloc_r+0x72>
 80063b0:	6863      	ldr	r3, [r4, #4]
 80063b2:	42a2      	cmp	r2, r4
 80063b4:	bf0c      	ite	eq
 80063b6:	600b      	streq	r3, [r1, #0]
 80063b8:	6053      	strne	r3, [r2, #4]
 80063ba:	4630      	mov	r0, r6
 80063bc:	f000 fa7e 	bl	80068bc <__malloc_unlock>
 80063c0:	f104 000b 	add.w	r0, r4, #11
 80063c4:	1d23      	adds	r3, r4, #4
 80063c6:	f020 0007 	bic.w	r0, r0, #7
 80063ca:	1ac2      	subs	r2, r0, r3
 80063cc:	d0cc      	beq.n	8006368 <_malloc_r+0x20>
 80063ce:	1a1b      	subs	r3, r3, r0
 80063d0:	50a3      	str	r3, [r4, r2]
 80063d2:	e7c9      	b.n	8006368 <_malloc_r+0x20>
 80063d4:	4622      	mov	r2, r4
 80063d6:	6864      	ldr	r4, [r4, #4]
 80063d8:	e7cc      	b.n	8006374 <_malloc_r+0x2c>
 80063da:	1cc4      	adds	r4, r0, #3
 80063dc:	f024 0403 	bic.w	r4, r4, #3
 80063e0:	42a0      	cmp	r0, r4
 80063e2:	d0e3      	beq.n	80063ac <_malloc_r+0x64>
 80063e4:	1a21      	subs	r1, r4, r0
 80063e6:	4630      	mov	r0, r6
 80063e8:	f000 f896 	bl	8006518 <_sbrk_r>
 80063ec:	3001      	adds	r0, #1
 80063ee:	d1dd      	bne.n	80063ac <_malloc_r+0x64>
 80063f0:	e7cf      	b.n	8006392 <_malloc_r+0x4a>
 80063f2:	bf00      	nop
 80063f4:	2000403c 	.word	0x2000403c
 80063f8:	20004040 	.word	0x20004040

080063fc <iprintf>:
 80063fc:	b40f      	push	{r0, r1, r2, r3}
 80063fe:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <iprintf+0x2c>)
 8006400:	b513      	push	{r0, r1, r4, lr}
 8006402:	681c      	ldr	r4, [r3, #0]
 8006404:	b124      	cbz	r4, 8006410 <iprintf+0x14>
 8006406:	69a3      	ldr	r3, [r4, #24]
 8006408:	b913      	cbnz	r3, 8006410 <iprintf+0x14>
 800640a:	4620      	mov	r0, r4
 800640c:	f7ff fe60 	bl	80060d0 <__sinit>
 8006410:	ab05      	add	r3, sp, #20
 8006412:	9a04      	ldr	r2, [sp, #16]
 8006414:	68a1      	ldr	r1, [r4, #8]
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	4620      	mov	r0, r4
 800641a:	f000 fbdb 	bl	8006bd4 <_vfiprintf_r>
 800641e:	b002      	add	sp, #8
 8006420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006424:	b004      	add	sp, #16
 8006426:	4770      	bx	lr
 8006428:	20000010 	.word	0x20000010

0800642c <_puts_r>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	460e      	mov	r6, r1
 8006430:	4605      	mov	r5, r0
 8006432:	b118      	cbz	r0, 800643c <_puts_r+0x10>
 8006434:	6983      	ldr	r3, [r0, #24]
 8006436:	b90b      	cbnz	r3, 800643c <_puts_r+0x10>
 8006438:	f7ff fe4a 	bl	80060d0 <__sinit>
 800643c:	69ab      	ldr	r3, [r5, #24]
 800643e:	68ac      	ldr	r4, [r5, #8]
 8006440:	b913      	cbnz	r3, 8006448 <_puts_r+0x1c>
 8006442:	4628      	mov	r0, r5
 8006444:	f7ff fe44 	bl	80060d0 <__sinit>
 8006448:	4b2c      	ldr	r3, [pc, #176]	; (80064fc <_puts_r+0xd0>)
 800644a:	429c      	cmp	r4, r3
 800644c:	d120      	bne.n	8006490 <_puts_r+0x64>
 800644e:	686c      	ldr	r4, [r5, #4]
 8006450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006452:	07db      	lsls	r3, r3, #31
 8006454:	d405      	bmi.n	8006462 <_puts_r+0x36>
 8006456:	89a3      	ldrh	r3, [r4, #12]
 8006458:	0598      	lsls	r0, r3, #22
 800645a:	d402      	bmi.n	8006462 <_puts_r+0x36>
 800645c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800645e:	f7ff fefa 	bl	8006256 <__retarget_lock_acquire_recursive>
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	0719      	lsls	r1, r3, #28
 8006466:	d51d      	bpl.n	80064a4 <_puts_r+0x78>
 8006468:	6923      	ldr	r3, [r4, #16]
 800646a:	b1db      	cbz	r3, 80064a4 <_puts_r+0x78>
 800646c:	3e01      	subs	r6, #1
 800646e:	68a3      	ldr	r3, [r4, #8]
 8006470:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006474:	3b01      	subs	r3, #1
 8006476:	60a3      	str	r3, [r4, #8]
 8006478:	bb39      	cbnz	r1, 80064ca <_puts_r+0x9e>
 800647a:	2b00      	cmp	r3, #0
 800647c:	da38      	bge.n	80064f0 <_puts_r+0xc4>
 800647e:	4622      	mov	r2, r4
 8006480:	210a      	movs	r1, #10
 8006482:	4628      	mov	r0, r5
 8006484:	f000 f8bc 	bl	8006600 <__swbuf_r>
 8006488:	3001      	adds	r0, #1
 800648a:	d011      	beq.n	80064b0 <_puts_r+0x84>
 800648c:	250a      	movs	r5, #10
 800648e:	e011      	b.n	80064b4 <_puts_r+0x88>
 8006490:	4b1b      	ldr	r3, [pc, #108]	; (8006500 <_puts_r+0xd4>)
 8006492:	429c      	cmp	r4, r3
 8006494:	d101      	bne.n	800649a <_puts_r+0x6e>
 8006496:	68ac      	ldr	r4, [r5, #8]
 8006498:	e7da      	b.n	8006450 <_puts_r+0x24>
 800649a:	4b1a      	ldr	r3, [pc, #104]	; (8006504 <_puts_r+0xd8>)
 800649c:	429c      	cmp	r4, r3
 800649e:	bf08      	it	eq
 80064a0:	68ec      	ldreq	r4, [r5, #12]
 80064a2:	e7d5      	b.n	8006450 <_puts_r+0x24>
 80064a4:	4621      	mov	r1, r4
 80064a6:	4628      	mov	r0, r5
 80064a8:	f000 f90e 	bl	80066c8 <__swsetup_r>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d0dd      	beq.n	800646c <_puts_r+0x40>
 80064b0:	f04f 35ff 	mov.w	r5, #4294967295
 80064b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064b6:	07da      	lsls	r2, r3, #31
 80064b8:	d405      	bmi.n	80064c6 <_puts_r+0x9a>
 80064ba:	89a3      	ldrh	r3, [r4, #12]
 80064bc:	059b      	lsls	r3, r3, #22
 80064be:	d402      	bmi.n	80064c6 <_puts_r+0x9a>
 80064c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064c2:	f7ff fec9 	bl	8006258 <__retarget_lock_release_recursive>
 80064c6:	4628      	mov	r0, r5
 80064c8:	bd70      	pop	{r4, r5, r6, pc}
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	da04      	bge.n	80064d8 <_puts_r+0xac>
 80064ce:	69a2      	ldr	r2, [r4, #24]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	dc06      	bgt.n	80064e2 <_puts_r+0xb6>
 80064d4:	290a      	cmp	r1, #10
 80064d6:	d004      	beq.n	80064e2 <_puts_r+0xb6>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	6022      	str	r2, [r4, #0]
 80064de:	7019      	strb	r1, [r3, #0]
 80064e0:	e7c5      	b.n	800646e <_puts_r+0x42>
 80064e2:	4622      	mov	r2, r4
 80064e4:	4628      	mov	r0, r5
 80064e6:	f000 f88b 	bl	8006600 <__swbuf_r>
 80064ea:	3001      	adds	r0, #1
 80064ec:	d1bf      	bne.n	800646e <_puts_r+0x42>
 80064ee:	e7df      	b.n	80064b0 <_puts_r+0x84>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	250a      	movs	r5, #10
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	6022      	str	r2, [r4, #0]
 80064f8:	701d      	strb	r5, [r3, #0]
 80064fa:	e7db      	b.n	80064b4 <_puts_r+0x88>
 80064fc:	080073e8 	.word	0x080073e8
 8006500:	08007408 	.word	0x08007408
 8006504:	080073c8 	.word	0x080073c8

08006508 <puts>:
 8006508:	4b02      	ldr	r3, [pc, #8]	; (8006514 <puts+0xc>)
 800650a:	4601      	mov	r1, r0
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	f7ff bf8d 	b.w	800642c <_puts_r>
 8006512:	bf00      	nop
 8006514:	20000010 	.word	0x20000010

08006518 <_sbrk_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	4d06      	ldr	r5, [pc, #24]	; (8006534 <_sbrk_r+0x1c>)
 800651c:	2300      	movs	r3, #0
 800651e:	4604      	mov	r4, r0
 8006520:	4608      	mov	r0, r1
 8006522:	602b      	str	r3, [r5, #0]
 8006524:	f7fa fb7a 	bl	8000c1c <_sbrk>
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	d102      	bne.n	8006532 <_sbrk_r+0x1a>
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	b103      	cbz	r3, 8006532 <_sbrk_r+0x1a>
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	20004e6c 	.word	0x20004e6c

08006538 <siprintf>:
 8006538:	b40e      	push	{r1, r2, r3}
 800653a:	b500      	push	{lr}
 800653c:	b09c      	sub	sp, #112	; 0x70
 800653e:	ab1d      	add	r3, sp, #116	; 0x74
 8006540:	9002      	str	r0, [sp, #8]
 8006542:	9006      	str	r0, [sp, #24]
 8006544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006548:	4809      	ldr	r0, [pc, #36]	; (8006570 <siprintf+0x38>)
 800654a:	9107      	str	r1, [sp, #28]
 800654c:	9104      	str	r1, [sp, #16]
 800654e:	4909      	ldr	r1, [pc, #36]	; (8006574 <siprintf+0x3c>)
 8006550:	f853 2b04 	ldr.w	r2, [r3], #4
 8006554:	9105      	str	r1, [sp, #20]
 8006556:	6800      	ldr	r0, [r0, #0]
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	a902      	add	r1, sp, #8
 800655c:	f000 fa10 	bl	8006980 <_svfiprintf_r>
 8006560:	9b02      	ldr	r3, [sp, #8]
 8006562:	2200      	movs	r2, #0
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	b01c      	add	sp, #112	; 0x70
 8006568:	f85d eb04 	ldr.w	lr, [sp], #4
 800656c:	b003      	add	sp, #12
 800656e:	4770      	bx	lr
 8006570:	20000010 	.word	0x20000010
 8006574:	ffff0208 	.word	0xffff0208

08006578 <__sread>:
 8006578:	b510      	push	{r4, lr}
 800657a:	460c      	mov	r4, r1
 800657c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006580:	f000 fdec 	bl	800715c <_read_r>
 8006584:	2800      	cmp	r0, #0
 8006586:	bfab      	itete	ge
 8006588:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800658a:	89a3      	ldrhlt	r3, [r4, #12]
 800658c:	181b      	addge	r3, r3, r0
 800658e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006592:	bfac      	ite	ge
 8006594:	6563      	strge	r3, [r4, #84]	; 0x54
 8006596:	81a3      	strhlt	r3, [r4, #12]
 8006598:	bd10      	pop	{r4, pc}

0800659a <__swrite>:
 800659a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800659e:	461f      	mov	r7, r3
 80065a0:	898b      	ldrh	r3, [r1, #12]
 80065a2:	05db      	lsls	r3, r3, #23
 80065a4:	4605      	mov	r5, r0
 80065a6:	460c      	mov	r4, r1
 80065a8:	4616      	mov	r6, r2
 80065aa:	d505      	bpl.n	80065b8 <__swrite+0x1e>
 80065ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b0:	2302      	movs	r3, #2
 80065b2:	2200      	movs	r2, #0
 80065b4:	f000 f906 	bl	80067c4 <_lseek_r>
 80065b8:	89a3      	ldrh	r3, [r4, #12]
 80065ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065c2:	81a3      	strh	r3, [r4, #12]
 80065c4:	4632      	mov	r2, r6
 80065c6:	463b      	mov	r3, r7
 80065c8:	4628      	mov	r0, r5
 80065ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065ce:	f000 b869 	b.w	80066a4 <_write_r>

080065d2 <__sseek>:
 80065d2:	b510      	push	{r4, lr}
 80065d4:	460c      	mov	r4, r1
 80065d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065da:	f000 f8f3 	bl	80067c4 <_lseek_r>
 80065de:	1c43      	adds	r3, r0, #1
 80065e0:	89a3      	ldrh	r3, [r4, #12]
 80065e2:	bf15      	itete	ne
 80065e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80065e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065ee:	81a3      	strheq	r3, [r4, #12]
 80065f0:	bf18      	it	ne
 80065f2:	81a3      	strhne	r3, [r4, #12]
 80065f4:	bd10      	pop	{r4, pc}

080065f6 <__sclose>:
 80065f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065fa:	f000 b8d3 	b.w	80067a4 <_close_r>
	...

08006600 <__swbuf_r>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	460e      	mov	r6, r1
 8006604:	4614      	mov	r4, r2
 8006606:	4605      	mov	r5, r0
 8006608:	b118      	cbz	r0, 8006612 <__swbuf_r+0x12>
 800660a:	6983      	ldr	r3, [r0, #24]
 800660c:	b90b      	cbnz	r3, 8006612 <__swbuf_r+0x12>
 800660e:	f7ff fd5f 	bl	80060d0 <__sinit>
 8006612:	4b21      	ldr	r3, [pc, #132]	; (8006698 <__swbuf_r+0x98>)
 8006614:	429c      	cmp	r4, r3
 8006616:	d12b      	bne.n	8006670 <__swbuf_r+0x70>
 8006618:	686c      	ldr	r4, [r5, #4]
 800661a:	69a3      	ldr	r3, [r4, #24]
 800661c:	60a3      	str	r3, [r4, #8]
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	071a      	lsls	r2, r3, #28
 8006622:	d52f      	bpl.n	8006684 <__swbuf_r+0x84>
 8006624:	6923      	ldr	r3, [r4, #16]
 8006626:	b36b      	cbz	r3, 8006684 <__swbuf_r+0x84>
 8006628:	6923      	ldr	r3, [r4, #16]
 800662a:	6820      	ldr	r0, [r4, #0]
 800662c:	1ac0      	subs	r0, r0, r3
 800662e:	6963      	ldr	r3, [r4, #20]
 8006630:	b2f6      	uxtb	r6, r6
 8006632:	4283      	cmp	r3, r0
 8006634:	4637      	mov	r7, r6
 8006636:	dc04      	bgt.n	8006642 <__swbuf_r+0x42>
 8006638:	4621      	mov	r1, r4
 800663a:	4628      	mov	r0, r5
 800663c:	f7ff fca2 	bl	8005f84 <_fflush_r>
 8006640:	bb30      	cbnz	r0, 8006690 <__swbuf_r+0x90>
 8006642:	68a3      	ldr	r3, [r4, #8]
 8006644:	3b01      	subs	r3, #1
 8006646:	60a3      	str	r3, [r4, #8]
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	6022      	str	r2, [r4, #0]
 800664e:	701e      	strb	r6, [r3, #0]
 8006650:	6963      	ldr	r3, [r4, #20]
 8006652:	3001      	adds	r0, #1
 8006654:	4283      	cmp	r3, r0
 8006656:	d004      	beq.n	8006662 <__swbuf_r+0x62>
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	07db      	lsls	r3, r3, #31
 800665c:	d506      	bpl.n	800666c <__swbuf_r+0x6c>
 800665e:	2e0a      	cmp	r6, #10
 8006660:	d104      	bne.n	800666c <__swbuf_r+0x6c>
 8006662:	4621      	mov	r1, r4
 8006664:	4628      	mov	r0, r5
 8006666:	f7ff fc8d 	bl	8005f84 <_fflush_r>
 800666a:	b988      	cbnz	r0, 8006690 <__swbuf_r+0x90>
 800666c:	4638      	mov	r0, r7
 800666e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006670:	4b0a      	ldr	r3, [pc, #40]	; (800669c <__swbuf_r+0x9c>)
 8006672:	429c      	cmp	r4, r3
 8006674:	d101      	bne.n	800667a <__swbuf_r+0x7a>
 8006676:	68ac      	ldr	r4, [r5, #8]
 8006678:	e7cf      	b.n	800661a <__swbuf_r+0x1a>
 800667a:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <__swbuf_r+0xa0>)
 800667c:	429c      	cmp	r4, r3
 800667e:	bf08      	it	eq
 8006680:	68ec      	ldreq	r4, [r5, #12]
 8006682:	e7ca      	b.n	800661a <__swbuf_r+0x1a>
 8006684:	4621      	mov	r1, r4
 8006686:	4628      	mov	r0, r5
 8006688:	f000 f81e 	bl	80066c8 <__swsetup_r>
 800668c:	2800      	cmp	r0, #0
 800668e:	d0cb      	beq.n	8006628 <__swbuf_r+0x28>
 8006690:	f04f 37ff 	mov.w	r7, #4294967295
 8006694:	e7ea      	b.n	800666c <__swbuf_r+0x6c>
 8006696:	bf00      	nop
 8006698:	080073e8 	.word	0x080073e8
 800669c:	08007408 	.word	0x08007408
 80066a0:	080073c8 	.word	0x080073c8

080066a4 <_write_r>:
 80066a4:	b538      	push	{r3, r4, r5, lr}
 80066a6:	4d07      	ldr	r5, [pc, #28]	; (80066c4 <_write_r+0x20>)
 80066a8:	4604      	mov	r4, r0
 80066aa:	4608      	mov	r0, r1
 80066ac:	4611      	mov	r1, r2
 80066ae:	2200      	movs	r2, #0
 80066b0:	602a      	str	r2, [r5, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	f7fa ffe8 	bl	8001688 <_write>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d102      	bne.n	80066c2 <_write_r+0x1e>
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	b103      	cbz	r3, 80066c2 <_write_r+0x1e>
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	bd38      	pop	{r3, r4, r5, pc}
 80066c4:	20004e6c 	.word	0x20004e6c

080066c8 <__swsetup_r>:
 80066c8:	4b32      	ldr	r3, [pc, #200]	; (8006794 <__swsetup_r+0xcc>)
 80066ca:	b570      	push	{r4, r5, r6, lr}
 80066cc:	681d      	ldr	r5, [r3, #0]
 80066ce:	4606      	mov	r6, r0
 80066d0:	460c      	mov	r4, r1
 80066d2:	b125      	cbz	r5, 80066de <__swsetup_r+0x16>
 80066d4:	69ab      	ldr	r3, [r5, #24]
 80066d6:	b913      	cbnz	r3, 80066de <__swsetup_r+0x16>
 80066d8:	4628      	mov	r0, r5
 80066da:	f7ff fcf9 	bl	80060d0 <__sinit>
 80066de:	4b2e      	ldr	r3, [pc, #184]	; (8006798 <__swsetup_r+0xd0>)
 80066e0:	429c      	cmp	r4, r3
 80066e2:	d10f      	bne.n	8006704 <__swsetup_r+0x3c>
 80066e4:	686c      	ldr	r4, [r5, #4]
 80066e6:	89a3      	ldrh	r3, [r4, #12]
 80066e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066ec:	0719      	lsls	r1, r3, #28
 80066ee:	d42c      	bmi.n	800674a <__swsetup_r+0x82>
 80066f0:	06dd      	lsls	r5, r3, #27
 80066f2:	d411      	bmi.n	8006718 <__swsetup_r+0x50>
 80066f4:	2309      	movs	r3, #9
 80066f6:	6033      	str	r3, [r6, #0]
 80066f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066fc:	81a3      	strh	r3, [r4, #12]
 80066fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006702:	e03e      	b.n	8006782 <__swsetup_r+0xba>
 8006704:	4b25      	ldr	r3, [pc, #148]	; (800679c <__swsetup_r+0xd4>)
 8006706:	429c      	cmp	r4, r3
 8006708:	d101      	bne.n	800670e <__swsetup_r+0x46>
 800670a:	68ac      	ldr	r4, [r5, #8]
 800670c:	e7eb      	b.n	80066e6 <__swsetup_r+0x1e>
 800670e:	4b24      	ldr	r3, [pc, #144]	; (80067a0 <__swsetup_r+0xd8>)
 8006710:	429c      	cmp	r4, r3
 8006712:	bf08      	it	eq
 8006714:	68ec      	ldreq	r4, [r5, #12]
 8006716:	e7e6      	b.n	80066e6 <__swsetup_r+0x1e>
 8006718:	0758      	lsls	r0, r3, #29
 800671a:	d512      	bpl.n	8006742 <__swsetup_r+0x7a>
 800671c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800671e:	b141      	cbz	r1, 8006732 <__swsetup_r+0x6a>
 8006720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006724:	4299      	cmp	r1, r3
 8006726:	d002      	beq.n	800672e <__swsetup_r+0x66>
 8006728:	4630      	mov	r0, r6
 800672a:	f7ff fdbd 	bl	80062a8 <_free_r>
 800672e:	2300      	movs	r3, #0
 8006730:	6363      	str	r3, [r4, #52]	; 0x34
 8006732:	89a3      	ldrh	r3, [r4, #12]
 8006734:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006738:	81a3      	strh	r3, [r4, #12]
 800673a:	2300      	movs	r3, #0
 800673c:	6063      	str	r3, [r4, #4]
 800673e:	6923      	ldr	r3, [r4, #16]
 8006740:	6023      	str	r3, [r4, #0]
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	f043 0308 	orr.w	r3, r3, #8
 8006748:	81a3      	strh	r3, [r4, #12]
 800674a:	6923      	ldr	r3, [r4, #16]
 800674c:	b94b      	cbnz	r3, 8006762 <__swsetup_r+0x9a>
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006758:	d003      	beq.n	8006762 <__swsetup_r+0x9a>
 800675a:	4621      	mov	r1, r4
 800675c:	4630      	mov	r0, r6
 800675e:	f000 f867 	bl	8006830 <__smakebuf_r>
 8006762:	89a0      	ldrh	r0, [r4, #12]
 8006764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006768:	f010 0301 	ands.w	r3, r0, #1
 800676c:	d00a      	beq.n	8006784 <__swsetup_r+0xbc>
 800676e:	2300      	movs	r3, #0
 8006770:	60a3      	str	r3, [r4, #8]
 8006772:	6963      	ldr	r3, [r4, #20]
 8006774:	425b      	negs	r3, r3
 8006776:	61a3      	str	r3, [r4, #24]
 8006778:	6923      	ldr	r3, [r4, #16]
 800677a:	b943      	cbnz	r3, 800678e <__swsetup_r+0xc6>
 800677c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006780:	d1ba      	bne.n	80066f8 <__swsetup_r+0x30>
 8006782:	bd70      	pop	{r4, r5, r6, pc}
 8006784:	0781      	lsls	r1, r0, #30
 8006786:	bf58      	it	pl
 8006788:	6963      	ldrpl	r3, [r4, #20]
 800678a:	60a3      	str	r3, [r4, #8]
 800678c:	e7f4      	b.n	8006778 <__swsetup_r+0xb0>
 800678e:	2000      	movs	r0, #0
 8006790:	e7f7      	b.n	8006782 <__swsetup_r+0xba>
 8006792:	bf00      	nop
 8006794:	20000010 	.word	0x20000010
 8006798:	080073e8 	.word	0x080073e8
 800679c:	08007408 	.word	0x08007408
 80067a0:	080073c8 	.word	0x080073c8

080067a4 <_close_r>:
 80067a4:	b538      	push	{r3, r4, r5, lr}
 80067a6:	4d06      	ldr	r5, [pc, #24]	; (80067c0 <_close_r+0x1c>)
 80067a8:	2300      	movs	r3, #0
 80067aa:	4604      	mov	r4, r0
 80067ac:	4608      	mov	r0, r1
 80067ae:	602b      	str	r3, [r5, #0]
 80067b0:	f7fa f9ff 	bl	8000bb2 <_close>
 80067b4:	1c43      	adds	r3, r0, #1
 80067b6:	d102      	bne.n	80067be <_close_r+0x1a>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	b103      	cbz	r3, 80067be <_close_r+0x1a>
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	bd38      	pop	{r3, r4, r5, pc}
 80067c0:	20004e6c 	.word	0x20004e6c

080067c4 <_lseek_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	4d07      	ldr	r5, [pc, #28]	; (80067e4 <_lseek_r+0x20>)
 80067c8:	4604      	mov	r4, r0
 80067ca:	4608      	mov	r0, r1
 80067cc:	4611      	mov	r1, r2
 80067ce:	2200      	movs	r2, #0
 80067d0:	602a      	str	r2, [r5, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f7fa fa14 	bl	8000c00 <_lseek>
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	d102      	bne.n	80067e2 <_lseek_r+0x1e>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	b103      	cbz	r3, 80067e2 <_lseek_r+0x1e>
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	20004e6c 	.word	0x20004e6c

080067e8 <__swhatbuf_r>:
 80067e8:	b570      	push	{r4, r5, r6, lr}
 80067ea:	460e      	mov	r6, r1
 80067ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f0:	2900      	cmp	r1, #0
 80067f2:	b096      	sub	sp, #88	; 0x58
 80067f4:	4614      	mov	r4, r2
 80067f6:	461d      	mov	r5, r3
 80067f8:	da07      	bge.n	800680a <__swhatbuf_r+0x22>
 80067fa:	2300      	movs	r3, #0
 80067fc:	602b      	str	r3, [r5, #0]
 80067fe:	89b3      	ldrh	r3, [r6, #12]
 8006800:	061a      	lsls	r2, r3, #24
 8006802:	d410      	bmi.n	8006826 <__swhatbuf_r+0x3e>
 8006804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006808:	e00e      	b.n	8006828 <__swhatbuf_r+0x40>
 800680a:	466a      	mov	r2, sp
 800680c:	f000 fcb8 	bl	8007180 <_fstat_r>
 8006810:	2800      	cmp	r0, #0
 8006812:	dbf2      	blt.n	80067fa <__swhatbuf_r+0x12>
 8006814:	9a01      	ldr	r2, [sp, #4]
 8006816:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800681a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800681e:	425a      	negs	r2, r3
 8006820:	415a      	adcs	r2, r3
 8006822:	602a      	str	r2, [r5, #0]
 8006824:	e7ee      	b.n	8006804 <__swhatbuf_r+0x1c>
 8006826:	2340      	movs	r3, #64	; 0x40
 8006828:	2000      	movs	r0, #0
 800682a:	6023      	str	r3, [r4, #0]
 800682c:	b016      	add	sp, #88	; 0x58
 800682e:	bd70      	pop	{r4, r5, r6, pc}

08006830 <__smakebuf_r>:
 8006830:	898b      	ldrh	r3, [r1, #12]
 8006832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006834:	079d      	lsls	r5, r3, #30
 8006836:	4606      	mov	r6, r0
 8006838:	460c      	mov	r4, r1
 800683a:	d507      	bpl.n	800684c <__smakebuf_r+0x1c>
 800683c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006840:	6023      	str	r3, [r4, #0]
 8006842:	6123      	str	r3, [r4, #16]
 8006844:	2301      	movs	r3, #1
 8006846:	6163      	str	r3, [r4, #20]
 8006848:	b002      	add	sp, #8
 800684a:	bd70      	pop	{r4, r5, r6, pc}
 800684c:	ab01      	add	r3, sp, #4
 800684e:	466a      	mov	r2, sp
 8006850:	f7ff ffca 	bl	80067e8 <__swhatbuf_r>
 8006854:	9900      	ldr	r1, [sp, #0]
 8006856:	4605      	mov	r5, r0
 8006858:	4630      	mov	r0, r6
 800685a:	f7ff fd75 	bl	8006348 <_malloc_r>
 800685e:	b948      	cbnz	r0, 8006874 <__smakebuf_r+0x44>
 8006860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006864:	059a      	lsls	r2, r3, #22
 8006866:	d4ef      	bmi.n	8006848 <__smakebuf_r+0x18>
 8006868:	f023 0303 	bic.w	r3, r3, #3
 800686c:	f043 0302 	orr.w	r3, r3, #2
 8006870:	81a3      	strh	r3, [r4, #12]
 8006872:	e7e3      	b.n	800683c <__smakebuf_r+0xc>
 8006874:	4b0d      	ldr	r3, [pc, #52]	; (80068ac <__smakebuf_r+0x7c>)
 8006876:	62b3      	str	r3, [r6, #40]	; 0x28
 8006878:	89a3      	ldrh	r3, [r4, #12]
 800687a:	6020      	str	r0, [r4, #0]
 800687c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006880:	81a3      	strh	r3, [r4, #12]
 8006882:	9b00      	ldr	r3, [sp, #0]
 8006884:	6163      	str	r3, [r4, #20]
 8006886:	9b01      	ldr	r3, [sp, #4]
 8006888:	6120      	str	r0, [r4, #16]
 800688a:	b15b      	cbz	r3, 80068a4 <__smakebuf_r+0x74>
 800688c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006890:	4630      	mov	r0, r6
 8006892:	f000 fc87 	bl	80071a4 <_isatty_r>
 8006896:	b128      	cbz	r0, 80068a4 <__smakebuf_r+0x74>
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	f023 0303 	bic.w	r3, r3, #3
 800689e:	f043 0301 	orr.w	r3, r3, #1
 80068a2:	81a3      	strh	r3, [r4, #12]
 80068a4:	89a0      	ldrh	r0, [r4, #12]
 80068a6:	4305      	orrs	r5, r0
 80068a8:	81a5      	strh	r5, [r4, #12]
 80068aa:	e7cd      	b.n	8006848 <__smakebuf_r+0x18>
 80068ac:	08006069 	.word	0x08006069

080068b0 <__malloc_lock>:
 80068b0:	4801      	ldr	r0, [pc, #4]	; (80068b8 <__malloc_lock+0x8>)
 80068b2:	f7ff bcd0 	b.w	8006256 <__retarget_lock_acquire_recursive>
 80068b6:	bf00      	nop
 80068b8:	20004e64 	.word	0x20004e64

080068bc <__malloc_unlock>:
 80068bc:	4801      	ldr	r0, [pc, #4]	; (80068c4 <__malloc_unlock+0x8>)
 80068be:	f7ff bccb 	b.w	8006258 <__retarget_lock_release_recursive>
 80068c2:	bf00      	nop
 80068c4:	20004e64 	.word	0x20004e64

080068c8 <__ssputs_r>:
 80068c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068cc:	688e      	ldr	r6, [r1, #8]
 80068ce:	429e      	cmp	r6, r3
 80068d0:	4682      	mov	sl, r0
 80068d2:	460c      	mov	r4, r1
 80068d4:	4690      	mov	r8, r2
 80068d6:	461f      	mov	r7, r3
 80068d8:	d838      	bhi.n	800694c <__ssputs_r+0x84>
 80068da:	898a      	ldrh	r2, [r1, #12]
 80068dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068e0:	d032      	beq.n	8006948 <__ssputs_r+0x80>
 80068e2:	6825      	ldr	r5, [r4, #0]
 80068e4:	6909      	ldr	r1, [r1, #16]
 80068e6:	eba5 0901 	sub.w	r9, r5, r1
 80068ea:	6965      	ldr	r5, [r4, #20]
 80068ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068f4:	3301      	adds	r3, #1
 80068f6:	444b      	add	r3, r9
 80068f8:	106d      	asrs	r5, r5, #1
 80068fa:	429d      	cmp	r5, r3
 80068fc:	bf38      	it	cc
 80068fe:	461d      	movcc	r5, r3
 8006900:	0553      	lsls	r3, r2, #21
 8006902:	d531      	bpl.n	8006968 <__ssputs_r+0xa0>
 8006904:	4629      	mov	r1, r5
 8006906:	f7ff fd1f 	bl	8006348 <_malloc_r>
 800690a:	4606      	mov	r6, r0
 800690c:	b950      	cbnz	r0, 8006924 <__ssputs_r+0x5c>
 800690e:	230c      	movs	r3, #12
 8006910:	f8ca 3000 	str.w	r3, [sl]
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800691a:	81a3      	strh	r3, [r4, #12]
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
 8006920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006924:	6921      	ldr	r1, [r4, #16]
 8006926:	464a      	mov	r2, r9
 8006928:	f7ff fca8 	bl	800627c <memcpy>
 800692c:	89a3      	ldrh	r3, [r4, #12]
 800692e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006936:	81a3      	strh	r3, [r4, #12]
 8006938:	6126      	str	r6, [r4, #16]
 800693a:	6165      	str	r5, [r4, #20]
 800693c:	444e      	add	r6, r9
 800693e:	eba5 0509 	sub.w	r5, r5, r9
 8006942:	6026      	str	r6, [r4, #0]
 8006944:	60a5      	str	r5, [r4, #8]
 8006946:	463e      	mov	r6, r7
 8006948:	42be      	cmp	r6, r7
 800694a:	d900      	bls.n	800694e <__ssputs_r+0x86>
 800694c:	463e      	mov	r6, r7
 800694e:	4632      	mov	r2, r6
 8006950:	6820      	ldr	r0, [r4, #0]
 8006952:	4641      	mov	r1, r8
 8006954:	f000 fc36 	bl	80071c4 <memmove>
 8006958:	68a3      	ldr	r3, [r4, #8]
 800695a:	6822      	ldr	r2, [r4, #0]
 800695c:	1b9b      	subs	r3, r3, r6
 800695e:	4432      	add	r2, r6
 8006960:	60a3      	str	r3, [r4, #8]
 8006962:	6022      	str	r2, [r4, #0]
 8006964:	2000      	movs	r0, #0
 8006966:	e7db      	b.n	8006920 <__ssputs_r+0x58>
 8006968:	462a      	mov	r2, r5
 800696a:	f000 fc45 	bl	80071f8 <_realloc_r>
 800696e:	4606      	mov	r6, r0
 8006970:	2800      	cmp	r0, #0
 8006972:	d1e1      	bne.n	8006938 <__ssputs_r+0x70>
 8006974:	6921      	ldr	r1, [r4, #16]
 8006976:	4650      	mov	r0, sl
 8006978:	f7ff fc96 	bl	80062a8 <_free_r>
 800697c:	e7c7      	b.n	800690e <__ssputs_r+0x46>
	...

08006980 <_svfiprintf_r>:
 8006980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006984:	4698      	mov	r8, r3
 8006986:	898b      	ldrh	r3, [r1, #12]
 8006988:	061b      	lsls	r3, r3, #24
 800698a:	b09d      	sub	sp, #116	; 0x74
 800698c:	4607      	mov	r7, r0
 800698e:	460d      	mov	r5, r1
 8006990:	4614      	mov	r4, r2
 8006992:	d50e      	bpl.n	80069b2 <_svfiprintf_r+0x32>
 8006994:	690b      	ldr	r3, [r1, #16]
 8006996:	b963      	cbnz	r3, 80069b2 <_svfiprintf_r+0x32>
 8006998:	2140      	movs	r1, #64	; 0x40
 800699a:	f7ff fcd5 	bl	8006348 <_malloc_r>
 800699e:	6028      	str	r0, [r5, #0]
 80069a0:	6128      	str	r0, [r5, #16]
 80069a2:	b920      	cbnz	r0, 80069ae <_svfiprintf_r+0x2e>
 80069a4:	230c      	movs	r3, #12
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ac:	e0d1      	b.n	8006b52 <_svfiprintf_r+0x1d2>
 80069ae:	2340      	movs	r3, #64	; 0x40
 80069b0:	616b      	str	r3, [r5, #20]
 80069b2:	2300      	movs	r3, #0
 80069b4:	9309      	str	r3, [sp, #36]	; 0x24
 80069b6:	2320      	movs	r3, #32
 80069b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80069c0:	2330      	movs	r3, #48	; 0x30
 80069c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006b6c <_svfiprintf_r+0x1ec>
 80069c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069ca:	f04f 0901 	mov.w	r9, #1
 80069ce:	4623      	mov	r3, r4
 80069d0:	469a      	mov	sl, r3
 80069d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069d6:	b10a      	cbz	r2, 80069dc <_svfiprintf_r+0x5c>
 80069d8:	2a25      	cmp	r2, #37	; 0x25
 80069da:	d1f9      	bne.n	80069d0 <_svfiprintf_r+0x50>
 80069dc:	ebba 0b04 	subs.w	fp, sl, r4
 80069e0:	d00b      	beq.n	80069fa <_svfiprintf_r+0x7a>
 80069e2:	465b      	mov	r3, fp
 80069e4:	4622      	mov	r2, r4
 80069e6:	4629      	mov	r1, r5
 80069e8:	4638      	mov	r0, r7
 80069ea:	f7ff ff6d 	bl	80068c8 <__ssputs_r>
 80069ee:	3001      	adds	r0, #1
 80069f0:	f000 80aa 	beq.w	8006b48 <_svfiprintf_r+0x1c8>
 80069f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069f6:	445a      	add	r2, fp
 80069f8:	9209      	str	r2, [sp, #36]	; 0x24
 80069fa:	f89a 3000 	ldrb.w	r3, [sl]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 80a2 	beq.w	8006b48 <_svfiprintf_r+0x1c8>
 8006a04:	2300      	movs	r3, #0
 8006a06:	f04f 32ff 	mov.w	r2, #4294967295
 8006a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a0e:	f10a 0a01 	add.w	sl, sl, #1
 8006a12:	9304      	str	r3, [sp, #16]
 8006a14:	9307      	str	r3, [sp, #28]
 8006a16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a1a:	931a      	str	r3, [sp, #104]	; 0x68
 8006a1c:	4654      	mov	r4, sl
 8006a1e:	2205      	movs	r2, #5
 8006a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a24:	4851      	ldr	r0, [pc, #324]	; (8006b6c <_svfiprintf_r+0x1ec>)
 8006a26:	f7f9 fbe3 	bl	80001f0 <memchr>
 8006a2a:	9a04      	ldr	r2, [sp, #16]
 8006a2c:	b9d8      	cbnz	r0, 8006a66 <_svfiprintf_r+0xe6>
 8006a2e:	06d0      	lsls	r0, r2, #27
 8006a30:	bf44      	itt	mi
 8006a32:	2320      	movmi	r3, #32
 8006a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a38:	0711      	lsls	r1, r2, #28
 8006a3a:	bf44      	itt	mi
 8006a3c:	232b      	movmi	r3, #43	; 0x2b
 8006a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a42:	f89a 3000 	ldrb.w	r3, [sl]
 8006a46:	2b2a      	cmp	r3, #42	; 0x2a
 8006a48:	d015      	beq.n	8006a76 <_svfiprintf_r+0xf6>
 8006a4a:	9a07      	ldr	r2, [sp, #28]
 8006a4c:	4654      	mov	r4, sl
 8006a4e:	2000      	movs	r0, #0
 8006a50:	f04f 0c0a 	mov.w	ip, #10
 8006a54:	4621      	mov	r1, r4
 8006a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a5a:	3b30      	subs	r3, #48	; 0x30
 8006a5c:	2b09      	cmp	r3, #9
 8006a5e:	d94e      	bls.n	8006afe <_svfiprintf_r+0x17e>
 8006a60:	b1b0      	cbz	r0, 8006a90 <_svfiprintf_r+0x110>
 8006a62:	9207      	str	r2, [sp, #28]
 8006a64:	e014      	b.n	8006a90 <_svfiprintf_r+0x110>
 8006a66:	eba0 0308 	sub.w	r3, r0, r8
 8006a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	9304      	str	r3, [sp, #16]
 8006a72:	46a2      	mov	sl, r4
 8006a74:	e7d2      	b.n	8006a1c <_svfiprintf_r+0x9c>
 8006a76:	9b03      	ldr	r3, [sp, #12]
 8006a78:	1d19      	adds	r1, r3, #4
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	9103      	str	r1, [sp, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	bfbb      	ittet	lt
 8006a82:	425b      	neglt	r3, r3
 8006a84:	f042 0202 	orrlt.w	r2, r2, #2
 8006a88:	9307      	strge	r3, [sp, #28]
 8006a8a:	9307      	strlt	r3, [sp, #28]
 8006a8c:	bfb8      	it	lt
 8006a8e:	9204      	strlt	r2, [sp, #16]
 8006a90:	7823      	ldrb	r3, [r4, #0]
 8006a92:	2b2e      	cmp	r3, #46	; 0x2e
 8006a94:	d10c      	bne.n	8006ab0 <_svfiprintf_r+0x130>
 8006a96:	7863      	ldrb	r3, [r4, #1]
 8006a98:	2b2a      	cmp	r3, #42	; 0x2a
 8006a9a:	d135      	bne.n	8006b08 <_svfiprintf_r+0x188>
 8006a9c:	9b03      	ldr	r3, [sp, #12]
 8006a9e:	1d1a      	adds	r2, r3, #4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	9203      	str	r2, [sp, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bfb8      	it	lt
 8006aa8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006aac:	3402      	adds	r4, #2
 8006aae:	9305      	str	r3, [sp, #20]
 8006ab0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006b7c <_svfiprintf_r+0x1fc>
 8006ab4:	7821      	ldrb	r1, [r4, #0]
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	4650      	mov	r0, sl
 8006aba:	f7f9 fb99 	bl	80001f0 <memchr>
 8006abe:	b140      	cbz	r0, 8006ad2 <_svfiprintf_r+0x152>
 8006ac0:	2340      	movs	r3, #64	; 0x40
 8006ac2:	eba0 000a 	sub.w	r0, r0, sl
 8006ac6:	fa03 f000 	lsl.w	r0, r3, r0
 8006aca:	9b04      	ldr	r3, [sp, #16]
 8006acc:	4303      	orrs	r3, r0
 8006ace:	3401      	adds	r4, #1
 8006ad0:	9304      	str	r3, [sp, #16]
 8006ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad6:	4826      	ldr	r0, [pc, #152]	; (8006b70 <_svfiprintf_r+0x1f0>)
 8006ad8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006adc:	2206      	movs	r2, #6
 8006ade:	f7f9 fb87 	bl	80001f0 <memchr>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d038      	beq.n	8006b58 <_svfiprintf_r+0x1d8>
 8006ae6:	4b23      	ldr	r3, [pc, #140]	; (8006b74 <_svfiprintf_r+0x1f4>)
 8006ae8:	bb1b      	cbnz	r3, 8006b32 <_svfiprintf_r+0x1b2>
 8006aea:	9b03      	ldr	r3, [sp, #12]
 8006aec:	3307      	adds	r3, #7
 8006aee:	f023 0307 	bic.w	r3, r3, #7
 8006af2:	3308      	adds	r3, #8
 8006af4:	9303      	str	r3, [sp, #12]
 8006af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af8:	4433      	add	r3, r6
 8006afa:	9309      	str	r3, [sp, #36]	; 0x24
 8006afc:	e767      	b.n	80069ce <_svfiprintf_r+0x4e>
 8006afe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b02:	460c      	mov	r4, r1
 8006b04:	2001      	movs	r0, #1
 8006b06:	e7a5      	b.n	8006a54 <_svfiprintf_r+0xd4>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	3401      	adds	r4, #1
 8006b0c:	9305      	str	r3, [sp, #20]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	f04f 0c0a 	mov.w	ip, #10
 8006b14:	4620      	mov	r0, r4
 8006b16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b1a:	3a30      	subs	r2, #48	; 0x30
 8006b1c:	2a09      	cmp	r2, #9
 8006b1e:	d903      	bls.n	8006b28 <_svfiprintf_r+0x1a8>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0c5      	beq.n	8006ab0 <_svfiprintf_r+0x130>
 8006b24:	9105      	str	r1, [sp, #20]
 8006b26:	e7c3      	b.n	8006ab0 <_svfiprintf_r+0x130>
 8006b28:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e7f0      	b.n	8006b14 <_svfiprintf_r+0x194>
 8006b32:	ab03      	add	r3, sp, #12
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	462a      	mov	r2, r5
 8006b38:	4b0f      	ldr	r3, [pc, #60]	; (8006b78 <_svfiprintf_r+0x1f8>)
 8006b3a:	a904      	add	r1, sp, #16
 8006b3c:	4638      	mov	r0, r7
 8006b3e:	f3af 8000 	nop.w
 8006b42:	1c42      	adds	r2, r0, #1
 8006b44:	4606      	mov	r6, r0
 8006b46:	d1d6      	bne.n	8006af6 <_svfiprintf_r+0x176>
 8006b48:	89ab      	ldrh	r3, [r5, #12]
 8006b4a:	065b      	lsls	r3, r3, #25
 8006b4c:	f53f af2c 	bmi.w	80069a8 <_svfiprintf_r+0x28>
 8006b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b52:	b01d      	add	sp, #116	; 0x74
 8006b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b58:	ab03      	add	r3, sp, #12
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	462a      	mov	r2, r5
 8006b5e:	4b06      	ldr	r3, [pc, #24]	; (8006b78 <_svfiprintf_r+0x1f8>)
 8006b60:	a904      	add	r1, sp, #16
 8006b62:	4638      	mov	r0, r7
 8006b64:	f000 f9d4 	bl	8006f10 <_printf_i>
 8006b68:	e7eb      	b.n	8006b42 <_svfiprintf_r+0x1c2>
 8006b6a:	bf00      	nop
 8006b6c:	0800742c 	.word	0x0800742c
 8006b70:	08007436 	.word	0x08007436
 8006b74:	00000000 	.word	0x00000000
 8006b78:	080068c9 	.word	0x080068c9
 8006b7c:	08007432 	.word	0x08007432

08006b80 <__sfputc_r>:
 8006b80:	6893      	ldr	r3, [r2, #8]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	b410      	push	{r4}
 8006b88:	6093      	str	r3, [r2, #8]
 8006b8a:	da08      	bge.n	8006b9e <__sfputc_r+0x1e>
 8006b8c:	6994      	ldr	r4, [r2, #24]
 8006b8e:	42a3      	cmp	r3, r4
 8006b90:	db01      	blt.n	8006b96 <__sfputc_r+0x16>
 8006b92:	290a      	cmp	r1, #10
 8006b94:	d103      	bne.n	8006b9e <__sfputc_r+0x1e>
 8006b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b9a:	f7ff bd31 	b.w	8006600 <__swbuf_r>
 8006b9e:	6813      	ldr	r3, [r2, #0]
 8006ba0:	1c58      	adds	r0, r3, #1
 8006ba2:	6010      	str	r0, [r2, #0]
 8006ba4:	7019      	strb	r1, [r3, #0]
 8006ba6:	4608      	mov	r0, r1
 8006ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <__sfputs_r>:
 8006bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	460f      	mov	r7, r1
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	18d5      	adds	r5, r2, r3
 8006bb8:	42ac      	cmp	r4, r5
 8006bba:	d101      	bne.n	8006bc0 <__sfputs_r+0x12>
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	e007      	b.n	8006bd0 <__sfputs_r+0x22>
 8006bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bc4:	463a      	mov	r2, r7
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	f7ff ffda 	bl	8006b80 <__sfputc_r>
 8006bcc:	1c43      	adds	r3, r0, #1
 8006bce:	d1f3      	bne.n	8006bb8 <__sfputs_r+0xa>
 8006bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bd4 <_vfiprintf_r>:
 8006bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd8:	460d      	mov	r5, r1
 8006bda:	b09d      	sub	sp, #116	; 0x74
 8006bdc:	4614      	mov	r4, r2
 8006bde:	4698      	mov	r8, r3
 8006be0:	4606      	mov	r6, r0
 8006be2:	b118      	cbz	r0, 8006bec <_vfiprintf_r+0x18>
 8006be4:	6983      	ldr	r3, [r0, #24]
 8006be6:	b90b      	cbnz	r3, 8006bec <_vfiprintf_r+0x18>
 8006be8:	f7ff fa72 	bl	80060d0 <__sinit>
 8006bec:	4b89      	ldr	r3, [pc, #548]	; (8006e14 <_vfiprintf_r+0x240>)
 8006bee:	429d      	cmp	r5, r3
 8006bf0:	d11b      	bne.n	8006c2a <_vfiprintf_r+0x56>
 8006bf2:	6875      	ldr	r5, [r6, #4]
 8006bf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bf6:	07d9      	lsls	r1, r3, #31
 8006bf8:	d405      	bmi.n	8006c06 <_vfiprintf_r+0x32>
 8006bfa:	89ab      	ldrh	r3, [r5, #12]
 8006bfc:	059a      	lsls	r2, r3, #22
 8006bfe:	d402      	bmi.n	8006c06 <_vfiprintf_r+0x32>
 8006c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c02:	f7ff fb28 	bl	8006256 <__retarget_lock_acquire_recursive>
 8006c06:	89ab      	ldrh	r3, [r5, #12]
 8006c08:	071b      	lsls	r3, r3, #28
 8006c0a:	d501      	bpl.n	8006c10 <_vfiprintf_r+0x3c>
 8006c0c:	692b      	ldr	r3, [r5, #16]
 8006c0e:	b9eb      	cbnz	r3, 8006c4c <_vfiprintf_r+0x78>
 8006c10:	4629      	mov	r1, r5
 8006c12:	4630      	mov	r0, r6
 8006c14:	f7ff fd58 	bl	80066c8 <__swsetup_r>
 8006c18:	b1c0      	cbz	r0, 8006c4c <_vfiprintf_r+0x78>
 8006c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c1c:	07dc      	lsls	r4, r3, #31
 8006c1e:	d50e      	bpl.n	8006c3e <_vfiprintf_r+0x6a>
 8006c20:	f04f 30ff 	mov.w	r0, #4294967295
 8006c24:	b01d      	add	sp, #116	; 0x74
 8006c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2a:	4b7b      	ldr	r3, [pc, #492]	; (8006e18 <_vfiprintf_r+0x244>)
 8006c2c:	429d      	cmp	r5, r3
 8006c2e:	d101      	bne.n	8006c34 <_vfiprintf_r+0x60>
 8006c30:	68b5      	ldr	r5, [r6, #8]
 8006c32:	e7df      	b.n	8006bf4 <_vfiprintf_r+0x20>
 8006c34:	4b79      	ldr	r3, [pc, #484]	; (8006e1c <_vfiprintf_r+0x248>)
 8006c36:	429d      	cmp	r5, r3
 8006c38:	bf08      	it	eq
 8006c3a:	68f5      	ldreq	r5, [r6, #12]
 8006c3c:	e7da      	b.n	8006bf4 <_vfiprintf_r+0x20>
 8006c3e:	89ab      	ldrh	r3, [r5, #12]
 8006c40:	0598      	lsls	r0, r3, #22
 8006c42:	d4ed      	bmi.n	8006c20 <_vfiprintf_r+0x4c>
 8006c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c46:	f7ff fb07 	bl	8006258 <__retarget_lock_release_recursive>
 8006c4a:	e7e9      	b.n	8006c20 <_vfiprintf_r+0x4c>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c50:	2320      	movs	r3, #32
 8006c52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c56:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c5a:	2330      	movs	r3, #48	; 0x30
 8006c5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006e20 <_vfiprintf_r+0x24c>
 8006c60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c64:	f04f 0901 	mov.w	r9, #1
 8006c68:	4623      	mov	r3, r4
 8006c6a:	469a      	mov	sl, r3
 8006c6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c70:	b10a      	cbz	r2, 8006c76 <_vfiprintf_r+0xa2>
 8006c72:	2a25      	cmp	r2, #37	; 0x25
 8006c74:	d1f9      	bne.n	8006c6a <_vfiprintf_r+0x96>
 8006c76:	ebba 0b04 	subs.w	fp, sl, r4
 8006c7a:	d00b      	beq.n	8006c94 <_vfiprintf_r+0xc0>
 8006c7c:	465b      	mov	r3, fp
 8006c7e:	4622      	mov	r2, r4
 8006c80:	4629      	mov	r1, r5
 8006c82:	4630      	mov	r0, r6
 8006c84:	f7ff ff93 	bl	8006bae <__sfputs_r>
 8006c88:	3001      	adds	r0, #1
 8006c8a:	f000 80aa 	beq.w	8006de2 <_vfiprintf_r+0x20e>
 8006c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c90:	445a      	add	r2, fp
 8006c92:	9209      	str	r2, [sp, #36]	; 0x24
 8006c94:	f89a 3000 	ldrb.w	r3, [sl]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 80a2 	beq.w	8006de2 <_vfiprintf_r+0x20e>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ca8:	f10a 0a01 	add.w	sl, sl, #1
 8006cac:	9304      	str	r3, [sp, #16]
 8006cae:	9307      	str	r3, [sp, #28]
 8006cb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cb4:	931a      	str	r3, [sp, #104]	; 0x68
 8006cb6:	4654      	mov	r4, sl
 8006cb8:	2205      	movs	r2, #5
 8006cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cbe:	4858      	ldr	r0, [pc, #352]	; (8006e20 <_vfiprintf_r+0x24c>)
 8006cc0:	f7f9 fa96 	bl	80001f0 <memchr>
 8006cc4:	9a04      	ldr	r2, [sp, #16]
 8006cc6:	b9d8      	cbnz	r0, 8006d00 <_vfiprintf_r+0x12c>
 8006cc8:	06d1      	lsls	r1, r2, #27
 8006cca:	bf44      	itt	mi
 8006ccc:	2320      	movmi	r3, #32
 8006cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cd2:	0713      	lsls	r3, r2, #28
 8006cd4:	bf44      	itt	mi
 8006cd6:	232b      	movmi	r3, #43	; 0x2b
 8006cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce2:	d015      	beq.n	8006d10 <_vfiprintf_r+0x13c>
 8006ce4:	9a07      	ldr	r2, [sp, #28]
 8006ce6:	4654      	mov	r4, sl
 8006ce8:	2000      	movs	r0, #0
 8006cea:	f04f 0c0a 	mov.w	ip, #10
 8006cee:	4621      	mov	r1, r4
 8006cf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cf4:	3b30      	subs	r3, #48	; 0x30
 8006cf6:	2b09      	cmp	r3, #9
 8006cf8:	d94e      	bls.n	8006d98 <_vfiprintf_r+0x1c4>
 8006cfa:	b1b0      	cbz	r0, 8006d2a <_vfiprintf_r+0x156>
 8006cfc:	9207      	str	r2, [sp, #28]
 8006cfe:	e014      	b.n	8006d2a <_vfiprintf_r+0x156>
 8006d00:	eba0 0308 	sub.w	r3, r0, r8
 8006d04:	fa09 f303 	lsl.w	r3, r9, r3
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	9304      	str	r3, [sp, #16]
 8006d0c:	46a2      	mov	sl, r4
 8006d0e:	e7d2      	b.n	8006cb6 <_vfiprintf_r+0xe2>
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	1d19      	adds	r1, r3, #4
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	9103      	str	r1, [sp, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	bfbb      	ittet	lt
 8006d1c:	425b      	neglt	r3, r3
 8006d1e:	f042 0202 	orrlt.w	r2, r2, #2
 8006d22:	9307      	strge	r3, [sp, #28]
 8006d24:	9307      	strlt	r3, [sp, #28]
 8006d26:	bfb8      	it	lt
 8006d28:	9204      	strlt	r2, [sp, #16]
 8006d2a:	7823      	ldrb	r3, [r4, #0]
 8006d2c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d2e:	d10c      	bne.n	8006d4a <_vfiprintf_r+0x176>
 8006d30:	7863      	ldrb	r3, [r4, #1]
 8006d32:	2b2a      	cmp	r3, #42	; 0x2a
 8006d34:	d135      	bne.n	8006da2 <_vfiprintf_r+0x1ce>
 8006d36:	9b03      	ldr	r3, [sp, #12]
 8006d38:	1d1a      	adds	r2, r3, #4
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	9203      	str	r2, [sp, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	bfb8      	it	lt
 8006d42:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d46:	3402      	adds	r4, #2
 8006d48:	9305      	str	r3, [sp, #20]
 8006d4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e30 <_vfiprintf_r+0x25c>
 8006d4e:	7821      	ldrb	r1, [r4, #0]
 8006d50:	2203      	movs	r2, #3
 8006d52:	4650      	mov	r0, sl
 8006d54:	f7f9 fa4c 	bl	80001f0 <memchr>
 8006d58:	b140      	cbz	r0, 8006d6c <_vfiprintf_r+0x198>
 8006d5a:	2340      	movs	r3, #64	; 0x40
 8006d5c:	eba0 000a 	sub.w	r0, r0, sl
 8006d60:	fa03 f000 	lsl.w	r0, r3, r0
 8006d64:	9b04      	ldr	r3, [sp, #16]
 8006d66:	4303      	orrs	r3, r0
 8006d68:	3401      	adds	r4, #1
 8006d6a:	9304      	str	r3, [sp, #16]
 8006d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d70:	482c      	ldr	r0, [pc, #176]	; (8006e24 <_vfiprintf_r+0x250>)
 8006d72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d76:	2206      	movs	r2, #6
 8006d78:	f7f9 fa3a 	bl	80001f0 <memchr>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d03f      	beq.n	8006e00 <_vfiprintf_r+0x22c>
 8006d80:	4b29      	ldr	r3, [pc, #164]	; (8006e28 <_vfiprintf_r+0x254>)
 8006d82:	bb1b      	cbnz	r3, 8006dcc <_vfiprintf_r+0x1f8>
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	3307      	adds	r3, #7
 8006d88:	f023 0307 	bic.w	r3, r3, #7
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	9303      	str	r3, [sp, #12]
 8006d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d92:	443b      	add	r3, r7
 8006d94:	9309      	str	r3, [sp, #36]	; 0x24
 8006d96:	e767      	b.n	8006c68 <_vfiprintf_r+0x94>
 8006d98:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	2001      	movs	r0, #1
 8006da0:	e7a5      	b.n	8006cee <_vfiprintf_r+0x11a>
 8006da2:	2300      	movs	r3, #0
 8006da4:	3401      	adds	r4, #1
 8006da6:	9305      	str	r3, [sp, #20]
 8006da8:	4619      	mov	r1, r3
 8006daa:	f04f 0c0a 	mov.w	ip, #10
 8006dae:	4620      	mov	r0, r4
 8006db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006db4:	3a30      	subs	r2, #48	; 0x30
 8006db6:	2a09      	cmp	r2, #9
 8006db8:	d903      	bls.n	8006dc2 <_vfiprintf_r+0x1ee>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0c5      	beq.n	8006d4a <_vfiprintf_r+0x176>
 8006dbe:	9105      	str	r1, [sp, #20]
 8006dc0:	e7c3      	b.n	8006d4a <_vfiprintf_r+0x176>
 8006dc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e7f0      	b.n	8006dae <_vfiprintf_r+0x1da>
 8006dcc:	ab03      	add	r3, sp, #12
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	462a      	mov	r2, r5
 8006dd2:	4b16      	ldr	r3, [pc, #88]	; (8006e2c <_vfiprintf_r+0x258>)
 8006dd4:	a904      	add	r1, sp, #16
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f3af 8000 	nop.w
 8006ddc:	4607      	mov	r7, r0
 8006dde:	1c78      	adds	r0, r7, #1
 8006de0:	d1d6      	bne.n	8006d90 <_vfiprintf_r+0x1bc>
 8006de2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006de4:	07d9      	lsls	r1, r3, #31
 8006de6:	d405      	bmi.n	8006df4 <_vfiprintf_r+0x220>
 8006de8:	89ab      	ldrh	r3, [r5, #12]
 8006dea:	059a      	lsls	r2, r3, #22
 8006dec:	d402      	bmi.n	8006df4 <_vfiprintf_r+0x220>
 8006dee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006df0:	f7ff fa32 	bl	8006258 <__retarget_lock_release_recursive>
 8006df4:	89ab      	ldrh	r3, [r5, #12]
 8006df6:	065b      	lsls	r3, r3, #25
 8006df8:	f53f af12 	bmi.w	8006c20 <_vfiprintf_r+0x4c>
 8006dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dfe:	e711      	b.n	8006c24 <_vfiprintf_r+0x50>
 8006e00:	ab03      	add	r3, sp, #12
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	462a      	mov	r2, r5
 8006e06:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <_vfiprintf_r+0x258>)
 8006e08:	a904      	add	r1, sp, #16
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f000 f880 	bl	8006f10 <_printf_i>
 8006e10:	e7e4      	b.n	8006ddc <_vfiprintf_r+0x208>
 8006e12:	bf00      	nop
 8006e14:	080073e8 	.word	0x080073e8
 8006e18:	08007408 	.word	0x08007408
 8006e1c:	080073c8 	.word	0x080073c8
 8006e20:	0800742c 	.word	0x0800742c
 8006e24:	08007436 	.word	0x08007436
 8006e28:	00000000 	.word	0x00000000
 8006e2c:	08006baf 	.word	0x08006baf
 8006e30:	08007432 	.word	0x08007432

08006e34 <_printf_common>:
 8006e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e38:	4616      	mov	r6, r2
 8006e3a:	4699      	mov	r9, r3
 8006e3c:	688a      	ldr	r2, [r1, #8]
 8006e3e:	690b      	ldr	r3, [r1, #16]
 8006e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e44:	4293      	cmp	r3, r2
 8006e46:	bfb8      	it	lt
 8006e48:	4613      	movlt	r3, r2
 8006e4a:	6033      	str	r3, [r6, #0]
 8006e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e50:	4607      	mov	r7, r0
 8006e52:	460c      	mov	r4, r1
 8006e54:	b10a      	cbz	r2, 8006e5a <_printf_common+0x26>
 8006e56:	3301      	adds	r3, #1
 8006e58:	6033      	str	r3, [r6, #0]
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	0699      	lsls	r1, r3, #26
 8006e5e:	bf42      	ittt	mi
 8006e60:	6833      	ldrmi	r3, [r6, #0]
 8006e62:	3302      	addmi	r3, #2
 8006e64:	6033      	strmi	r3, [r6, #0]
 8006e66:	6825      	ldr	r5, [r4, #0]
 8006e68:	f015 0506 	ands.w	r5, r5, #6
 8006e6c:	d106      	bne.n	8006e7c <_printf_common+0x48>
 8006e6e:	f104 0a19 	add.w	sl, r4, #25
 8006e72:	68e3      	ldr	r3, [r4, #12]
 8006e74:	6832      	ldr	r2, [r6, #0]
 8006e76:	1a9b      	subs	r3, r3, r2
 8006e78:	42ab      	cmp	r3, r5
 8006e7a:	dc26      	bgt.n	8006eca <_printf_common+0x96>
 8006e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e80:	1e13      	subs	r3, r2, #0
 8006e82:	6822      	ldr	r2, [r4, #0]
 8006e84:	bf18      	it	ne
 8006e86:	2301      	movne	r3, #1
 8006e88:	0692      	lsls	r2, r2, #26
 8006e8a:	d42b      	bmi.n	8006ee4 <_printf_common+0xb0>
 8006e8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e90:	4649      	mov	r1, r9
 8006e92:	4638      	mov	r0, r7
 8006e94:	47c0      	blx	r8
 8006e96:	3001      	adds	r0, #1
 8006e98:	d01e      	beq.n	8006ed8 <_printf_common+0xa4>
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	68e5      	ldr	r5, [r4, #12]
 8006e9e:	6832      	ldr	r2, [r6, #0]
 8006ea0:	f003 0306 	and.w	r3, r3, #6
 8006ea4:	2b04      	cmp	r3, #4
 8006ea6:	bf08      	it	eq
 8006ea8:	1aad      	subeq	r5, r5, r2
 8006eaa:	68a3      	ldr	r3, [r4, #8]
 8006eac:	6922      	ldr	r2, [r4, #16]
 8006eae:	bf0c      	ite	eq
 8006eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eb4:	2500      	movne	r5, #0
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	bfc4      	itt	gt
 8006eba:	1a9b      	subgt	r3, r3, r2
 8006ebc:	18ed      	addgt	r5, r5, r3
 8006ebe:	2600      	movs	r6, #0
 8006ec0:	341a      	adds	r4, #26
 8006ec2:	42b5      	cmp	r5, r6
 8006ec4:	d11a      	bne.n	8006efc <_printf_common+0xc8>
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	e008      	b.n	8006edc <_printf_common+0xa8>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	4652      	mov	r2, sl
 8006ece:	4649      	mov	r1, r9
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	47c0      	blx	r8
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d103      	bne.n	8006ee0 <_printf_common+0xac>
 8006ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8006edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee0:	3501      	adds	r5, #1
 8006ee2:	e7c6      	b.n	8006e72 <_printf_common+0x3e>
 8006ee4:	18e1      	adds	r1, r4, r3
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	2030      	movs	r0, #48	; 0x30
 8006eea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006eee:	4422      	add	r2, r4
 8006ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ef8:	3302      	adds	r3, #2
 8006efa:	e7c7      	b.n	8006e8c <_printf_common+0x58>
 8006efc:	2301      	movs	r3, #1
 8006efe:	4622      	mov	r2, r4
 8006f00:	4649      	mov	r1, r9
 8006f02:	4638      	mov	r0, r7
 8006f04:	47c0      	blx	r8
 8006f06:	3001      	adds	r0, #1
 8006f08:	d0e6      	beq.n	8006ed8 <_printf_common+0xa4>
 8006f0a:	3601      	adds	r6, #1
 8006f0c:	e7d9      	b.n	8006ec2 <_printf_common+0x8e>
	...

08006f10 <_printf_i>:
 8006f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f14:	460c      	mov	r4, r1
 8006f16:	4691      	mov	r9, r2
 8006f18:	7e27      	ldrb	r7, [r4, #24]
 8006f1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f1c:	2f78      	cmp	r7, #120	; 0x78
 8006f1e:	4680      	mov	r8, r0
 8006f20:	469a      	mov	sl, r3
 8006f22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f26:	d807      	bhi.n	8006f38 <_printf_i+0x28>
 8006f28:	2f62      	cmp	r7, #98	; 0x62
 8006f2a:	d80a      	bhi.n	8006f42 <_printf_i+0x32>
 8006f2c:	2f00      	cmp	r7, #0
 8006f2e:	f000 80d8 	beq.w	80070e2 <_printf_i+0x1d2>
 8006f32:	2f58      	cmp	r7, #88	; 0x58
 8006f34:	f000 80a3 	beq.w	800707e <_printf_i+0x16e>
 8006f38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f40:	e03a      	b.n	8006fb8 <_printf_i+0xa8>
 8006f42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f46:	2b15      	cmp	r3, #21
 8006f48:	d8f6      	bhi.n	8006f38 <_printf_i+0x28>
 8006f4a:	a001      	add	r0, pc, #4	; (adr r0, 8006f50 <_printf_i+0x40>)
 8006f4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006f50:	08006fa9 	.word	0x08006fa9
 8006f54:	08006fbd 	.word	0x08006fbd
 8006f58:	08006f39 	.word	0x08006f39
 8006f5c:	08006f39 	.word	0x08006f39
 8006f60:	08006f39 	.word	0x08006f39
 8006f64:	08006f39 	.word	0x08006f39
 8006f68:	08006fbd 	.word	0x08006fbd
 8006f6c:	08006f39 	.word	0x08006f39
 8006f70:	08006f39 	.word	0x08006f39
 8006f74:	08006f39 	.word	0x08006f39
 8006f78:	08006f39 	.word	0x08006f39
 8006f7c:	080070c9 	.word	0x080070c9
 8006f80:	08006fed 	.word	0x08006fed
 8006f84:	080070ab 	.word	0x080070ab
 8006f88:	08006f39 	.word	0x08006f39
 8006f8c:	08006f39 	.word	0x08006f39
 8006f90:	080070eb 	.word	0x080070eb
 8006f94:	08006f39 	.word	0x08006f39
 8006f98:	08006fed 	.word	0x08006fed
 8006f9c:	08006f39 	.word	0x08006f39
 8006fa0:	08006f39 	.word	0x08006f39
 8006fa4:	080070b3 	.word	0x080070b3
 8006fa8:	680b      	ldr	r3, [r1, #0]
 8006faa:	1d1a      	adds	r2, r3, #4
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	600a      	str	r2, [r1, #0]
 8006fb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e0a3      	b.n	8007104 <_printf_i+0x1f4>
 8006fbc:	6825      	ldr	r5, [r4, #0]
 8006fbe:	6808      	ldr	r0, [r1, #0]
 8006fc0:	062e      	lsls	r6, r5, #24
 8006fc2:	f100 0304 	add.w	r3, r0, #4
 8006fc6:	d50a      	bpl.n	8006fde <_printf_i+0xce>
 8006fc8:	6805      	ldr	r5, [r0, #0]
 8006fca:	600b      	str	r3, [r1, #0]
 8006fcc:	2d00      	cmp	r5, #0
 8006fce:	da03      	bge.n	8006fd8 <_printf_i+0xc8>
 8006fd0:	232d      	movs	r3, #45	; 0x2d
 8006fd2:	426d      	negs	r5, r5
 8006fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fd8:	485e      	ldr	r0, [pc, #376]	; (8007154 <_printf_i+0x244>)
 8006fda:	230a      	movs	r3, #10
 8006fdc:	e019      	b.n	8007012 <_printf_i+0x102>
 8006fde:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006fe2:	6805      	ldr	r5, [r0, #0]
 8006fe4:	600b      	str	r3, [r1, #0]
 8006fe6:	bf18      	it	ne
 8006fe8:	b22d      	sxthne	r5, r5
 8006fea:	e7ef      	b.n	8006fcc <_printf_i+0xbc>
 8006fec:	680b      	ldr	r3, [r1, #0]
 8006fee:	6825      	ldr	r5, [r4, #0]
 8006ff0:	1d18      	adds	r0, r3, #4
 8006ff2:	6008      	str	r0, [r1, #0]
 8006ff4:	0628      	lsls	r0, r5, #24
 8006ff6:	d501      	bpl.n	8006ffc <_printf_i+0xec>
 8006ff8:	681d      	ldr	r5, [r3, #0]
 8006ffa:	e002      	b.n	8007002 <_printf_i+0xf2>
 8006ffc:	0669      	lsls	r1, r5, #25
 8006ffe:	d5fb      	bpl.n	8006ff8 <_printf_i+0xe8>
 8007000:	881d      	ldrh	r5, [r3, #0]
 8007002:	4854      	ldr	r0, [pc, #336]	; (8007154 <_printf_i+0x244>)
 8007004:	2f6f      	cmp	r7, #111	; 0x6f
 8007006:	bf0c      	ite	eq
 8007008:	2308      	moveq	r3, #8
 800700a:	230a      	movne	r3, #10
 800700c:	2100      	movs	r1, #0
 800700e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007012:	6866      	ldr	r6, [r4, #4]
 8007014:	60a6      	str	r6, [r4, #8]
 8007016:	2e00      	cmp	r6, #0
 8007018:	bfa2      	ittt	ge
 800701a:	6821      	ldrge	r1, [r4, #0]
 800701c:	f021 0104 	bicge.w	r1, r1, #4
 8007020:	6021      	strge	r1, [r4, #0]
 8007022:	b90d      	cbnz	r5, 8007028 <_printf_i+0x118>
 8007024:	2e00      	cmp	r6, #0
 8007026:	d04d      	beq.n	80070c4 <_printf_i+0x1b4>
 8007028:	4616      	mov	r6, r2
 800702a:	fbb5 f1f3 	udiv	r1, r5, r3
 800702e:	fb03 5711 	mls	r7, r3, r1, r5
 8007032:	5dc7      	ldrb	r7, [r0, r7]
 8007034:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007038:	462f      	mov	r7, r5
 800703a:	42bb      	cmp	r3, r7
 800703c:	460d      	mov	r5, r1
 800703e:	d9f4      	bls.n	800702a <_printf_i+0x11a>
 8007040:	2b08      	cmp	r3, #8
 8007042:	d10b      	bne.n	800705c <_printf_i+0x14c>
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	07df      	lsls	r7, r3, #31
 8007048:	d508      	bpl.n	800705c <_printf_i+0x14c>
 800704a:	6923      	ldr	r3, [r4, #16]
 800704c:	6861      	ldr	r1, [r4, #4]
 800704e:	4299      	cmp	r1, r3
 8007050:	bfde      	ittt	le
 8007052:	2330      	movle	r3, #48	; 0x30
 8007054:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007058:	f106 36ff 	addle.w	r6, r6, #4294967295
 800705c:	1b92      	subs	r2, r2, r6
 800705e:	6122      	str	r2, [r4, #16]
 8007060:	f8cd a000 	str.w	sl, [sp]
 8007064:	464b      	mov	r3, r9
 8007066:	aa03      	add	r2, sp, #12
 8007068:	4621      	mov	r1, r4
 800706a:	4640      	mov	r0, r8
 800706c:	f7ff fee2 	bl	8006e34 <_printf_common>
 8007070:	3001      	adds	r0, #1
 8007072:	d14c      	bne.n	800710e <_printf_i+0x1fe>
 8007074:	f04f 30ff 	mov.w	r0, #4294967295
 8007078:	b004      	add	sp, #16
 800707a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707e:	4835      	ldr	r0, [pc, #212]	; (8007154 <_printf_i+0x244>)
 8007080:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	680e      	ldr	r6, [r1, #0]
 8007088:	061f      	lsls	r7, r3, #24
 800708a:	f856 5b04 	ldr.w	r5, [r6], #4
 800708e:	600e      	str	r6, [r1, #0]
 8007090:	d514      	bpl.n	80070bc <_printf_i+0x1ac>
 8007092:	07d9      	lsls	r1, r3, #31
 8007094:	bf44      	itt	mi
 8007096:	f043 0320 	orrmi.w	r3, r3, #32
 800709a:	6023      	strmi	r3, [r4, #0]
 800709c:	b91d      	cbnz	r5, 80070a6 <_printf_i+0x196>
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	f023 0320 	bic.w	r3, r3, #32
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	2310      	movs	r3, #16
 80070a8:	e7b0      	b.n	800700c <_printf_i+0xfc>
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	f043 0320 	orr.w	r3, r3, #32
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	2378      	movs	r3, #120	; 0x78
 80070b4:	4828      	ldr	r0, [pc, #160]	; (8007158 <_printf_i+0x248>)
 80070b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070ba:	e7e3      	b.n	8007084 <_printf_i+0x174>
 80070bc:	065e      	lsls	r6, r3, #25
 80070be:	bf48      	it	mi
 80070c0:	b2ad      	uxthmi	r5, r5
 80070c2:	e7e6      	b.n	8007092 <_printf_i+0x182>
 80070c4:	4616      	mov	r6, r2
 80070c6:	e7bb      	b.n	8007040 <_printf_i+0x130>
 80070c8:	680b      	ldr	r3, [r1, #0]
 80070ca:	6826      	ldr	r6, [r4, #0]
 80070cc:	6960      	ldr	r0, [r4, #20]
 80070ce:	1d1d      	adds	r5, r3, #4
 80070d0:	600d      	str	r5, [r1, #0]
 80070d2:	0635      	lsls	r5, r6, #24
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	d501      	bpl.n	80070dc <_printf_i+0x1cc>
 80070d8:	6018      	str	r0, [r3, #0]
 80070da:	e002      	b.n	80070e2 <_printf_i+0x1d2>
 80070dc:	0671      	lsls	r1, r6, #25
 80070de:	d5fb      	bpl.n	80070d8 <_printf_i+0x1c8>
 80070e0:	8018      	strh	r0, [r3, #0]
 80070e2:	2300      	movs	r3, #0
 80070e4:	6123      	str	r3, [r4, #16]
 80070e6:	4616      	mov	r6, r2
 80070e8:	e7ba      	b.n	8007060 <_printf_i+0x150>
 80070ea:	680b      	ldr	r3, [r1, #0]
 80070ec:	1d1a      	adds	r2, r3, #4
 80070ee:	600a      	str	r2, [r1, #0]
 80070f0:	681e      	ldr	r6, [r3, #0]
 80070f2:	6862      	ldr	r2, [r4, #4]
 80070f4:	2100      	movs	r1, #0
 80070f6:	4630      	mov	r0, r6
 80070f8:	f7f9 f87a 	bl	80001f0 <memchr>
 80070fc:	b108      	cbz	r0, 8007102 <_printf_i+0x1f2>
 80070fe:	1b80      	subs	r0, r0, r6
 8007100:	6060      	str	r0, [r4, #4]
 8007102:	6863      	ldr	r3, [r4, #4]
 8007104:	6123      	str	r3, [r4, #16]
 8007106:	2300      	movs	r3, #0
 8007108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800710c:	e7a8      	b.n	8007060 <_printf_i+0x150>
 800710e:	6923      	ldr	r3, [r4, #16]
 8007110:	4632      	mov	r2, r6
 8007112:	4649      	mov	r1, r9
 8007114:	4640      	mov	r0, r8
 8007116:	47d0      	blx	sl
 8007118:	3001      	adds	r0, #1
 800711a:	d0ab      	beq.n	8007074 <_printf_i+0x164>
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	079b      	lsls	r3, r3, #30
 8007120:	d413      	bmi.n	800714a <_printf_i+0x23a>
 8007122:	68e0      	ldr	r0, [r4, #12]
 8007124:	9b03      	ldr	r3, [sp, #12]
 8007126:	4298      	cmp	r0, r3
 8007128:	bfb8      	it	lt
 800712a:	4618      	movlt	r0, r3
 800712c:	e7a4      	b.n	8007078 <_printf_i+0x168>
 800712e:	2301      	movs	r3, #1
 8007130:	4632      	mov	r2, r6
 8007132:	4649      	mov	r1, r9
 8007134:	4640      	mov	r0, r8
 8007136:	47d0      	blx	sl
 8007138:	3001      	adds	r0, #1
 800713a:	d09b      	beq.n	8007074 <_printf_i+0x164>
 800713c:	3501      	adds	r5, #1
 800713e:	68e3      	ldr	r3, [r4, #12]
 8007140:	9903      	ldr	r1, [sp, #12]
 8007142:	1a5b      	subs	r3, r3, r1
 8007144:	42ab      	cmp	r3, r5
 8007146:	dcf2      	bgt.n	800712e <_printf_i+0x21e>
 8007148:	e7eb      	b.n	8007122 <_printf_i+0x212>
 800714a:	2500      	movs	r5, #0
 800714c:	f104 0619 	add.w	r6, r4, #25
 8007150:	e7f5      	b.n	800713e <_printf_i+0x22e>
 8007152:	bf00      	nop
 8007154:	0800743d 	.word	0x0800743d
 8007158:	0800744e 	.word	0x0800744e

0800715c <_read_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4d07      	ldr	r5, [pc, #28]	; (800717c <_read_r+0x20>)
 8007160:	4604      	mov	r4, r0
 8007162:	4608      	mov	r0, r1
 8007164:	4611      	mov	r1, r2
 8007166:	2200      	movs	r2, #0
 8007168:	602a      	str	r2, [r5, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	f7f9 fd04 	bl	8000b78 <_read>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_read_r+0x1e>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_read_r+0x1e>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	20004e6c 	.word	0x20004e6c

08007180 <_fstat_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	4d07      	ldr	r5, [pc, #28]	; (80071a0 <_fstat_r+0x20>)
 8007184:	2300      	movs	r3, #0
 8007186:	4604      	mov	r4, r0
 8007188:	4608      	mov	r0, r1
 800718a:	4611      	mov	r1, r2
 800718c:	602b      	str	r3, [r5, #0]
 800718e:	f7f9 fd1c 	bl	8000bca <_fstat>
 8007192:	1c43      	adds	r3, r0, #1
 8007194:	d102      	bne.n	800719c <_fstat_r+0x1c>
 8007196:	682b      	ldr	r3, [r5, #0]
 8007198:	b103      	cbz	r3, 800719c <_fstat_r+0x1c>
 800719a:	6023      	str	r3, [r4, #0]
 800719c:	bd38      	pop	{r3, r4, r5, pc}
 800719e:	bf00      	nop
 80071a0:	20004e6c 	.word	0x20004e6c

080071a4 <_isatty_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	4d06      	ldr	r5, [pc, #24]	; (80071c0 <_isatty_r+0x1c>)
 80071a8:	2300      	movs	r3, #0
 80071aa:	4604      	mov	r4, r0
 80071ac:	4608      	mov	r0, r1
 80071ae:	602b      	str	r3, [r5, #0]
 80071b0:	f7f9 fd1b 	bl	8000bea <_isatty>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	d102      	bne.n	80071be <_isatty_r+0x1a>
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	b103      	cbz	r3, 80071be <_isatty_r+0x1a>
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	20004e6c 	.word	0x20004e6c

080071c4 <memmove>:
 80071c4:	4288      	cmp	r0, r1
 80071c6:	b510      	push	{r4, lr}
 80071c8:	eb01 0402 	add.w	r4, r1, r2
 80071cc:	d902      	bls.n	80071d4 <memmove+0x10>
 80071ce:	4284      	cmp	r4, r0
 80071d0:	4623      	mov	r3, r4
 80071d2:	d807      	bhi.n	80071e4 <memmove+0x20>
 80071d4:	1e43      	subs	r3, r0, #1
 80071d6:	42a1      	cmp	r1, r4
 80071d8:	d008      	beq.n	80071ec <memmove+0x28>
 80071da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071e2:	e7f8      	b.n	80071d6 <memmove+0x12>
 80071e4:	4402      	add	r2, r0
 80071e6:	4601      	mov	r1, r0
 80071e8:	428a      	cmp	r2, r1
 80071ea:	d100      	bne.n	80071ee <memmove+0x2a>
 80071ec:	bd10      	pop	{r4, pc}
 80071ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071f6:	e7f7      	b.n	80071e8 <memmove+0x24>

080071f8 <_realloc_r>:
 80071f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fa:	4607      	mov	r7, r0
 80071fc:	4614      	mov	r4, r2
 80071fe:	460e      	mov	r6, r1
 8007200:	b921      	cbnz	r1, 800720c <_realloc_r+0x14>
 8007202:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007206:	4611      	mov	r1, r2
 8007208:	f7ff b89e 	b.w	8006348 <_malloc_r>
 800720c:	b922      	cbnz	r2, 8007218 <_realloc_r+0x20>
 800720e:	f7ff f84b 	bl	80062a8 <_free_r>
 8007212:	4625      	mov	r5, r4
 8007214:	4628      	mov	r0, r5
 8007216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007218:	f000 f814 	bl	8007244 <_malloc_usable_size_r>
 800721c:	42a0      	cmp	r0, r4
 800721e:	d20f      	bcs.n	8007240 <_realloc_r+0x48>
 8007220:	4621      	mov	r1, r4
 8007222:	4638      	mov	r0, r7
 8007224:	f7ff f890 	bl	8006348 <_malloc_r>
 8007228:	4605      	mov	r5, r0
 800722a:	2800      	cmp	r0, #0
 800722c:	d0f2      	beq.n	8007214 <_realloc_r+0x1c>
 800722e:	4631      	mov	r1, r6
 8007230:	4622      	mov	r2, r4
 8007232:	f7ff f823 	bl	800627c <memcpy>
 8007236:	4631      	mov	r1, r6
 8007238:	4638      	mov	r0, r7
 800723a:	f7ff f835 	bl	80062a8 <_free_r>
 800723e:	e7e9      	b.n	8007214 <_realloc_r+0x1c>
 8007240:	4635      	mov	r5, r6
 8007242:	e7e7      	b.n	8007214 <_realloc_r+0x1c>

08007244 <_malloc_usable_size_r>:
 8007244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007248:	1f18      	subs	r0, r3, #4
 800724a:	2b00      	cmp	r3, #0
 800724c:	bfbc      	itt	lt
 800724e:	580b      	ldrlt	r3, [r1, r0]
 8007250:	18c0      	addlt	r0, r0, r3
 8007252:	4770      	bx	lr

08007254 <_init>:
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	bf00      	nop
 8007258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725a:	bc08      	pop	{r3}
 800725c:	469e      	mov	lr, r3
 800725e:	4770      	bx	lr

08007260 <_fini>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	bf00      	nop
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr
