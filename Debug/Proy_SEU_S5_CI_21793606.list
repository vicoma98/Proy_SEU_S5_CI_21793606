
Proy_SEU_S5_CI_21793606.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d988  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a48  0800db28  0800db28  0001db28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e570  0800e570  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  0800e570  0800e570  0001e570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e578  0800e578  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e578  0800e578  0001e578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e57c  0800e57c  0001e57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800e580  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e2c  20000258  0800e7d8  00020258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005084  0800e7d8  00025084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a81a  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003adf  00000000  00000000  0003aaa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  0003e588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  0003f778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fe1  00000000  00000000  00040888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015118  00000000  00000000  0005a869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000933ad  00000000  00000000  0006f981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102d2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000655c  00000000  00000000  00102d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800db10 	.word	0x0800db10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	0800db10 	.word	0x0800db10

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_ldivmod>:
 8000bec:	b97b      	cbnz	r3, 8000c0e <__aeabi_ldivmod+0x22>
 8000bee:	b972      	cbnz	r2, 8000c0e <__aeabi_ldivmod+0x22>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bfbe      	ittt	lt
 8000bf4:	2000      	movlt	r0, #0
 8000bf6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bfa:	e006      	blt.n	8000c0a <__aeabi_ldivmod+0x1e>
 8000bfc:	bf08      	it	eq
 8000bfe:	2800      	cmpeq	r0, #0
 8000c00:	bf1c      	itt	ne
 8000c02:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c06:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0a:	f000 b9ef 	b.w	8000fec <__aeabi_idiv0>
 8000c0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c16:	2900      	cmp	r1, #0
 8000c18:	db09      	blt.n	8000c2e <__aeabi_ldivmod+0x42>
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db1a      	blt.n	8000c54 <__aeabi_ldivmod+0x68>
 8000c1e:	f000 f883 	bl	8000d28 <__udivmoddi4>
 8000c22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2a:	b004      	add	sp, #16
 8000c2c:	4770      	bx	lr
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db1b      	blt.n	8000c70 <__aeabi_ldivmod+0x84>
 8000c38:	f000 f876 	bl	8000d28 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4240      	negs	r0, r0
 8000c48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	4770      	bx	lr
 8000c54:	4252      	negs	r2, r2
 8000c56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5a:	f000 f865 	bl	8000d28 <__udivmoddi4>
 8000c5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c66:	b004      	add	sp, #16
 8000c68:	4240      	negs	r0, r0
 8000c6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f857 	bl	8000d28 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4252      	negs	r2, r2
 8000c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b9a4 	b.w	8000fec <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f83c 	bl	8000d28 <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_d2lz>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	f7ff ff21 	bl	8000b0c <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x1c>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc97 	bl	8000628 <__aeabi_dmul>
 8000cfa:	f7ff ff57 	bl	8000bac <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc8e 	bl	8000628 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fad0 	bl	80002b8 <__aeabi_dsub>
 8000d18:	f7ff ff48 	bl	8000bac <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468c      	mov	ip, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8083 	bne.w	8000e3e <__udivmoddi4+0x116>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4617      	mov	r7, r2
 8000d3c:	d947      	bls.n	8000dce <__udivmoddi4+0xa6>
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	b142      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	f1c2 0020 	rsb	r0, r2, #32
 8000d48:	fa24 f000 	lsr.w	r0, r4, r0
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	4097      	lsls	r7, r2
 8000d50:	ea40 0c01 	orr.w	ip, r0, r1
 8000d54:	4094      	lsls	r4, r2
 8000d56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d60:	fa1f fe87 	uxth.w	lr, r7
 8000d64:	fb08 c116 	mls	r1, r8, r6, ip
 8000d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x60>
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 8119 	bcs.w	8000fb0 <__udivmoddi4+0x288>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 8116 	bls.w	8000fb0 <__udivmoddi4+0x288>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	443b      	add	r3, r7
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x8c>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da6:	f080 8105 	bcs.w	8000fb4 <__udivmoddi4+0x28c>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	f240 8102 	bls.w	8000fb4 <__udivmoddi4+0x28c>
 8000db0:	3802      	subs	r0, #2
 8000db2:	443c      	add	r4, r7
 8000db4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa0>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	b902      	cbnz	r2, 8000dd2 <__udivmoddi4+0xaa>
 8000dd0:	deff      	udf	#255	; 0xff
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d150      	bne.n	8000e7c <__udivmoddi4+0x154>
 8000dda:	1bcb      	subs	r3, r1, r7
 8000ddc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de0:	fa1f f887 	uxth.w	r8, r7
 8000de4:	2601      	movs	r6, #1
 8000de6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dea:	0c21      	lsrs	r1, r4, #16
 8000dec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb08 f30c 	mul.w	r3, r8, ip
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0xe4>
 8000dfc:	1879      	adds	r1, r7, r1
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0xe2>
 8000e04:	428b      	cmp	r3, r1
 8000e06:	f200 80e9 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1ac9      	subs	r1, r1, r3
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x10c>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x10a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80d9 	bhi.w	8000fe4 <__udivmoddi4+0x2bc>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e7bf      	b.n	8000dbe <__udivmoddi4+0x96>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x12e>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80b1 	beq.w	8000faa <__udivmoddi4+0x282>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x1cc>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0x140>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80b8 	bhi.w	8000fd8 <__udivmoddi4+0x2b0>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	468c      	mov	ip, r1
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0a8      	beq.n	8000dc8 <__udivmoddi4+0xa0>
 8000e76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e7a:	e7a5      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f603 	lsr.w	r6, r0, r3
 8000e84:	4097      	lsls	r7, r2
 8000e86:	fa01 f002 	lsl.w	r0, r1, r2
 8000e8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8e:	40d9      	lsrs	r1, r3
 8000e90:	4330      	orrs	r0, r6
 8000e92:	0c03      	lsrs	r3, r0, #16
 8000e94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e98:	fa1f f887 	uxth.w	r8, r7
 8000e9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ea0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea4:	fb06 f108 	mul.w	r1, r6, r8
 8000ea8:	4299      	cmp	r1, r3
 8000eaa:	fa04 f402 	lsl.w	r4, r4, r2
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x19c>
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb6:	f080 808d 	bcs.w	8000fd4 <__udivmoddi4+0x2ac>
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	f240 808a 	bls.w	8000fd4 <__udivmoddi4+0x2ac>
 8000ec0:	3e02      	subs	r6, #2
 8000ec2:	443b      	add	r3, r7
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b281      	uxth	r1, r0
 8000ec8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ecc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ed0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed4:	fb00 f308 	mul.w	r3, r0, r8
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d907      	bls.n	8000eec <__udivmoddi4+0x1c4>
 8000edc:	1879      	adds	r1, r7, r1
 8000ede:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ee2:	d273      	bcs.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d971      	bls.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4439      	add	r1, r7
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ef2:	e778      	b.n	8000de6 <__udivmoddi4+0xbe>
 8000ef4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef8:	fa03 f406 	lsl.w	r4, r3, r6
 8000efc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f00:	431c      	orrs	r4, r3
 8000f02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f12:	431f      	orrs	r7, r3
 8000f14:	0c3b      	lsrs	r3, r7, #16
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fa1f f884 	uxth.w	r8, r4
 8000f1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f26:	fb09 fa08 	mul.w	sl, r9, r8
 8000f2a:	458a      	cmp	sl, r1
 8000f2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f30:	fa00 f306 	lsl.w	r3, r0, r6
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x220>
 8000f36:	1861      	adds	r1, r4, r1
 8000f38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f3c:	d248      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f3e:	458a      	cmp	sl, r1
 8000f40:	d946      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f42:	f1a9 0902 	sub.w	r9, r9, #2
 8000f46:	4421      	add	r1, r4
 8000f48:	eba1 010a 	sub.w	r1, r1, sl
 8000f4c:	b2bf      	uxth	r7, r7
 8000f4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f5a:	fb00 f808 	mul.w	r8, r0, r8
 8000f5e:	45b8      	cmp	r8, r7
 8000f60:	d907      	bls.n	8000f72 <__udivmoddi4+0x24a>
 8000f62:	19e7      	adds	r7, r4, r7
 8000f64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f68:	d22e      	bcs.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d92c      	bls.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	4427      	add	r7, r4
 8000f72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f76:	eba7 0708 	sub.w	r7, r7, r8
 8000f7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7e:	454f      	cmp	r7, r9
 8000f80:	46c6      	mov	lr, r8
 8000f82:	4649      	mov	r1, r9
 8000f84:	d31a      	bcc.n	8000fbc <__udivmoddi4+0x294>
 8000f86:	d017      	beq.n	8000fb8 <__udivmoddi4+0x290>
 8000f88:	b15d      	cbz	r5, 8000fa2 <__udivmoddi4+0x27a>
 8000f8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f96:	40f2      	lsrs	r2, r6
 8000f98:	ea4c 0202 	orr.w	r2, ip, r2
 8000f9c:	40f7      	lsrs	r7, r6
 8000f9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	462e      	mov	r6, r5
 8000fac:	4628      	mov	r0, r5
 8000fae:	e70b      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000fb0:	4606      	mov	r6, r0
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0x60>
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	e6fd      	b.n	8000db4 <__udivmoddi4+0x8c>
 8000fb8:	4543      	cmp	r3, r8
 8000fba:	d2e5      	bcs.n	8000f88 <__udivmoddi4+0x260>
 8000fbc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc4:	3801      	subs	r0, #1
 8000fc6:	e7df      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e7d2      	b.n	8000f72 <__udivmoddi4+0x24a>
 8000fcc:	4660      	mov	r0, ip
 8000fce:	e78d      	b.n	8000eec <__udivmoddi4+0x1c4>
 8000fd0:	4681      	mov	r9, r0
 8000fd2:	e7b9      	b.n	8000f48 <__udivmoddi4+0x220>
 8000fd4:	4666      	mov	r6, ip
 8000fd6:	e775      	b.n	8000ec4 <__udivmoddi4+0x19c>
 8000fd8:	4630      	mov	r0, r6
 8000fda:	e74a      	b.n	8000e72 <__udivmoddi4+0x14a>
 8000fdc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe0:	4439      	add	r1, r7
 8000fe2:	e713      	b.n	8000e0c <__udivmoddi4+0xe4>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	443c      	add	r4, r7
 8000fe8:	e724      	b.n	8000e34 <__udivmoddi4+0x10c>
 8000fea:	bf00      	nop

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d002      	beq.n	8001006 <case_insensitive_strcmp+0x16>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8001006:	2301      	movs	r3, #1
 8001008:	e056      	b.n	80010b8 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	429a      	cmp	r2, r3
 8001010:	d10d      	bne.n	800102e <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8001012:	2300      	movs	r3, #0
 8001014:	e050      	b.n	80010b8 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <case_insensitive_strcmp+0x32>
        {
            return 0;
 800101e:	2300      	movs	r3, #0
 8001020:	e04a      	b.n	80010b8 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3301      	adds	r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	3301      	adds	r3, #1
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	3301      	adds	r3, #1
 8001038:	4a22      	ldr	r2, [pc, #136]	; (80010c4 <case_insensitive_strcmp+0xd4>)
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	2b01      	cmp	r3, #1
 8001044:	d103      	bne.n	800104e <case_insensitive_strcmp+0x5e>
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	f103 0220 	add.w	r2, r3, #32
 800104c:	e000      	b.n	8001050 <case_insensitive_strcmp+0x60>
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	73bb      	strb	r3, [r7, #14]
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	3301      	adds	r3, #1
 800105a:	491a      	ldr	r1, [pc, #104]	; (80010c4 <case_insensitive_strcmp+0xd4>)
 800105c:	440b      	add	r3, r1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d102      	bne.n	800106e <case_insensitive_strcmp+0x7e>
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	3320      	adds	r3, #32
 800106c:	e000      	b.n	8001070 <case_insensitive_strcmp+0x80>
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	429a      	cmp	r2, r3
 8001072:	d0d0      	beq.n	8001016 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	737b      	strb	r3, [r7, #13]
 800107a:	7b7b      	ldrb	r3, [r7, #13]
 800107c:	3301      	adds	r3, #1
 800107e:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <case_insensitive_strcmp+0xd4>)
 8001080:	4413      	add	r3, r2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b01      	cmp	r3, #1
 800108a:	d103      	bne.n	8001094 <case_insensitive_strcmp+0xa4>
 800108c:	7b7b      	ldrb	r3, [r7, #13]
 800108e:	f103 0220 	add.w	r2, r3, #32
 8001092:	e000      	b.n	8001096 <case_insensitive_strcmp+0xa6>
 8001094:	7b7a      	ldrb	r2, [r7, #13]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	733b      	strb	r3, [r7, #12]
 800109c:	7b3b      	ldrb	r3, [r7, #12]
 800109e:	3301      	adds	r3, #1
 80010a0:	4908      	ldr	r1, [pc, #32]	; (80010c4 <case_insensitive_strcmp+0xd4>)
 80010a2:	440b      	add	r3, r1
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d102      	bne.n	80010b4 <case_insensitive_strcmp+0xc4>
 80010ae:	7b3b      	ldrb	r3, [r7, #12]
 80010b0:	3320      	adds	r3, #32
 80010b2:	e000      	b.n	80010b6 <case_insensitive_strcmp+0xc6>
 80010b4:	7b3b      	ldrb	r3, [r7, #12]
 80010b6:	1ad3      	subs	r3, r2, r3
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	0800dd60 	.word	0x0800dd60

080010c8 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2028      	movs	r0, #40	; 0x28
 80010d6:	4798      	blx	r3
 80010d8:	60f8      	str	r0, [r7, #12]
    if (node)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 80010e0:	2228      	movs	r2, #40	; 0x28
 80010e2:	2100      	movs	r1, #0
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f007 f851 	bl	800818c <memset>
    }

    return node;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001100:	e037      	b.n	8001172 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001110:	2b00      	cmp	r3, #0
 8001112:	d108      	bne.n	8001126 <cJSON_Delete+0x32>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ffe7 	bl	80010f4 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <cJSON_Delete+0x52>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d005      	beq.n	8001146 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <cJSON_Delete+0x90>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	6912      	ldr	r2, [r2, #16]
 8001142:	4610      	mov	r0, r2
 8001144:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <cJSON_Delete+0x72>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <cJSON_Delete+0x90>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6a12      	ldr	r2, [r2, #32]
 8001162:	4610      	mov	r0, r2
 8001164:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <cJSON_Delete+0x90>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	4798      	blx	r3
        item = next;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1c4      	bne.n	8001102 <cJSON_Delete+0xe>
    }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000000 	.word	0x20000000

08001188 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800118c:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b098      	sub	sp, #96	; 0x60
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
    double number = 0;
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80011b2:	f7ff ffe9 	bl	8001188 <get_decimal_point>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <parse_number+0x36>
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <parse_number+0x3a>
    {
        return false;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e0c6      	b.n	8001360 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80011d6:	e063      	b.n	80012a0 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6899      	ldr	r1, [r3, #8]
 80011e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011e2:	440b      	add	r3, r1
 80011e4:	4413      	add	r3, r2
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b45      	cmp	r3, #69	; 0x45
 80011ea:	dc3d      	bgt.n	8001268 <parse_number+0xd0>
 80011ec:	2b2b      	cmp	r3, #43	; 0x2b
 80011ee:	db66      	blt.n	80012be <parse_number+0x126>
 80011f0:	3b2b      	subs	r3, #43	; 0x2b
 80011f2:	2b1a      	cmp	r3, #26
 80011f4:	d863      	bhi.n	80012be <parse_number+0x126>
 80011f6:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <parse_number+0x64>)
 80011f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fc:	0800126d 	.word	0x0800126d
 8001200:	080012bf 	.word	0x080012bf
 8001204:	0800126d 	.word	0x0800126d
 8001208:	0800128b 	.word	0x0800128b
 800120c:	080012bf 	.word	0x080012bf
 8001210:	0800126d 	.word	0x0800126d
 8001214:	0800126d 	.word	0x0800126d
 8001218:	0800126d 	.word	0x0800126d
 800121c:	0800126d 	.word	0x0800126d
 8001220:	0800126d 	.word	0x0800126d
 8001224:	0800126d 	.word	0x0800126d
 8001228:	0800126d 	.word	0x0800126d
 800122c:	0800126d 	.word	0x0800126d
 8001230:	0800126d 	.word	0x0800126d
 8001234:	0800126d 	.word	0x0800126d
 8001238:	080012bf 	.word	0x080012bf
 800123c:	080012bf 	.word	0x080012bf
 8001240:	080012bf 	.word	0x080012bf
 8001244:	080012bf 	.word	0x080012bf
 8001248:	080012bf 	.word	0x080012bf
 800124c:	080012bf 	.word	0x080012bf
 8001250:	080012bf 	.word	0x080012bf
 8001254:	080012bf 	.word	0x080012bf
 8001258:	080012bf 	.word	0x080012bf
 800125c:	080012bf 	.word	0x080012bf
 8001260:	080012bf 	.word	0x080012bf
 8001264:	0800126d 	.word	0x0800126d
 8001268:	2b65      	cmp	r3, #101	; 0x65
 800126a:	d128      	bne.n	80012be <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6899      	ldr	r1, [r3, #8]
 8001274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001276:	440b      	add	r3, r1
 8001278:	4413      	add	r3, r2
 800127a:	7819      	ldrb	r1, [r3, #0]
 800127c:	f107 0208 	add.w	r2, r7, #8
 8001280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001282:	4413      	add	r3, r2
 8001284:	460a      	mov	r2, r1
 8001286:	701a      	strb	r2, [r3, #0]
                break;
 8001288:	e007      	b.n	800129a <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 800128a:	f107 0208 	add.w	r2, r7, #8
 800128e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001290:	4413      	add	r3, r2
 8001292:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001296:	701a      	strb	r2, [r3, #0]
                break;
 8001298:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800129a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800129c:	3301      	adds	r3, #1
 800129e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012a2:	2b3e      	cmp	r3, #62	; 0x3e
 80012a4:	d80d      	bhi.n	80012c2 <parse_number+0x12a>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00a      	beq.n	80012c2 <parse_number+0x12a>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b2:	441a      	add	r2, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d38d      	bcc.n	80011d8 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 80012bc:	e001      	b.n	80012c2 <parse_number+0x12a>
                goto loop_end;
 80012be:	bf00      	nop
 80012c0:	e000      	b.n	80012c4 <parse_number+0x12c>
loop_end:
 80012c2:	bf00      	nop
    number_c_string[i] = '\0';
 80012c4:	f107 0208 	add.w	r2, r7, #8
 80012c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ca:	4413      	add	r3, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80012d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f009 fb16 	bl	800a90c <strtod>
 80012e0:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 80012e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d101      	bne.n	80012f2 <parse_number+0x15a>
    {
        return false; /* parse_error */
 80012ee:	2300      	movs	r3, #0
 80012f0:	e036      	b.n	8001360 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80012f8:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80012fc:	a31b      	add	r3, pc, #108	; (adr r3, 800136c <parse_number+0x1d4>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001306:	f7ff fc15 	bl	8000b34 <__aeabi_dcmpge>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d004      	beq.n	800131a <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001316:	615a      	str	r2, [r3, #20]
 8001318:	e015      	b.n	8001346 <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <parse_number+0x1d0>)
 8001320:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001324:	f7ff fbfc 	bl	8000b20 <__aeabi_dcmple>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d004      	beq.n	8001338 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001334:	615a      	str	r2, [r3, #20]
 8001336:	e006      	b.n	8001346 <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 8001338:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800133c:	f7ff fc0e 	bl	8000b5c <__aeabi_d2iz>
 8001340:	4602      	mov	r2, r0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2208      	movs	r2, #8
 800134a:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001352:	f107 0208 	add.w	r2, r7, #8
 8001356:	1a8a      	subs	r2, r1, r2
 8001358:	441a      	add	r2, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	609a      	str	r2, [r3, #8]
    return true;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3760      	adds	r7, #96	; 0x60
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	c1e00000 	.word	0xc1e00000
 800136c:	ffc00000 	.word	0xffc00000
 8001370:	41dfffff 	.word	0x41dfffff

08001374 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	e04c      	b.n	8001424 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b2f      	cmp	r3, #47	; 0x2f
 8001394:	d90f      	bls.n	80013b6 <parse_hex4+0x42>
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b39      	cmp	r3, #57	; 0x39
 80013a0:	d809      	bhi.n	80013b6 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4413      	add	r3, r2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	3b30      	subs	r3, #48	; 0x30
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	e02d      	b.n	8001412 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b40      	cmp	r3, #64	; 0x40
 80013c0:	d90f      	bls.n	80013e2 <parse_hex4+0x6e>
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b46      	cmp	r3, #70	; 0x46
 80013cc:	d809      	bhi.n	80013e2 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4413      	add	r3, r2
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	3b37      	subs	r3, #55	; 0x37
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	e017      	b.n	8001412 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b60      	cmp	r3, #96	; 0x60
 80013ec:	d90f      	bls.n	800140e <parse_hex4+0x9a>
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b66      	cmp	r3, #102	; 0x66
 80013f8:	d809      	bhi.n	800140e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4413      	add	r3, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	3b57      	subs	r3, #87	; 0x57
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	e001      	b.n	8001412 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800140e:	2300      	movs	r3, #0
 8001410:	e00c      	b.n	800142c <parse_hex4+0xb8>
        }

        if (i < 3)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d802      	bhi.n	800141e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	3301      	adds	r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	2b03      	cmp	r3, #3
 8001428:	d9af      	bls.n	800138a <parse_hex4+0x16>
        }
    }

    return h;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b05      	cmp	r3, #5
 8001470:	f340 80b7 	ble.w	80015e2 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	3302      	adds	r3, #2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff7b 	bl	8001374 <parse_hex4>
 800147e:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001486:	d304      	bcc.n	8001492 <utf16_literal_to_utf8+0x5a>
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800148e:	f0c0 80aa 	bcc.w	80015e6 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001498:	d337      	bcc.n	800150a <utf16_literal_to_utf8+0xd2>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80014a0:	d233      	bcs.n	800150a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	3306      	adds	r3, #6
 80014a6:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80014ac:	230c      	movs	r3, #12
 80014ae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	f340 8096 	ble.w	80015ea <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b5c      	cmp	r3, #92	; 0x5c
 80014c4:	f040 8093 	bne.w	80015ee <utf16_literal_to_utf8+0x1b6>
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3301      	adds	r3, #1
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b75      	cmp	r3, #117	; 0x75
 80014d0:	f040 808d 	bne.w	80015ee <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3302      	adds	r3, #2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff4b 	bl	8001374 <parse_hex4>
 80014de:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80014e6:	f0c0 8084 	bcc.w	80015f2 <utf16_literal_to_utf8+0x1ba>
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80014f0:	d27f      	bcs.n	80015f2 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	029a      	lsls	r2, r3, #10
 80014f6:	4b43      	ldr	r3, [pc, #268]	; (8001604 <utf16_literal_to_utf8+0x1cc>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001500:	4313      	orrs	r3, r2
 8001502:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001508:	e004      	b.n	8001514 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800150a:	2306      	movs	r3, #6
 800150c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	2b7f      	cmp	r3, #127	; 0x7f
 8001518:	d803      	bhi.n	8001522 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800151a:	2301      	movs	r3, #1
 800151c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001520:	e01f      	b.n	8001562 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001528:	d206      	bcs.n	8001538 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800152a:	2302      	movs	r3, #2
 800152c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001530:	23c0      	movs	r3, #192	; 0xc0
 8001532:	f887 3020 	strb.w	r3, [r7, #32]
 8001536:	e014      	b.n	8001562 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800153e:	d206      	bcs.n	800154e <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001540:	2303      	movs	r3, #3
 8001542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001546:	23e0      	movs	r3, #224	; 0xe0
 8001548:	f887 3020 	strb.w	r3, [r7, #32]
 800154c:	e009      	b.n	8001562 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001554:	d24f      	bcs.n	80015f6 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8001556:	2304      	movs	r3, #4
 8001558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800155c:	23f0      	movs	r3, #240	; 0xf0
 800155e:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001562:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001566:	3b01      	subs	r3, #1
 8001568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800156c:	e015      	b.n	800159a <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001576:	b2da      	uxtb	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6819      	ldr	r1, [r3, #0]
 800157c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001580:	440b      	add	r3, r1
 8001582:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	099b      	lsrs	r3, r3, #6
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001590:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001594:	3b01      	subs	r3, #1
 8001596:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800159a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1e5      	bne.n	800156e <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80015a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d909      	bls.n	80015be <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	b2d9      	uxtb	r1, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	e007      	b.n	80015ce <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015d6:	441a      	add	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80015dc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015e0:	e00b      	b.n	80015fa <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80015e2:	bf00      	nop
 80015e4:	e008      	b.n	80015f8 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015e6:	bf00      	nop
 80015e8:	e006      	b.n	80015f8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015ea:	bf00      	nop
 80015ec:	e004      	b.n	80015f8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015ee:	bf00      	nop
 80015f0:	e002      	b.n	80015f8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015f2:	bf00      	nop
 80015f4:	e000      	b.n	80015f8 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015f6:	bf00      	nop

fail:
    return 0;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	000ffc00 	.word	0x000ffc00

08001608 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	3301      	adds	r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	3301      	adds	r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	4413      	add	r3, r2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b22      	cmp	r3, #34	; 0x22
 8001644:	f040 8102 	bne.w	800184c <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001650:	e017      	b.n	8001682 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b5c      	cmp	r3, #92	; 0x5c
 8001658:	d110      	bne.n	800167c <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	461a      	mov	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	429a      	cmp	r2, r3
 800166c:	f080 80f0 	bcs.w	8001850 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	3301      	adds	r3, #1
 8001674:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	3301      	adds	r3, #1
 800167a:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	3301      	adds	r3, #1
 8001680:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6a3a      	ldr	r2, [r7, #32]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	461a      	mov	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	d203      	bcs.n	800169c <parse_string+0x94>
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b22      	cmp	r3, #34	; 0x22
 800169a:	d1da      	bne.n	8001652 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6a3a      	ldr	r2, [r7, #32]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	461a      	mov	r2, r3
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	f080 80d2 	bcs.w	8001854 <parse_string+0x24c>
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b22      	cmp	r3, #34	; 0x22
 80016b6:	f040 80cd 	bne.w	8001854 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4413      	add	r3, r2
 80016c4:	6a3a      	ldr	r2, [r7, #32]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	461a      	mov	r2, r3
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	3201      	adds	r2, #1
 80016d8:	4610      	mov	r0, r2
 80016da:	4798      	blx	r3
 80016dc:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 80b9 	beq.w	8001858 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80016ea:	e093      	b.n	8001814 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b5c      	cmp	r3, #92	; 0x5c
 80016f2:	d008      	beq.n	8001706 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 80016f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f6:	1c53      	adds	r3, r2, #1
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1c59      	adds	r1, r3, #1
 80016fe:	60f9      	str	r1, [r7, #12]
 8001700:	7812      	ldrb	r2, [r2, #0]
 8001702:	701a      	strb	r2, [r3, #0]
 8001704:	e086      	b.n	8001814 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001706:	2302      	movs	r3, #2
 8001708:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800170a:	6a3a      	ldr	r2, [r7, #32]
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	f340 80a3 	ble.w	800185c <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	3301      	adds	r3, #1
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b75      	cmp	r3, #117	; 0x75
 800171e:	f300 809f 	bgt.w	8001860 <parse_string+0x258>
 8001722:	2b5c      	cmp	r3, #92	; 0x5c
 8001724:	da04      	bge.n	8001730 <parse_string+0x128>
 8001726:	2b22      	cmp	r3, #34	; 0x22
 8001728:	d05c      	beq.n	80017e4 <parse_string+0x1dc>
 800172a:	2b2f      	cmp	r3, #47	; 0x2f
 800172c:	d05a      	beq.n	80017e4 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800172e:	e097      	b.n	8001860 <parse_string+0x258>
 8001730:	3b5c      	subs	r3, #92	; 0x5c
 8001732:	2b19      	cmp	r3, #25
 8001734:	f200 8094 	bhi.w	8001860 <parse_string+0x258>
 8001738:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <parse_string+0x138>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	080017e5 	.word	0x080017e5
 8001744:	08001861 	.word	0x08001861
 8001748:	08001861 	.word	0x08001861
 800174c:	08001861 	.word	0x08001861
 8001750:	08001861 	.word	0x08001861
 8001754:	08001861 	.word	0x08001861
 8001758:	080017a9 	.word	0x080017a9
 800175c:	08001861 	.word	0x08001861
 8001760:	08001861 	.word	0x08001861
 8001764:	08001861 	.word	0x08001861
 8001768:	080017b5 	.word	0x080017b5
 800176c:	08001861 	.word	0x08001861
 8001770:	08001861 	.word	0x08001861
 8001774:	08001861 	.word	0x08001861
 8001778:	08001861 	.word	0x08001861
 800177c:	08001861 	.word	0x08001861
 8001780:	08001861 	.word	0x08001861
 8001784:	08001861 	.word	0x08001861
 8001788:	080017c1 	.word	0x080017c1
 800178c:	08001861 	.word	0x08001861
 8001790:	08001861 	.word	0x08001861
 8001794:	08001861 	.word	0x08001861
 8001798:	080017cd 	.word	0x080017cd
 800179c:	08001861 	.word	0x08001861
 80017a0:	080017d9 	.word	0x080017d9
 80017a4:	080017f3 	.word	0x080017f3
                    *output_pointer++ = '\b';
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60fa      	str	r2, [r7, #12]
 80017ae:	2208      	movs	r2, #8
 80017b0:	701a      	strb	r2, [r3, #0]
                    break;
 80017b2:	e02b      	b.n	800180c <parse_string+0x204>
                    *output_pointer++ = '\f';
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60fa      	str	r2, [r7, #12]
 80017ba:	220c      	movs	r2, #12
 80017bc:	701a      	strb	r2, [r3, #0]
                    break;
 80017be:	e025      	b.n	800180c <parse_string+0x204>
                    *output_pointer++ = '\n';
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60fa      	str	r2, [r7, #12]
 80017c6:	220a      	movs	r2, #10
 80017c8:	701a      	strb	r2, [r3, #0]
                    break;
 80017ca:	e01f      	b.n	800180c <parse_string+0x204>
                    *output_pointer++ = '\r';
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60fa      	str	r2, [r7, #12]
 80017d2:	220d      	movs	r2, #13
 80017d4:	701a      	strb	r2, [r3, #0]
                    break;
 80017d6:	e019      	b.n	800180c <parse_string+0x204>
                    *output_pointer++ = '\t';
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	60fa      	str	r2, [r7, #12]
 80017de:	2209      	movs	r2, #9
 80017e0:	701a      	strb	r2, [r3, #0]
                    break;
 80017e2:	e013      	b.n	800180c <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	60fa      	str	r2, [r7, #12]
 80017ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ec:	7852      	ldrb	r2, [r2, #1]
 80017ee:	701a      	strb	r2, [r3, #0]
                    break;
 80017f0:	e00c      	b.n	800180c <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	461a      	mov	r2, r3
 80017f8:	6a39      	ldr	r1, [r7, #32]
 80017fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017fc:	f7ff fe1c 	bl	8001438 <utf16_literal_to_utf8>
 8001800:	4603      	mov	r3, r0
 8001802:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001804:	7dfb      	ldrb	r3, [r7, #23]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d02c      	beq.n	8001864 <parse_string+0x25c>
                    break;
 800180a:	bf00      	nop
            }
            input_pointer += sequence_length;
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001810:	4413      	add	r3, r2
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	429a      	cmp	r2, r3
 800181a:	f4ff af67 	bcc.w	80016ec <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2210      	movs	r2, #16
 8001828:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6a3a      	ldr	r2, [r7, #32]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	461a      	mov	r2, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	609a      	str	r2, [r3, #8]

    return true;
 8001848:	2301      	movs	r3, #1
 800184a:	e01e      	b.n	800188a <parse_string+0x282>
        goto fail;
 800184c:	bf00      	nop
 800184e:	e00a      	b.n	8001866 <parse_string+0x25e>
                    goto fail;
 8001850:	bf00      	nop
 8001852:	e008      	b.n	8001866 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 8001854:	bf00      	nop
 8001856:	e006      	b.n	8001866 <parse_string+0x25e>
            goto fail; /* allocation failure */
 8001858:	bf00      	nop
 800185a:	e004      	b.n	8001866 <parse_string+0x25e>
                goto fail;
 800185c:	bf00      	nop
 800185e:	e002      	b.n	8001866 <parse_string+0x25e>
                    goto fail;
 8001860:	bf00      	nop
 8001862:	e000      	b.n	8001866 <parse_string+0x25e>
                        goto fail;
 8001864:	bf00      	nop

fail:
    if (output != NULL)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	69f8      	ldr	r0, [r7, #28]
 8001872:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	461a      	mov	r2, r3
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3728      	adds	r7, #40	; 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop

08001894 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <buffer_skip_whitespace+0x16>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e02c      	b.n	8001908 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <buffer_skip_whitespace+0x2c>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d306      	bcc.n	80018ce <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	e021      	b.n	8001908 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00d      	beq.n	80018f0 <buffer_skip_whitespace+0x5c>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d207      	bcs.n	80018f0 <buffer_skip_whitespace+0x5c>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	4413      	add	r3, r2
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	d9e9      	bls.n	80018c4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d104      	bne.n	8001906 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	1e5a      	subs	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001906:	687b      	ldr	r3, [r7, #4]
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <skip_utf8_bom+0x1e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <skip_utf8_bom+0x1e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <skip_utf8_bom+0x22>
    {
        return NULL;
 8001932:	2300      	movs	r3, #0
 8001934:	e01c      	b.n	8001970 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d018      	beq.n	800196e <skip_utf8_bom+0x5a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	1d1a      	adds	r2, r3, #4
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	d211      	bcs.n	800196e <skip_utf8_bom+0x5a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	4413      	add	r3, r2
 8001954:	2203      	movs	r2, #3
 8001956:	4908      	ldr	r1, [pc, #32]	; (8001978 <skip_utf8_bom+0x64>)
 8001958:	4618      	mov	r0, r3
 800195a:	f007 fdef 	bl	800953c <strncmp>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d104      	bne.n	800196e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	1cda      	adds	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800196e:	687b      	ldr	r3, [r7, #4]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	0800db60 	.word	0x0800db60

0800197c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800198e:	2300      	movs	r3, #0
 8001990:	e00c      	b.n	80019ac <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f7fe fc2e 	bl	80001f4 <strlen>
 8001998:	4603      	mov	r3, r0
 800199a:	3301      	adds	r3, #1
 800199c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	6979      	ldr	r1, [r7, #20]
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 f805 	bl	80019b4 <cJSON_ParseWithLengthOpts>
 80019aa:	4603      	mov	r3, r0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08e      	sub	sp, #56	; 0x38
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80019c2:	f107 0318 	add.w	r3, r7, #24
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
 80019d0:	611a      	str	r2, [r3, #16]
 80019d2:	615a      	str	r2, [r3, #20]
 80019d4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 80019da:	4b41      	ldr	r3, [pc, #260]	; (8001ae0 <cJSON_ParseWithLengthOpts+0x12c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80019e0:	4b3f      	ldr	r3, [pc, #252]	; (8001ae0 <cJSON_ParseWithLengthOpts+0x12c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d042      	beq.n	8001a72 <cJSON_ParseWithLengthOpts+0xbe>
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d03f      	beq.n	8001a72 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80019fe:	4a39      	ldr	r2, [pc, #228]	; (8001ae4 <cJSON_ParseWithLengthOpts+0x130>)
 8001a00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a06:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001a0a:	4836      	ldr	r0, [pc, #216]	; (8001ae4 <cJSON_ParseWithLengthOpts+0x130>)
 8001a0c:	f7ff fb5c 	bl	80010c8 <cJSON_New_Item>
 8001a10:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d02e      	beq.n	8001a76 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001a18:	f107 0318 	add.w	r3, r7, #24
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff79 	bl	8001914 <skip_utf8_bom>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff35 	bl	8001894 <buffer_skip_whitespace>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a30:	f000 f868 	bl	8001b04 <parse_value>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d01f      	beq.n	8001a7a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00e      	beq.n	8001a5e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001a40:	f107 0318 	add.w	r3, r7, #24
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff25 	bl	8001894 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001a4a:	6a3a      	ldr	r2, [r7, #32]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d215      	bcs.n	8001a7e <cJSON_ParseWithLengthOpts+0xca>
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	4413      	add	r3, r2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10f      	bne.n	8001a7e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d004      	beq.n	8001a6e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	441a      	add	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a70:	e031      	b.n	8001ad6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001a72:	bf00      	nop
 8001a74:	e004      	b.n	8001a80 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a76:	bf00      	nop
 8001a78:	e002      	b.n	8001a80 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a7a:	bf00      	nop
 8001a7c:	e000      	b.n	8001a80 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001a7e:	bf00      	nop

fail:
    if (item != NULL)
 8001a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001a86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a88:	f7ff fb34 	bl	80010f4 <cJSON_Delete>
    }

    if (value != NULL)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d020      	beq.n	8001ad4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001a9a:	6a3a      	ldr	r2, [r7, #32]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d202      	bcs.n	8001aa8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e005      	b.n	8001ab4 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d004      	beq.n	8001ac4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	441a      	add	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <cJSON_ParseWithLengthOpts+0x12c>)
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ad0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3738      	adds	r7, #56	; 0x38
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000274 	.word	0x20000274
 8001ae4:	20000000 	.word	0x20000000

08001ae8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff41 	bl	800197c <cJSON_ParseWithOpts>
 8001afa:	4603      	mov	r3, r0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <parse_value+0x18>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <parse_value+0x1c>
    {
        return false; /* no input */
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e0d2      	b.n	8001cc6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01d      	beq.n	8001b62 <parse_value+0x5e>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	1d1a      	adds	r2, r3, #4
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d816      	bhi.n	8001b62 <parse_value+0x5e>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	2204      	movs	r2, #4
 8001b40:	4963      	ldr	r1, [pc, #396]	; (8001cd0 <parse_value+0x1cc>)
 8001b42:	4618      	mov	r0, r3
 8001b44:	f007 fcfa 	bl	800953c <strncmp>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2204      	movs	r2, #4
 8001b52:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	1d1a      	adds	r2, r3, #4
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	609a      	str	r2, [r3, #8]
        return true;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0b1      	b.n	8001cc6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d01d      	beq.n	8001ba4 <parse_value+0xa0>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	1d5a      	adds	r2, r3, #5
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d816      	bhi.n	8001ba4 <parse_value+0xa0>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	4413      	add	r3, r2
 8001b80:	2205      	movs	r2, #5
 8001b82:	4954      	ldr	r1, [pc, #336]	; (8001cd4 <parse_value+0x1d0>)
 8001b84:	4618      	mov	r0, r3
 8001b86:	f007 fcd9 	bl	800953c <strncmp>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d109      	bne.n	8001ba4 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	1d5a      	adds	r2, r3, #5
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	609a      	str	r2, [r3, #8]
        return true;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e090      	b.n	8001cc6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d020      	beq.n	8001bec <parse_value+0xe8>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	1d1a      	adds	r2, r3, #4
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d819      	bhi.n	8001bec <parse_value+0xe8>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	4944      	ldr	r1, [pc, #272]	; (8001cd8 <parse_value+0x1d4>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f007 fcb8 	bl	800953c <strncmp>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10c      	bne.n	8001bec <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	1d1a      	adds	r2, r3, #4
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	609a      	str	r2, [r3, #8]
        return true;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e06c      	b.n	8001cc6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d013      	beq.n	8001c1a <parse_value+0x116>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d20d      	bcs.n	8001c1a <parse_value+0x116>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	4413      	add	r3, r2
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b22      	cmp	r3, #34	; 0x22
 8001c0c:	d105      	bne.n	8001c1a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001c0e:	6839      	ldr	r1, [r7, #0]
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff fcf9 	bl	8001608 <parse_string>
 8001c16:	4603      	mov	r3, r0
 8001c18:	e055      	b.n	8001cc6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d023      	beq.n	8001c68 <parse_value+0x164>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d21d      	bcs.n	8001c68 <parse_value+0x164>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4413      	add	r3, r2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b2d      	cmp	r3, #45	; 0x2d
 8001c3a:	d00f      	beq.n	8001c5c <parse_value+0x158>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4413      	add	r3, r2
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b2f      	cmp	r3, #47	; 0x2f
 8001c4a:	d90d      	bls.n	8001c68 <parse_value+0x164>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4413      	add	r3, r2
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b39      	cmp	r3, #57	; 0x39
 8001c5a:	d805      	bhi.n	8001c68 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001c5c:	6839      	ldr	r1, [r7, #0]
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fa9a 	bl	8001198 <parse_number>
 8001c64:	4603      	mov	r3, r0
 8001c66:	e02e      	b.n	8001cc6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d013      	beq.n	8001c96 <parse_value+0x192>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d20d      	bcs.n	8001c96 <parse_value+0x192>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	4413      	add	r3, r2
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b5b      	cmp	r3, #91	; 0x5b
 8001c88:	d105      	bne.n	8001c96 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001c8a:	6839      	ldr	r1, [r7, #0]
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f825 	bl	8001cdc <parse_array>
 8001c92:	4603      	mov	r3, r0
 8001c94:	e017      	b.n	8001cc6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <parse_value+0x1c0>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d20d      	bcs.n	8001cc4 <parse_value+0x1c0>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b7b      	cmp	r3, #123	; 0x7b
 8001cb6:	d105      	bne.n	8001cc4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001cb8:	6839      	ldr	r1, [r7, #0]
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f8d2 	bl	8001e64 <parse_object>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	e000      	b.n	8001cc6 <parse_value+0x1c2>
    }

    return false;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	0800db34 	.word	0x0800db34
 8001cd4:	0800db64 	.word	0x0800db64
 8001cd8:	0800db6c 	.word	0x0800db6c

08001cdc <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cf6:	d301      	bcc.n	8001cfc <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e0af      	b.n	8001e5c <parse_array+0x180>
    }
    input_buffer->depth++;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	4413      	add	r3, r2
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b5b      	cmp	r3, #91	; 0x5b
 8001d14:	f040 8094 	bne.w	8001e40 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001d22:	6838      	ldr	r0, [r7, #0]
 8001d24:	f7ff fdb6 	bl	8001894 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00d      	beq.n	8001d4a <parse_array+0x6e>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d207      	bcs.n	8001d4a <parse_array+0x6e>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	4413      	add	r3, r2
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b5d      	cmp	r3, #93	; 0x5d
 8001d48:	d061      	beq.n	8001e0e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <parse_array+0x80>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d305      	bcc.n	8001d68 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	609a      	str	r2, [r3, #8]
        goto fail;
 8001d66:	e072      	b.n	8001e4e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	1e5a      	subs	r2, r3, #1
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	3310      	adds	r3, #16
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f9a6 	bl	80010c8 <cJSON_New_Item>
 8001d7c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d05f      	beq.n	8001e44 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d104      	bne.n	8001d94 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	e007      	b.n	8001da4 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001dae:	6838      	ldr	r0, [r7, #0]
 8001db0:	f7ff fd70 	bl	8001894 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001db4:	6839      	ldr	r1, [r7, #0]
 8001db6:	6938      	ldr	r0, [r7, #16]
 8001db8:	f7ff fea4 	bl	8001b04 <parse_value>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d042      	beq.n	8001e48 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001dc2:	6838      	ldr	r0, [r7, #0]
 8001dc4:	f7ff fd66 	bl	8001894 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00d      	beq.n	8001dea <parse_array+0x10e>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d207      	bcs.n	8001dea <parse_array+0x10e>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	4413      	add	r3, r2
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b2c      	cmp	r3, #44	; 0x2c
 8001de8:	d0c3      	beq.n	8001d72 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d02d      	beq.n	8001e4c <parse_array+0x170>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d227      	bcs.n	8001e4c <parse_array+0x170>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4413      	add	r3, r2
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b5d      	cmp	r3, #93	; 0x5d
 8001e0a:	d11f      	bne.n	8001e4c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001e0c:	e000      	b.n	8001e10 <parse_array+0x134>
        goto success;
 8001e0e:	bf00      	nop
    input_buffer->depth--;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	1e5a      	subs	r2, r3, #1
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <parse_array+0x14a>
        head->prev = current_item;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	609a      	str	r2, [r3, #8]

    return true;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e00d      	b.n	8001e5c <parse_array+0x180>
        goto fail;
 8001e40:	bf00      	nop
 8001e42:	e004      	b.n	8001e4e <parse_array+0x172>
            goto fail; /* allocation failure */
 8001e44:	bf00      	nop
 8001e46:	e002      	b.n	8001e4e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001e48:	bf00      	nop
 8001e4a:	e000      	b.n	8001e4e <parse_array+0x172>
        goto fail; /* expected end of array */
 8001e4c:	bf00      	nop

fail:
    if (head != NULL)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001e54:	6978      	ldr	r0, [r7, #20]
 8001e56:	f7ff f94d 	bl	80010f4 <cJSON_Delete>
    }

    return false;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e7e:	d301      	bcc.n	8001e84 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001e80:	2300      	movs	r3, #0
 8001e82:	e0ea      	b.n	800205a <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80d0 	beq.w	8002036 <parse_object+0x1d2>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	f080 80c9 	bcs.w	8002036 <parse_object+0x1d2>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4413      	add	r3, r2
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b7b      	cmp	r3, #123	; 0x7b
 8001eb2:	f040 80c0 	bne.w	8002036 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001ec0:	6838      	ldr	r0, [r7, #0]
 8001ec2:	f7ff fce7 	bl	8001894 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00e      	beq.n	8001eea <parse_object+0x86>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d208      	bcs.n	8001eea <parse_object+0x86>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b7d      	cmp	r3, #125	; 0x7d
 8001ee6:	f000 808d 	beq.w	8002004 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <parse_object+0x98>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d305      	bcc.n	8001f08 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	1e5a      	subs	r2, r3, #1
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	609a      	str	r2, [r3, #8]
        goto fail;
 8001f06:	e0a1      	b.n	800204c <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	1e5a      	subs	r2, r3, #1
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	3310      	adds	r3, #16
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff f8d6 	bl	80010c8 <cJSON_New_Item>
 8001f1c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 808a 	beq.w	800203a <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d104      	bne.n	8001f36 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	e007      	b.n	8001f46 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f50:	6838      	ldr	r0, [r7, #0]
 8001f52:	f7ff fc9f 	bl	8001894 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001f56:	6839      	ldr	r1, [r7, #0]
 8001f58:	6938      	ldr	r0, [r7, #16]
 8001f5a:	f7ff fb55 	bl	8001608 <parse_string>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d06c      	beq.n	800203e <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001f64:	6838      	ldr	r0, [r7, #0]
 8001f66:	f7ff fc95 	bl	8001894 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d061      	beq.n	8002042 <parse_object+0x1de>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d25b      	bcs.n	8002042 <parse_object+0x1de>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	4413      	add	r3, r2
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b3a      	cmp	r3, #58	; 0x3a
 8001f98:	d153      	bne.n	8002042 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001fa4:	6838      	ldr	r0, [r7, #0]
 8001fa6:	f7ff fc75 	bl	8001894 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001faa:	6839      	ldr	r1, [r7, #0]
 8001fac:	6938      	ldr	r0, [r7, #16]
 8001fae:	f7ff fda9 	bl	8001b04 <parse_value>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d046      	beq.n	8002046 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001fb8:	6838      	ldr	r0, [r7, #0]
 8001fba:	f7ff fc6b 	bl	8001894 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00d      	beq.n	8001fe0 <parse_object+0x17c>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <parse_object+0x17c>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4413      	add	r3, r2
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b2c      	cmp	r3, #44	; 0x2c
 8001fde:	d098      	beq.n	8001f12 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d031      	beq.n	800204a <parse_object+0x1e6>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d22b      	bcs.n	800204a <parse_object+0x1e6>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b7d      	cmp	r3, #125	; 0x7d
 8002000:	d123      	bne.n	800204a <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8002002:	e000      	b.n	8002006 <parse_object+0x1a2>
        goto success; /* empty object */
 8002004:	bf00      	nop
    input_buffer->depth--;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	1e5a      	subs	r2, r3, #1
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <parse_object+0x1b8>
        head->prev = current_item;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2240      	movs	r2, #64	; 0x40
 8002020:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	609a      	str	r2, [r3, #8]
    return true;
 8002032:	2301      	movs	r3, #1
 8002034:	e011      	b.n	800205a <parse_object+0x1f6>
        goto fail; /* not an object */
 8002036:	bf00      	nop
 8002038:	e008      	b.n	800204c <parse_object+0x1e8>
            goto fail; /* allocation failure */
 800203a:	bf00      	nop
 800203c:	e006      	b.n	800204c <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 800203e:	bf00      	nop
 8002040:	e004      	b.n	800204c <parse_object+0x1e8>
            goto fail; /* invalid object */
 8002042:	bf00      	nop
 8002044:	e002      	b.n	800204c <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8002046:	bf00      	nop
 8002048:	e000      	b.n	800204c <parse_object+0x1e8>
        goto fail; /* expected end of object */
 800204a:	bf00      	nop

fail:
    if (head != NULL)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8002052:	6978      	ldr	r0, [r7, #20]
 8002054:	f7ff f84e 	bl	80010f4 <cJSON_Delete>
    }

    return false;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <get_object_item+0x1c>
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <get_object_item+0x20>
    {
        return NULL;
 800207e:	2300      	movs	r3, #0
 8002080:	e033      	b.n	80020ea <get_object_item+0x88>
    }

    current_element = object->child;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d017      	beq.n	80020be <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800208e:	e002      	b.n	8002096 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01c      	beq.n	80020d6 <get_object_item+0x74>
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d018      	beq.n	80020d6 <get_object_item+0x74>
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4619      	mov	r1, r3
 80020aa:	68b8      	ldr	r0, [r7, #8]
 80020ac:	f7fe f898 	bl	80001e0 <strcmp>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1ec      	bne.n	8002090 <get_object_item+0x2e>
 80020b6:	e00e      	b.n	80020d6 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <get_object_item+0x74>
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4619      	mov	r1, r3
 80020ca:	68b8      	ldr	r0, [r7, #8]
 80020cc:	f7fe ff90 	bl	8000ff0 <case_insensitive_strcmp>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <get_object_item+0x82>
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <get_object_item+0x86>
        return NULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e000      	b.n	80020ea <get_object_item+0x88>
    }

    return current_element;
 80020e8:	697b      	ldr	r3, [r7, #20]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 80020fc:	2201      	movs	r2, #1
 80020fe:	6839      	ldr	r1, [r7, #0]
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ffae 	bl	8002062 <get_object_item>
 8002106:	4603      	mov	r3, r0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4a07      	ldr	r2, [pc, #28]	; (800213c <vApplicationGetIdleTaskMemory+0x2c>)
 8002120:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	4a06      	ldr	r2, [pc, #24]	; (8002140 <vApplicationGetIdleTaskMemory+0x30>)
 8002126:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2280      	movs	r2, #128	; 0x80
 800212c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	2000027c 	.word	0x2000027c
 8002140:	200002d0 	.word	0x200002d0

08002144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002144:	b5b0      	push	{r4, r5, r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800214a:	f001 fb6b 	bl	8003824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800214e:	f000 f823 	bl	8002198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002152:	f000 f915 	bl	8002380 <MX_GPIO_Init>
  MX_DMA_Init();
 8002156:	f000 f8dd 	bl	8002314 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800215a:	f000 f8b1 	bl	80022c0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800215e:	f000 f885 	bl	800226c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <main+0x4c>)
 8002164:	1d3c      	adds	r4, r7, #4
 8002166:	461d      	mov	r5, r3
 8002168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800216a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800216c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002170:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f003 fcf8 	bl	8005b6e <osThreadCreate>
 800217e:	4603      	mov	r3, r0
 8002180:	4a04      	ldr	r2, [pc, #16]	; (8002194 <main+0x50>)
 8002182:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  serie_Init_FreeRTOS();
 8002184:	f000 fc56 	bl	8002a34 <serie_Init_FreeRTOS>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002188:	f003 fcea 	bl	8005b60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800218c:	e7fe      	b.n	800218c <main+0x48>
 800218e:	bf00      	nop
 8002190:	0800db80 	.word	0x0800db80
 8002194:	20004258 	.word	0x20004258

08002198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b094      	sub	sp, #80	; 0x50
 800219c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800219e:	f107 0320 	add.w	r3, r7, #32
 80021a2:	2230      	movs	r2, #48	; 0x30
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f005 fff0 	bl	800818c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021bc:	2300      	movs	r3, #0
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	4b28      	ldr	r3, [pc, #160]	; (8002264 <SystemClock_Config+0xcc>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	4a27      	ldr	r2, [pc, #156]	; (8002264 <SystemClock_Config+0xcc>)
 80021c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ca:	6413      	str	r3, [r2, #64]	; 0x40
 80021cc:	4b25      	ldr	r3, [pc, #148]	; (8002264 <SystemClock_Config+0xcc>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d8:	2300      	movs	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	4b22      	ldr	r3, [pc, #136]	; (8002268 <SystemClock_Config+0xd0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a21      	ldr	r2, [pc, #132]	; (8002268 <SystemClock_Config+0xd0>)
 80021e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <SystemClock_Config+0xd0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021f4:	2302      	movs	r3, #2
 80021f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021f8:	2301      	movs	r3, #1
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021fc:	2310      	movs	r3, #16
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002200:	2302      	movs	r3, #2
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002204:	2300      	movs	r3, #0
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002208:	2310      	movs	r3, #16
 800220a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800220c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002210:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002212:	2304      	movs	r3, #4
 8002214:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002216:	2304      	movs	r3, #4
 8002218:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800221a:	f107 0320 	add.w	r3, r7, #32
 800221e:	4618      	mov	r0, r3
 8002220:	f002 fa02 	bl	8004628 <HAL_RCC_OscConfig>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800222a:	f000 f91f 	bl	800246c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800222e:	230f      	movs	r3, #15
 8002230:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002232:	2302      	movs	r3, #2
 8002234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800223a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	2102      	movs	r1, #2
 800224a:	4618      	mov	r0, r3
 800224c:	f002 fc64 	bl	8004b18 <HAL_RCC_ClockConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002256:	f000 f909 	bl	800246c <Error_Handler>
  }
}
 800225a:	bf00      	nop
 800225c:	3750      	adds	r7, #80	; 0x50
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	40007000 	.word	0x40007000

0800226c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <MX_USART1_UART_Init+0x50>)
 8002274:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800227c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002292:	220c      	movs	r2, #12
 8002294:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 80022a4:	f002 fe34 	bl	8004f10 <HAL_UART_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022ae:	f000 f8dd 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	2000431c 	.word	0x2000431c
 80022bc:	40011000 	.word	0x40011000

080022c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <MX_USART2_UART_Init+0x4c>)
 80022c6:	4a12      	ldr	r2, [pc, #72]	; (8002310 <MX_USART2_UART_Init+0x50>)
 80022c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <MX_USART2_UART_Init+0x4c>)
 80022cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <MX_USART2_UART_Init+0x4c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <MX_USART2_UART_Init+0x4c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <MX_USART2_UART_Init+0x4c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <MX_USART2_UART_Init+0x4c>)
 80022e6:	220c      	movs	r2, #12
 80022e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ea:	4b08      	ldr	r3, [pc, #32]	; (800230c <MX_USART2_UART_Init+0x4c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <MX_USART2_UART_Init+0x4c>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <MX_USART2_UART_Init+0x4c>)
 80022f8:	f002 fe0a 	bl	8004f10 <HAL_UART_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002302:	f000 f8b3 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200043c0 	.word	0x200043c0
 8002310:	40004400 	.word	0x40004400

08002314 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	4b17      	ldr	r3, [pc, #92]	; (800237c <MX_DMA_Init+0x68>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a16      	ldr	r2, [pc, #88]	; (800237c <MX_DMA_Init+0x68>)
 8002324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b14      	ldr	r3, [pc, #80]	; (800237c <MX_DMA_Init+0x68>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <MX_DMA_Init+0x68>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a0f      	ldr	r2, [pc, #60]	; (800237c <MX_DMA_Init+0x68>)
 8002340:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <MX_DMA_Init+0x68>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2105      	movs	r1, #5
 8002356:	2010      	movs	r0, #16
 8002358:	f001 fbb1 	bl	8003abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800235c:	2010      	movs	r0, #16
 800235e:	f001 fbca 	bl	8003af6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2105      	movs	r1, #5
 8002366:	203a      	movs	r0, #58	; 0x3a
 8002368:	f001 fba9 	bl	8003abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800236c:	203a      	movs	r0, #58	; 0x3a
 800236e:	f001 fbc2 	bl	8003af6 <HAL_NVIC_EnableIRQ>

}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800

08002380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <MX_GPIO_Init+0xd0>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a2c      	ldr	r2, [pc, #176]	; (8002450 <MX_GPIO_Init+0xd0>)
 80023a0:	f043 0304 	orr.w	r3, r3, #4
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <MX_GPIO_Init+0xd0>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b26      	ldr	r3, [pc, #152]	; (8002450 <MX_GPIO_Init+0xd0>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a25      	ldr	r2, [pc, #148]	; (8002450 <MX_GPIO_Init+0xd0>)
 80023bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b23      	ldr	r3, [pc, #140]	; (8002450 <MX_GPIO_Init+0xd0>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <MX_GPIO_Init+0xd0>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <MX_GPIO_Init+0xd0>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <MX_GPIO_Init+0xd0>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	4b18      	ldr	r3, [pc, #96]	; (8002450 <MX_GPIO_Init+0xd0>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a17      	ldr	r2, [pc, #92]	; (8002450 <MX_GPIO_Init+0xd0>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <MX_GPIO_Init+0xd0>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002406:	2200      	movs	r2, #0
 8002408:	2120      	movs	r1, #32
 800240a:	4812      	ldr	r0, [pc, #72]	; (8002454 <MX_GPIO_Init+0xd4>)
 800240c:	f002 f8f2 	bl	80045f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002416:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800241a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4619      	mov	r1, r3
 8002426:	480c      	ldr	r0, [pc, #48]	; (8002458 <MX_GPIO_Init+0xd8>)
 8002428:	f001 ff60 	bl	80042ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800242c:	2320      	movs	r3, #32
 800242e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002430:	2301      	movs	r3, #1
 8002432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4619      	mov	r1, r3
 8002442:	4804      	ldr	r0, [pc, #16]	; (8002454 <MX_GPIO_Init+0xd4>)
 8002444:	f001 ff52 	bl	80042ec <HAL_GPIO_Init>

}
 8002448:	bf00      	nop
 800244a:	3728      	adds	r7, #40	; 0x28
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40023800 	.word	0x40023800
 8002454:	40020000 	.word	0x40020000
 8002458:	40020800 	.word	0x40020800

0800245c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002464:	2001      	movs	r0, #1
 8002466:	f003 fbce 	bl	8005c06 <osDelay>
 800246a:	e7fb      	b.n	8002464 <StartDefaultTask+0x8>

0800246c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002470:	b672      	cpsid	i
}
 8002472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002474:	e7fe      	b.n	8002474 <Error_Handler+0x8>
	...

08002478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_MspInit+0x54>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a11      	ldr	r2, [pc, #68]	; (80024cc <HAL_MspInit+0x54>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <HAL_MspInit+0x54>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_MspInit+0x54>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <HAL_MspInit+0x54>)
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a8:	6413      	str	r3, [r2, #64]	; 0x40
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_MspInit+0x54>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	210f      	movs	r1, #15
 80024ba:	f06f 0001 	mvn.w	r0, #1
 80024be:	f001 fafe 	bl	8003abe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800

080024d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08c      	sub	sp, #48	; 0x30
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 031c 	add.w	r3, r7, #28
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a60      	ldr	r2, [pc, #384]	; (8002670 <HAL_UART_MspInit+0x1a0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d15b      	bne.n	80025aa <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	4b5f      	ldr	r3, [pc, #380]	; (8002674 <HAL_UART_MspInit+0x1a4>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4a5e      	ldr	r2, [pc, #376]	; (8002674 <HAL_UART_MspInit+0x1a4>)
 80024fc:	f043 0310 	orr.w	r3, r3, #16
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	4b5c      	ldr	r3, [pc, #368]	; (8002674 <HAL_UART_MspInit+0x1a4>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	61bb      	str	r3, [r7, #24]
 800250c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	4b58      	ldr	r3, [pc, #352]	; (8002674 <HAL_UART_MspInit+0x1a4>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a57      	ldr	r2, [pc, #348]	; (8002674 <HAL_UART_MspInit+0x1a4>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b55      	ldr	r3, [pc, #340]	; (8002674 <HAL_UART_MspInit+0x1a4>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800252a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800252e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800253c:	2307      	movs	r3, #7
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	f107 031c 	add.w	r3, r7, #28
 8002544:	4619      	mov	r1, r3
 8002546:	484c      	ldr	r0, [pc, #304]	; (8002678 <HAL_UART_MspInit+0x1a8>)
 8002548:	f001 fed0 	bl	80042ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800254c:	4b4b      	ldr	r3, [pc, #300]	; (800267c <HAL_UART_MspInit+0x1ac>)
 800254e:	4a4c      	ldr	r2, [pc, #304]	; (8002680 <HAL_UART_MspInit+0x1b0>)
 8002550:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002552:	4b4a      	ldr	r3, [pc, #296]	; (800267c <HAL_UART_MspInit+0x1ac>)
 8002554:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002558:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800255a:	4b48      	ldr	r3, [pc, #288]	; (800267c <HAL_UART_MspInit+0x1ac>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002560:	4b46      	ldr	r3, [pc, #280]	; (800267c <HAL_UART_MspInit+0x1ac>)
 8002562:	2200      	movs	r2, #0
 8002564:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002566:	4b45      	ldr	r3, [pc, #276]	; (800267c <HAL_UART_MspInit+0x1ac>)
 8002568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800256c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800256e:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_UART_MspInit+0x1ac>)
 8002570:	2200      	movs	r2, #0
 8002572:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002574:	4b41      	ldr	r3, [pc, #260]	; (800267c <HAL_UART_MspInit+0x1ac>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800257a:	4b40      	ldr	r3, [pc, #256]	; (800267c <HAL_UART_MspInit+0x1ac>)
 800257c:	2200      	movs	r2, #0
 800257e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002580:	4b3e      	ldr	r3, [pc, #248]	; (800267c <HAL_UART_MspInit+0x1ac>)
 8002582:	2200      	movs	r2, #0
 8002584:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002586:	4b3d      	ldr	r3, [pc, #244]	; (800267c <HAL_UART_MspInit+0x1ac>)
 8002588:	2200      	movs	r2, #0
 800258a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800258c:	483b      	ldr	r0, [pc, #236]	; (800267c <HAL_UART_MspInit+0x1ac>)
 800258e:	f001 facd 	bl	8003b2c <HAL_DMA_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002598:	f7ff ff68 	bl	800246c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a37      	ldr	r2, [pc, #220]	; (800267c <HAL_UART_MspInit+0x1ac>)
 80025a0:	639a      	str	r2, [r3, #56]	; 0x38
 80025a2:	4a36      	ldr	r2, [pc, #216]	; (800267c <HAL_UART_MspInit+0x1ac>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025a8:	e05e      	b.n	8002668 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a35      	ldr	r2, [pc, #212]	; (8002684 <HAL_UART_MspInit+0x1b4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d159      	bne.n	8002668 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <HAL_UART_MspInit+0x1a4>)
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	4a2d      	ldr	r2, [pc, #180]	; (8002674 <HAL_UART_MspInit+0x1a4>)
 80025be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c2:	6413      	str	r3, [r2, #64]	; 0x40
 80025c4:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <HAL_UART_MspInit+0x1a4>)
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <HAL_UART_MspInit+0x1a4>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	4a26      	ldr	r2, [pc, #152]	; (8002674 <HAL_UART_MspInit+0x1a4>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6313      	str	r3, [r2, #48]	; 0x30
 80025e0:	4b24      	ldr	r3, [pc, #144]	; (8002674 <HAL_UART_MspInit+0x1a4>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025ec:	230c      	movs	r3, #12
 80025ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f8:	2303      	movs	r3, #3
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025fc:	2307      	movs	r3, #7
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002600:	f107 031c 	add.w	r3, r7, #28
 8002604:	4619      	mov	r1, r3
 8002606:	481c      	ldr	r0, [pc, #112]	; (8002678 <HAL_UART_MspInit+0x1a8>)
 8002608:	f001 fe70 	bl	80042ec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800260c:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <HAL_UART_MspInit+0x1b8>)
 800260e:	4a1f      	ldr	r2, [pc, #124]	; (800268c <HAL_UART_MspInit+0x1bc>)
 8002610:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_UART_MspInit+0x1b8>)
 8002614:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002618:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800261a:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_UART_MspInit+0x1b8>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_UART_MspInit+0x1b8>)
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <HAL_UART_MspInit+0x1b8>)
 8002628:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800262c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800262e:	4b16      	ldr	r3, [pc, #88]	; (8002688 <HAL_UART_MspInit+0x1b8>)
 8002630:	2200      	movs	r2, #0
 8002632:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <HAL_UART_MspInit+0x1b8>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <HAL_UART_MspInit+0x1b8>)
 800263c:	2200      	movs	r2, #0
 800263e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_UART_MspInit+0x1b8>)
 8002642:	2200      	movs	r2, #0
 8002644:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_UART_MspInit+0x1b8>)
 8002648:	2200      	movs	r2, #0
 800264a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800264c:	480e      	ldr	r0, [pc, #56]	; (8002688 <HAL_UART_MspInit+0x1b8>)
 800264e:	f001 fa6d 	bl	8003b2c <HAL_DMA_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002658:	f7ff ff08 	bl	800246c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <HAL_UART_MspInit+0x1b8>)
 8002660:	639a      	str	r2, [r3, #56]	; 0x38
 8002662:	4a09      	ldr	r2, [pc, #36]	; (8002688 <HAL_UART_MspInit+0x1b8>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002668:	bf00      	nop
 800266a:	3730      	adds	r7, #48	; 0x30
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40011000 	.word	0x40011000
 8002674:	40023800 	.word	0x40023800
 8002678:	40020000 	.word	0x40020000
 800267c:	200042bc 	.word	0x200042bc
 8002680:	40026440 	.word	0x40026440
 8002684:	40004400 	.word	0x40004400
 8002688:	2000425c 	.word	0x2000425c
 800268c:	40026088 	.word	0x40026088

08002690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002694:	e7fe      	b.n	8002694 <NMI_Handler+0x4>

08002696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800269a:	e7fe      	b.n	800269a <HardFault_Handler+0x4>

0800269c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a0:	e7fe      	b.n	80026a0 <MemManage_Handler+0x4>

080026a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026a6:	e7fe      	b.n	80026a6 <BusFault_Handler+0x4>

080026a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <UsageFault_Handler+0x4>

080026ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026c0:	f001 f902 	bl	80038c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80026c4:	f004 fd2e 	bl	8007124 <xTaskGetSchedulerState>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d001      	beq.n	80026d2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80026ce:	f005 f90b 	bl	80078e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80026dc:	4802      	ldr	r0, [pc, #8]	; (80026e8 <DMA1_Stream5_IRQHandler+0x10>)
 80026de:	f001 fb9b 	bl	8003e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2000425c 	.word	0x2000425c

080026ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80026f0:	4802      	ldr	r0, [pc, #8]	; (80026fc <DMA2_Stream2_IRQHandler+0x10>)
 80026f2:	f001 fb91 	bl	8003e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200042bc 	.word	0x200042bc

08002700 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
	return 1;
 8002704:	2301      	movs	r3, #1
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <_kill>:

int _kill(int pid, int sig)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800271a:	f005 fb1f 	bl	8007d5c <__errno>
 800271e:	4603      	mov	r3, r0
 8002720:	2216      	movs	r2, #22
 8002722:	601a      	str	r2, [r3, #0]
	return -1;
 8002724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <_exit>:

void _exit (int status)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002738:	f04f 31ff 	mov.w	r1, #4294967295
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ffe7 	bl	8002710 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002742:	e7fe      	b.n	8002742 <_exit+0x12>

08002744 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	e00a      	b.n	800276c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002756:	f3af 8000 	nop.w
 800275a:	4601      	mov	r1, r0
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	60ba      	str	r2, [r7, #8]
 8002762:	b2ca      	uxtb	r2, r1
 8002764:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	dbf0      	blt.n	8002756 <_read+0x12>
	}

return len;
 8002774:	687b      	ldr	r3, [r7, #4]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_close>:
	}
	return len;
}

int _close(int file)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
	return -1;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027a6:	605a      	str	r2, [r3, #4]
	return 0;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <_isatty>:

int _isatty(int file)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
	return 1;
 80027be:	2301      	movs	r3, #1
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
	return 0;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027f0:	4a14      	ldr	r2, [pc, #80]	; (8002844 <_sbrk+0x5c>)
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <_sbrk+0x60>)
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <_sbrk+0x64>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <_sbrk+0x64>)
 8002806:	4a12      	ldr	r2, [pc, #72]	; (8002850 <_sbrk+0x68>)
 8002808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <_sbrk+0x64>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	429a      	cmp	r2, r3
 8002816:	d207      	bcs.n	8002828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002818:	f005 faa0 	bl	8007d5c <__errno>
 800281c:	4603      	mov	r3, r0
 800281e:	220c      	movs	r2, #12
 8002820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002822:	f04f 33ff 	mov.w	r3, #4294967295
 8002826:	e009      	b.n	800283c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <_sbrk+0x64>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800282e:	4b07      	ldr	r3, [pc, #28]	; (800284c <_sbrk+0x64>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	4a05      	ldr	r2, [pc, #20]	; (800284c <_sbrk+0x64>)
 8002838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800283a:	68fb      	ldr	r3, [r7, #12]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20020000 	.word	0x20020000
 8002848:	00000400 	.word	0x00000400
 800284c:	200004d4 	.word	0x200004d4
 8002850:	20005088 	.word	0x20005088

08002854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <SystemInit+0x20>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	4a05      	ldr	r2, [pc, #20]	; (8002874 <SystemInit+0x20>)
 8002860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <Task_DMA>:
extern uint8_t buffer_DMA_1[buffer_SIZE];
extern uint8_t buffer_DMA_2[buffer_SIZE];



void Task_DMA( void *pvParameters ){
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef res;
	uint32_t nbuff;



    hdma_usart2_rx2.Instance = DMA1_Stream7;
 8002880:	4b54      	ldr	r3, [pc, #336]	; (80029d4 <Task_DMA+0x15c>)
 8002882:	4a55      	ldr	r2, [pc, #340]	; (80029d8 <Task_DMA+0x160>)
 8002884:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx2.Init.Channel = DMA_CHANNEL_6;
 8002886:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <Task_DMA+0x15c>)
 8002888:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800288c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800288e:	4b51      	ldr	r3, [pc, #324]	; (80029d4 <Task_DMA+0x15c>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002894:	4b4f      	ldr	r3, [pc, #316]	; (80029d4 <Task_DMA+0x15c>)
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx2.Init.MemInc = DMA_MINC_ENABLE;
 800289a:	4b4e      	ldr	r3, [pc, #312]	; (80029d4 <Task_DMA+0x15c>)
 800289c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028a2:	4b4c      	ldr	r3, [pc, #304]	; (80029d4 <Task_DMA+0x15c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028a8:	4b4a      	ldr	r3, [pc, #296]	; (80029d4 <Task_DMA+0x15c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx2.Init.Mode = DMA_NORMAL;
 80028ae:	4b49      	ldr	r3, [pc, #292]	; (80029d4 <Task_DMA+0x15c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx2.Init.Priority = DMA_PRIORITY_LOW;
 80028b4:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <Task_DMA+0x15c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ba:	4b46      	ldr	r3, [pc, #280]	; (80029d4 <Task_DMA+0x15c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	625a      	str	r2, [r3, #36]	; 0x24



    if (HAL_DMA_Init(&hdma_usart2_rx2) != HAL_OK)
 80028c0:	4844      	ldr	r0, [pc, #272]	; (80029d4 <Task_DMA+0x15c>)
 80028c2:	f001 f933 	bl	8003b2c <HAL_DMA_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <Task_DMA+0x58>
    {
      Error_Handler();
 80028cc:	f7ff fdce 	bl	800246c <Error_Handler>
    }

	nbuff=0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]
	res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_1,buffer_SIZE); // Para arrancar
 80028d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d8:	4940      	ldr	r1, [pc, #256]	; (80029dc <Task_DMA+0x164>)
 80028da:	4841      	ldr	r0, [pc, #260]	; (80029e0 <Task_DMA+0x168>)
 80028dc:	f002 fbf7 	bl	80050ce <HAL_UART_Receive_DMA>
 80028e0:	4603      	mov	r3, r0
 80028e2:	73fb      	strb	r3, [r7, #15]

	it=0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
	while(1){

		switch (nbuff){
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <Task_DMA+0x7e>
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d032      	beq.n	800295a <Task_DMA+0xe2>
 80028f4:	e066      	b.n	80029c4 <Task_DMA+0x14c>
		case 0: 	num=hdma_usart2_rx.Instance->NDTR;
 80028f6:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <Task_DMA+0x16c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	60bb      	str	r3, [r7, #8]
					if (num<buffer_SIZE){
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002904:	d25b      	bcs.n	80029be <Task_DMA+0x146>
  __ASM volatile ("cpsid i" : : : "memory");
 8002906:	b672      	cpsid	i
}
 8002908:	bf00      	nop
						__disable_irq();
						res=HAL_UART_DMAStop_PAS(&huart2);
 800290a:	4835      	ldr	r0, [pc, #212]	; (80029e0 <Task_DMA+0x168>)
 800290c:	f000 ff0c 	bl	8003728 <HAL_UART_DMAStop_PAS>
 8002910:	4603      	mov	r3, r0
 8002912:	73fb      	strb	r3, [r7, #15]
					   __HAL_LINKDMA(&huart2,hdmarx,hdma_usart2_rx2);
 8002914:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <Task_DMA+0x168>)
 8002916:	4a2f      	ldr	r2, [pc, #188]	; (80029d4 <Task_DMA+0x15c>)
 8002918:	639a      	str	r2, [r3, #56]	; 0x38
 800291a:	4b2e      	ldr	r3, [pc, #184]	; (80029d4 <Task_DMA+0x15c>)
 800291c:	4a30      	ldr	r2, [pc, #192]	; (80029e0 <Task_DMA+0x168>)
 800291e:	639a      	str	r2, [r3, #56]	; 0x38
					   res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_2,buffer_SIZE);
 8002920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002924:	4930      	ldr	r1, [pc, #192]	; (80029e8 <Task_DMA+0x170>)
 8002926:	482e      	ldr	r0, [pc, #184]	; (80029e0 <Task_DMA+0x168>)
 8002928:	f002 fbd1 	bl	80050ce <HAL_UART_Receive_DMA>
 800292c:	4603      	mov	r3, r0
 800292e:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002930:	b662      	cpsie	i
}
 8002932:	bf00      	nop
					   __enable_irq();
					   nbuff=1;
 8002934:	2301      	movs	r3, #1
 8002936:	613b      	str	r3, [r7, #16]
					   num=hdma_usart2_rx.Instance->NDTR;
 8002938:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <Task_DMA+0x16c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	60bb      	str	r3, [r7, #8]
					   res=buff->puts(buff_rx,buffer_DMA_1,buffer_SIZE-num);
 8002940:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <Task_DMA+0x174>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	4a2a      	ldr	r2, [pc, #168]	; (80029f0 <Task_DMA+0x178>)
 8002948:	6810      	ldr	r0, [r2, #0]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8002950:	4922      	ldr	r1, [pc, #136]	; (80029dc <Task_DMA+0x164>)
 8002952:	4798      	blx	r3
 8002954:	4603      	mov	r3, r0
 8002956:	73fb      	strb	r3, [r7, #15]
					}else
						;

					break;
 8002958:	e031      	b.n	80029be <Task_DMA+0x146>
		case 1:
	    			num=hdma_usart2_rx2.Instance->NDTR;
 800295a:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <Task_DMA+0x15c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60bb      	str	r3, [r7, #8]
	    			if (num<buffer_SIZE){
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002968:	d22b      	bcs.n	80029c2 <Task_DMA+0x14a>
  __ASM volatile ("cpsid i" : : : "memory");
 800296a:	b672      	cpsid	i
}
 800296c:	bf00      	nop
	    				__disable_irq();
	    				res=HAL_UART_DMAStop_PAS(&huart2);
 800296e:	481c      	ldr	r0, [pc, #112]	; (80029e0 <Task_DMA+0x168>)
 8002970:	f000 feda 	bl	8003728 <HAL_UART_DMAStop_PAS>
 8002974:	4603      	mov	r3, r0
 8002976:	73fb      	strb	r3, [r7, #15]
	    				__HAL_LINKDMA(&huart2,hdmarx,hdma_usart2_rx);
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <Task_DMA+0x168>)
 800297a:	4a1a      	ldr	r2, [pc, #104]	; (80029e4 <Task_DMA+0x16c>)
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
 800297e:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <Task_DMA+0x16c>)
 8002980:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <Task_DMA+0x168>)
 8002982:	639a      	str	r2, [r3, #56]	; 0x38
	    				res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_1,buffer_SIZE);
 8002984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002988:	4914      	ldr	r1, [pc, #80]	; (80029dc <Task_DMA+0x164>)
 800298a:	4815      	ldr	r0, [pc, #84]	; (80029e0 <Task_DMA+0x168>)
 800298c:	f002 fb9f 	bl	80050ce <HAL_UART_Receive_DMA>
 8002990:	4603      	mov	r3, r0
 8002992:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002994:	b662      	cpsie	i
}
 8002996:	bf00      	nop
	    				__enable_irq();
	    				nbuff=0;
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
	    				num=hdma_usart2_rx2.Instance->NDTR;
 800299c:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <Task_DMA+0x15c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	60bb      	str	r3, [r7, #8]
	    				res=buff->puts(buff_rx,buffer_DMA_2,buffer_SIZE-num);
 80029a4:	4b11      	ldr	r3, [pc, #68]	; (80029ec <Task_DMA+0x174>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	4a11      	ldr	r2, [pc, #68]	; (80029f0 <Task_DMA+0x178>)
 80029ac:	6810      	ldr	r0, [r2, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 80029b4:	490c      	ldr	r1, [pc, #48]	; (80029e8 <Task_DMA+0x170>)
 80029b6:	4798      	blx	r3
 80029b8:	4603      	mov	r3, r0
 80029ba:	73fb      	strb	r3, [r7, #15]
	    			}else
	    				;
	    			break;
 80029bc:	e001      	b.n	80029c2 <Task_DMA+0x14a>
					break;
 80029be:	bf00      	nop
 80029c0:	e000      	b.n	80029c4 <Task_DMA+0x14c>
	    			break;
 80029c2:	bf00      	nop
		}

		it++;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3301      	adds	r3, #1
 80029c8:	617b      	str	r3, [r7, #20]
		vTaskDelay(1/portTICK_RATE_MS );
 80029ca:	2001      	movs	r0, #1
 80029cc:	f003 ff78 	bl	80068c0 <vTaskDelay>
		switch (nbuff){
 80029d0:	e78a      	b.n	80028e8 <Task_DMA+0x70>
 80029d2:	bf00      	nop
 80029d4:	20004360 	.word	0x20004360
 80029d8:	400260b8 	.word	0x400260b8
 80029dc:	20004c6c 	.word	0x20004c6c
 80029e0:	200043c0 	.word	0x200043c0
 80029e4:	2000425c 	.word	0x2000425c
 80029e8:	20004e70 	.word	0x20004e70
 80029ec:	20004e6c 	.word	0x20004e6c
 80029f0:	20004c68 	.word	0x20004c68

080029f4 <Task_Display>:
	}
}


void Task_Display( void *pvParameters ){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

	uint32_t it;
	BUFF_ITEM_t car;
	HAL_StatusTypeDef res;

    it=0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
	while(1){

		buff->get(buff,&car);
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <Task_Display+0x38>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <Task_Display+0x38>)
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	f107 010a 	add.w	r1, r7, #10
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4798      	blx	r3
		res=HAL_UART_Transmit(& huart2,&car,1,100);
 8002a12:	f107 010a 	add.w	r1, r7, #10
 8002a16:	2364      	movs	r3, #100	; 0x64
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4805      	ldr	r0, [pc, #20]	; (8002a30 <Task_Display+0x3c>)
 8002a1c:	f002 fac5 	bl	8004faa <HAL_UART_Transmit>
 8002a20:	4603      	mov	r3, r0
 8002a22:	72fb      	strb	r3, [r7, #11]
		it++;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3301      	adds	r3, #1
 8002a28:	60fb      	str	r3, [r7, #12]
		buff->get(buff,&car);
 8002a2a:	e7e9      	b.n	8002a00 <Task_Display+0xc>
 8002a2c:	20004e6c 	.word	0x20004e6c
 8002a30:	200043c0 	.word	0x200043c0

08002a34 <serie_Init_FreeRTOS>:


extern BUFF_BUFFER_t * buff;
extern BUFF_BUFFER_t * buff_rx;

void serie_Init_FreeRTOS(void){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af02      	add	r7, sp, #8

	BaseType_t res_task;

	printf (PASCU_PRJ " at "__TIME__);
 8002a3a:	4844      	ldr	r0, [pc, #272]	; (8002b4c <serie_Init_FreeRTOS+0x118>)
 8002a3c:	f005 fed6 	bl	80087ec <iprintf>
	fflush(0);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f005 fa53 	bl	8007eec <fflush>

	buff=bufferCreat(128);
 8002a46:	2080      	movs	r0, #128	; 0x80
 8002a48:	f000 fd26 	bl	8003498 <bufferCreat>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4a40      	ldr	r2, [pc, #256]	; (8002b50 <serie_Init_FreeRTOS+0x11c>)
 8002a50:	6013      	str	r3, [r2, #0]
	if (!buff) return;
 8002a52:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <serie_Init_FreeRTOS+0x11c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d072      	beq.n	8002b40 <serie_Init_FreeRTOS+0x10c>

	buff_rx=bufferCreat(512);
 8002a5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a5e:	f000 fd1b 	bl	8003498 <bufferCreat>
 8002a62:	4603      	mov	r3, r0
 8002a64:	4a3b      	ldr	r2, [pc, #236]	; (8002b54 <serie_Init_FreeRTOS+0x120>)
 8002a66:	6013      	str	r3, [r2, #0]
	if (!buff_rx) return;
 8002a68:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <serie_Init_FreeRTOS+0x120>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d069      	beq.n	8002b44 <serie_Init_FreeRTOS+0x110>

	res_task=xTaskCreate(Task_Display,"DISPLAY",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f000 fd6b 	bl	800354c <makeFreeRtosPriority>
 8002a76:	4603      	mov	r3, r0
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	9200      	str	r2, [sp, #0]
 8002a80:	2300      	movs	r3, #0
 8002a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a86:	4934      	ldr	r1, [pc, #208]	; (8002b58 <serie_Init_FreeRTOS+0x124>)
 8002a88:	4834      	ldr	r0, [pc, #208]	; (8002b5c <serie_Init_FreeRTOS+0x128>)
 8002a8a:	f003 fde2 	bl	8006652 <xTaskCreate>
 8002a8e:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d006      	beq.n	8002aa4 <serie_Init_FreeRTOS+0x70>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8002a96:	4832      	ldr	r0, [pc, #200]	; (8002b60 <serie_Init_FreeRTOS+0x12c>)
 8002a98:	f005 ff2e 	bl	80088f8 <puts>
			fflush(NULL);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f005 fa25 	bl	8007eec <fflush>
			while(1);
 8002aa2:	e7fe      	b.n	8002aa2 <serie_Init_FreeRTOS+0x6e>
	}

	res_task=xTaskCreate(Task_DMA,"DMA",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f000 fd51 	bl	800354c <makeFreeRtosPriority>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	461a      	mov	r2, r3
 8002aae:	2300      	movs	r3, #0
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	9200      	str	r2, [sp, #0]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aba:	492a      	ldr	r1, [pc, #168]	; (8002b64 <serie_Init_FreeRTOS+0x130>)
 8002abc:	482a      	ldr	r0, [pc, #168]	; (8002b68 <serie_Init_FreeRTOS+0x134>)
 8002abe:	f003 fdc8 	bl	8006652 <xTaskCreate>
 8002ac2:	6078      	str	r0, [r7, #4]
		if( res_task != pdPASS ){
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d006      	beq.n	8002ad8 <serie_Init_FreeRTOS+0xa4>
				printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8002aca:	4825      	ldr	r0, [pc, #148]	; (8002b60 <serie_Init_FreeRTOS+0x12c>)
 8002acc:	f005 ff14 	bl	80088f8 <puts>
				fflush(NULL);
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f005 fa0b 	bl	8007eec <fflush>
				while(1);
 8002ad6:	e7fe      	b.n	8002ad6 <serie_Init_FreeRTOS+0xa2>
		}

	res_task=xTaskCreate(Task_Send,"ENVIO",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f000 fd37 	bl	800354c <makeFreeRtosPriority>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	9200      	str	r2, [sp, #0]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aee:	491f      	ldr	r1, [pc, #124]	; (8002b6c <serie_Init_FreeRTOS+0x138>)
 8002af0:	481f      	ldr	r0, [pc, #124]	; (8002b70 <serie_Init_FreeRTOS+0x13c>)
 8002af2:	f003 fdae 	bl	8006652 <xTaskCreate>
 8002af6:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d006      	beq.n	8002b0c <serie_Init_FreeRTOS+0xd8>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8002afe:	4818      	ldr	r0, [pc, #96]	; (8002b60 <serie_Init_FreeRTOS+0x12c>)
 8002b00:	f005 fefa 	bl	80088f8 <puts>
			fflush(NULL);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f005 f9f1 	bl	8007eec <fflush>
			while(1);
 8002b0a:	e7fe      	b.n	8002b0a <serie_Init_FreeRTOS+0xd6>
	}

	res_task=xTaskCreate(Task_Receive,"RECEIVE",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f000 fd1d 	bl	800354c <makeFreeRtosPriority>
 8002b12:	4603      	mov	r3, r0
 8002b14:	461a      	mov	r2, r3
 8002b16:	2300      	movs	r3, #0
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	9200      	str	r2, [sp, #0]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b22:	4914      	ldr	r1, [pc, #80]	; (8002b74 <serie_Init_FreeRTOS+0x140>)
 8002b24:	4814      	ldr	r0, [pc, #80]	; (8002b78 <serie_Init_FreeRTOS+0x144>)
 8002b26:	f003 fd94 	bl	8006652 <xTaskCreate>
 8002b2a:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d009      	beq.n	8002b46 <serie_Init_FreeRTOS+0x112>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8002b32:	480b      	ldr	r0, [pc, #44]	; (8002b60 <serie_Init_FreeRTOS+0x12c>)
 8002b34:	f005 fee0 	bl	80088f8 <puts>
			fflush(NULL);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f005 f9d7 	bl	8007eec <fflush>
			while(1);
 8002b3e:	e7fe      	b.n	8002b3e <serie_Init_FreeRTOS+0x10a>
	if (!buff) return;
 8002b40:	bf00      	nop
 8002b42:	e000      	b.n	8002b46 <serie_Init_FreeRTOS+0x112>
	if (!buff_rx) return;
 8002b44:	bf00      	nop
	}
}
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	0800db9c 	.word	0x0800db9c
 8002b50:	20004e6c 	.word	0x20004e6c
 8002b54:	20004c68 	.word	0x20004c68
 8002b58:	0800dbc4 	.word	0x0800dbc4
 8002b5c:	080029f5 	.word	0x080029f5
 8002b60:	0800dbcc 	.word	0x0800dbcc
 8002b64:	0800dbf8 	.word	0x0800dbf8
 8002b68:	08002879 	.word	0x08002879
 8002b6c:	0800dbfc 	.word	0x0800dbfc
 8002b70:	080030c1 	.word	0x080030c1
 8002b74:	0800dc04 	.word	0x0800dc04
 8002b78:	0800312d 	.word	0x0800312d

08002b7c <entregable>:
		res=buff->put(buff,buffer_DMA[buffer_ct++]);
	// wait a bit time
	osDelay(1);

}
void entregable(char * nombreMaquina,char * ssid, char * passwd){
 8002b7c:	b5b0      	push	{r4, r5, r7, lr}
 8002b7e:	b0dc      	sub	sp, #368	; 0x170
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	f107 030c 	add.w	r3, r7, #12
 8002b86:	6018      	str	r0, [r3, #0]
 8002b88:	f107 0308 	add.w	r3, r7, #8
 8002b8c:	6019      	str	r1, [r3, #0]
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	601a      	str	r2, [r3, #0]
	uint32_t res;
		char cad[]="AT+CWJAP=\"%s\",\"%s\"\r\n";
 8002b92:	4b93      	ldr	r3, [pc, #588]	; (8002de0 <entregable+0x264>)
 8002b94:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8002b98:	461d      	mov	r5, r3
 8002b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002ba2:	6020      	str	r0, [r4, #0]
 8002ba4:	3404      	adds	r4, #4
 8002ba6:	7021      	strb	r1, [r4, #0]

		sprintf(candenafinal,cad,ssid,passwd);
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	f107 0208 	add.w	r2, r7, #8
 8002bae:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	488b      	ldr	r0, [pc, #556]	; (8002de4 <entregable+0x268>)
 8002bb8:	f005 febe 	bl	8008938 <siprintf>
		char cad1[]="AT+CWMODE=1\r\n";
 8002bbc:	4b8a      	ldr	r3, [pc, #552]	; (8002de8 <entregable+0x26c>)
 8002bbe:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8002bc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bc4:	c407      	stmia	r4!, {r0, r1, r2}
 8002bc6:	8023      	strh	r3, [r4, #0]
		res=HAL_UART_Transmit(UART_ESP_AT_WIFI,cad1,strlen(cad1),1000);
 8002bc8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fb11 	bl	80001f4 <strlen>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8002bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bde:	4883      	ldr	r0, [pc, #524]	; (8002dec <entregable+0x270>)
 8002be0:	f002 f9e3 	bl	8004faa <HAL_UART_Transmit>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 8002bea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bee:	4980      	ldr	r1, [pc, #512]	; (8002df0 <entregable+0x274>)
 8002bf0:	487e      	ldr	r0, [pc, #504]	; (8002dec <entregable+0x270>)
 8002bf2:	f002 fa6c 	bl	80050ce <HAL_UART_Receive_DMA>
		osDelay(2000);
 8002bf6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002bfa:	f003 f804 	bl	8005c06 <osDelay>
		HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 8002bfe:	487b      	ldr	r0, [pc, #492]	; (8002dec <entregable+0x270>)
 8002c00:	f002 fa95 	bl	800512e <HAL_UART_DMAStop>
		int buffer_ct1=buffer_DMA_size - HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 8002c04:	4879      	ldr	r0, [pc, #484]	; (8002dec <entregable+0x270>)
 8002c06:	f000 fdd4 	bl	80037b2 <HAL_DMA_getcounter>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002c10:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		int buffer_ct=0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		while (buffer_ct<buffer_ct1)
 8002c1a:	e010      	b.n	8002c3e <entregable+0xc2>
				res=buff->put(buff,buffer_DMA[buffer_ct++]);
 8002c1c:	4b75      	ldr	r3, [pc, #468]	; (8002df4 <entregable+0x278>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	4b74      	ldr	r3, [pc, #464]	; (8002df4 <entregable+0x278>)
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002c2a:	1c59      	adds	r1, r3, #1
 8002c2c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
 8002c30:	496f      	ldr	r1, [pc, #444]	; (8002df0 <entregable+0x274>)
 8002c32:	5ccb      	ldrb	r3, [r1, r3]
 8002c34:	4619      	mov	r1, r3
 8002c36:	4790      	blx	r2
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		while (buffer_ct<buffer_ct1)
 8002c3e:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8002c42:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002c46:	429a      	cmp	r2, r3
 8002c48:	dbe8      	blt.n	8002c1c <entregable+0xa0>
		osDelay(1);
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	f002 ffdb 	bl	8005c06 <osDelay>


		res=HAL_UART_Transmit(UART_ESP_AT_WIFI,candenafinal,strlen(candenafinal),1000);
 8002c50:	4864      	ldr	r0, [pc, #400]	; (8002de4 <entregable+0x268>)
 8002c52:	f7fd facf 	bl	80001f4 <strlen>
 8002c56:	4603      	mov	r3, r0
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c5e:	4961      	ldr	r1, [pc, #388]	; (8002de4 <entregable+0x268>)
 8002c60:	4862      	ldr	r0, [pc, #392]	; (8002dec <entregable+0x270>)
 8002c62:	f002 f9a2 	bl	8004faa <HAL_UART_Transmit>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 8002c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c70:	495f      	ldr	r1, [pc, #380]	; (8002df0 <entregable+0x274>)
 8002c72:	485e      	ldr	r0, [pc, #376]	; (8002dec <entregable+0x270>)
 8002c74:	f002 fa2b 	bl	80050ce <HAL_UART_Receive_DMA>
		osDelay(2000);
 8002c78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c7c:	f002 ffc3 	bl	8005c06 <osDelay>
		HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 8002c80:	485a      	ldr	r0, [pc, #360]	; (8002dec <entregable+0x270>)
 8002c82:	f002 fa54 	bl	800512e <HAL_UART_DMAStop>
		buffer_ct1=buffer_DMA_size - HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 8002c86:	4859      	ldr	r0, [pc, #356]	; (8002dec <entregable+0x270>)
 8002c88:	f000 fd93 	bl	80037b2 <HAL_DMA_getcounter>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002c92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		buffer_ct=0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		while (buffer_ct<buffer_ct1)
 8002c9c:	e010      	b.n	8002cc0 <entregable+0x144>
			res=buff->put(buff,buffer_DMA[buffer_ct++]);
 8002c9e:	4b55      	ldr	r3, [pc, #340]	; (8002df4 <entregable+0x278>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	4b53      	ldr	r3, [pc, #332]	; (8002df4 <entregable+0x278>)
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002cac:	1c59      	adds	r1, r3, #1
 8002cae:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
 8002cb2:	494f      	ldr	r1, [pc, #316]	; (8002df0 <entregable+0x274>)
 8002cb4:	5ccb      	ldrb	r3, [r1, r3]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4790      	blx	r2
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		while (buffer_ct<buffer_ct1)
 8002cc0:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8002cc4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	dbe8      	blt.n	8002c9e <entregable+0x122>
		osDelay(1);
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f002 ff9a 	bl	8005c06 <osDelay>

		char cad2[]="AT+CIFSR\r\n";
 8002cd2:	4a49      	ldr	r2, [pc, #292]	; (8002df8 <entregable+0x27c>)
 8002cd4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002cd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cda:	c303      	stmia	r3!, {r0, r1}
 8002cdc:	801a      	strh	r2, [r3, #0]
 8002cde:	3302      	adds	r3, #2
 8002ce0:	0c12      	lsrs	r2, r2, #16
 8002ce2:	701a      	strb	r2, [r3, #0]
		res=HAL_UART_Transmit(UART_ESP_AT_WIFI,cad2,strlen(cad2),1000);
 8002ce4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fa83 	bl	80001f4 <strlen>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8002cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfa:	483c      	ldr	r0, [pc, #240]	; (8002dec <entregable+0x270>)
 8002cfc:	f002 f955 	bl	8004faa <HAL_UART_Transmit>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 8002d06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d0a:	4939      	ldr	r1, [pc, #228]	; (8002df0 <entregable+0x274>)
 8002d0c:	4837      	ldr	r0, [pc, #220]	; (8002dec <entregable+0x270>)
 8002d0e:	f002 f9de 	bl	80050ce <HAL_UART_Receive_DMA>
		osDelay(2000);
 8002d12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d16:	f002 ff76 	bl	8005c06 <osDelay>
		HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 8002d1a:	4834      	ldr	r0, [pc, #208]	; (8002dec <entregable+0x270>)
 8002d1c:	f002 fa07 	bl	800512e <HAL_UART_DMAStop>
		buffer_ct1=buffer_DMA_size - HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 8002d20:	4832      	ldr	r0, [pc, #200]	; (8002dec <entregable+0x270>)
 8002d22:	f000 fd46 	bl	80037b2 <HAL_DMA_getcounter>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002d2c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		buffer_ct=0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		while (buffer_ct<buffer_ct1)
 8002d36:	e010      	b.n	8002d5a <entregable+0x1de>
			res=buff->put(buff,buffer_DMA[buffer_ct++]);
 8002d38:	4b2e      	ldr	r3, [pc, #184]	; (8002df4 <entregable+0x278>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <entregable+0x278>)
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002d46:	1c59      	adds	r1, r3, #1
 8002d48:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
 8002d4c:	4928      	ldr	r1, [pc, #160]	; (8002df0 <entregable+0x274>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	4619      	mov	r1, r3
 8002d52:	4790      	blx	r2
 8002d54:	4603      	mov	r3, r0
 8002d56:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		while (buffer_ct<buffer_ct1)
 8002d5a:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8002d5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002d62:	429a      	cmp	r2, r3
 8002d64:	dbe8      	blt.n	8002d38 <entregable+0x1bc>
		osDelay(1);
 8002d66:	2001      	movs	r0, #1
 8002d68:	f002 ff4d 	bl	8005c06 <osDelay>


		char cad3[]="AT+CIPSTART=\"TCP\",\"%s\",80\r\n";
 8002d6c:	4b23      	ldr	r3, [pc, #140]	; (8002dfc <entregable+0x280>)
 8002d6e:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8002d72:	461d      	mov	r5, r3
 8002d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		sprintf(candenafinal,cad3,nombreMaquina);
 8002d80:	f107 030c 	add.w	r3, r7, #12
 8002d84:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4816      	ldr	r0, [pc, #88]	; (8002de4 <entregable+0x268>)
 8002d8c:	f005 fdd4 	bl	8008938 <siprintf>
		res=HAL_UART_Transmit(UART_ESP_AT_WIFI,candenafinal,strlen(candenafinal),1000);
 8002d90:	4814      	ldr	r0, [pc, #80]	; (8002de4 <entregable+0x268>)
 8002d92:	f7fd fa2f 	bl	80001f4 <strlen>
 8002d96:	4603      	mov	r3, r0
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d9e:	4911      	ldr	r1, [pc, #68]	; (8002de4 <entregable+0x268>)
 8002da0:	4812      	ldr	r0, [pc, #72]	; (8002dec <entregable+0x270>)
 8002da2:	f002 f902 	bl	8004faa <HAL_UART_Transmit>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 8002dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002db0:	490f      	ldr	r1, [pc, #60]	; (8002df0 <entregable+0x274>)
 8002db2:	480e      	ldr	r0, [pc, #56]	; (8002dec <entregable+0x270>)
 8002db4:	f002 f98b 	bl	80050ce <HAL_UART_Receive_DMA>
		osDelay(500);
 8002db8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dbc:	f002 ff23 	bl	8005c06 <osDelay>
		HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 8002dc0:	480a      	ldr	r0, [pc, #40]	; (8002dec <entregable+0x270>)
 8002dc2:	f002 f9b4 	bl	800512e <HAL_UART_DMAStop>
		buffer_ct1=buffer_DMA_size - HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 8002dc6:	4809      	ldr	r0, [pc, #36]	; (8002dec <entregable+0x270>)
 8002dc8:	f000 fcf3 	bl	80037b2 <HAL_DMA_getcounter>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002dd2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		buffer_ct=0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		while (buffer_ct<buffer_ct1)
 8002ddc:	e021      	b.n	8002e22 <entregable+0x2a6>
 8002dde:	bf00      	nop
 8002de0:	0800dc1c 	.word	0x0800dc1c
 8002de4:	20004c04 	.word	0x20004c04
 8002de8:	0800dc0c 	.word	0x0800dc0c
 8002dec:	2000431c 	.word	0x2000431c
 8002df0:	20004404 	.word	0x20004404
 8002df4:	20004e6c 	.word	0x20004e6c
 8002df8:	0800dc70 	.word	0x0800dc70
 8002dfc:	0800dc7c 	.word	0x0800dc7c
			res=buff->put(buff,buffer_DMA[buffer_ct++]);
 8002e00:	4ba7      	ldr	r3, [pc, #668]	; (80030a0 <entregable+0x524>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	4ba6      	ldr	r3, [pc, #664]	; (80030a0 <entregable+0x524>)
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002e0e:	1c59      	adds	r1, r3, #1
 8002e10:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
 8002e14:	49a3      	ldr	r1, [pc, #652]	; (80030a4 <entregable+0x528>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4790      	blx	r2
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		while (buffer_ct<buffer_ct1)
 8002e22:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8002e26:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	dbe8      	blt.n	8002e00 <entregable+0x284>
		osDelay(1000);
 8002e2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e32:	f002 fee8 	bl	8005c06 <osDelay>

		//***get***

		char cad4[]="AT+CIPSEND=%d\r\n";
 8002e36:	4b9c      	ldr	r3, [pc, #624]	; (80030a8 <entregable+0x52c>)
 8002e38:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 8002e3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		char get[]="GET /api/json/cet/now HTTP/1.1\r\nAccept: text/html\r\nHost: worldclockapi.com\r\n\r\n";
 8002e42:	4a9a      	ldr	r2, [pc, #616]	; (80030ac <entregable+0x530>)
 8002e44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e48:	4611      	mov	r1, r2
 8002e4a:	224f      	movs	r2, #79	; 0x4f
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f005 f98f 	bl	8008170 <memcpy>
		char cadenafinalv2[strlen(get)+strlen(cad4)];
 8002e52:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd f9cc 	bl	80001f4 <strlen>
 8002e5c:	4604      	mov	r4, r0
 8002e5e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd f9c6 	bl	80001f4 <strlen>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	441c      	add	r4, r3
 8002e6c:	4623      	mov	r3, r4
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002e74:	4620      	mov	r0, r4
 8002e76:	f04f 0100 	mov.w	r1, #0
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	00cb      	lsls	r3, r1, #3
 8002e84:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002e88:	00c2      	lsls	r2, r0, #3
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f04f 0100 	mov.w	r1, #0
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	00cb      	lsls	r3, r1, #3
 8002e9a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002e9e:	00c2      	lsls	r2, r0, #3
 8002ea0:	1de3      	adds	r3, r4, #7
 8002ea2:	08db      	lsrs	r3, r3, #3
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	ebad 0d03 	sub.w	sp, sp, r3
 8002eaa:	466b      	mov	r3, sp
 8002eac:	3300      	adds	r3, #0
 8002eae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
		sprintf(cadenafinalv2,cad4,strlen(get));
 8002eb2:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 8002eb6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd f99a 	bl	80001f4 <strlen>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f005 fd35 	bl	8008938 <siprintf>
		HAL_UART_Receive_DMA(UART_ESP8266, buffer_DMA,2048);
 8002ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ed2:	4974      	ldr	r1, [pc, #464]	; (80030a4 <entregable+0x528>)
 8002ed4:	4876      	ldr	r0, [pc, #472]	; (80030b0 <entregable+0x534>)
 8002ed6:	f002 f8fa 	bl	80050ce <HAL_UART_Receive_DMA>
		res=HAL_UART_Transmit(UART_ESP_AT_WIFI,cadenafinalv2,strlen(get),1000);
 8002eda:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 8002ede:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd f986 	bl	80001f4 <strlen>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	486f      	ldr	r0, [pc, #444]	; (80030b0 <entregable+0x534>)
 8002ef4:	f002 f859 	bl	8004faa <HAL_UART_Transmit>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 8002efe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f02:	4968      	ldr	r1, [pc, #416]	; (80030a4 <entregable+0x528>)
 8002f04:	486a      	ldr	r0, [pc, #424]	; (80030b0 <entregable+0x534>)
 8002f06:	f002 f8e2 	bl	80050ce <HAL_UART_Receive_DMA>
		osDelay(500);
 8002f0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f0e:	f002 fe7a 	bl	8005c06 <osDelay>
		HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 8002f12:	4867      	ldr	r0, [pc, #412]	; (80030b0 <entregable+0x534>)
 8002f14:	f002 f90b 	bl	800512e <HAL_UART_DMAStop>
		buffer_ct1=buffer_DMA_size - HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 8002f18:	4865      	ldr	r0, [pc, #404]	; (80030b0 <entregable+0x534>)
 8002f1a:	f000 fc4a 	bl	80037b2 <HAL_DMA_getcounter>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002f24:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		buffer_ct=0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		while (buffer_ct<buffer_ct1)
 8002f2e:	e010      	b.n	8002f52 <entregable+0x3d6>
			res=buff->put(buff,buffer_DMA[buffer_ct++]);
 8002f30:	4b5b      	ldr	r3, [pc, #364]	; (80030a0 <entregable+0x524>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	4b5a      	ldr	r3, [pc, #360]	; (80030a0 <entregable+0x524>)
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002f3e:	1c59      	adds	r1, r3, #1
 8002f40:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
 8002f44:	4957      	ldr	r1, [pc, #348]	; (80030a4 <entregable+0x528>)
 8002f46:	5ccb      	ldrb	r3, [r1, r3]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4790      	blx	r2
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		while (buffer_ct<buffer_ct1)
 8002f52:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8002f56:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	dbe8      	blt.n	8002f30 <entregable+0x3b4>
		osDelay(2000);
 8002f5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f62:	f002 fe50 	bl	8005c06 <osDelay>


		HAL_UART_Receive_DMA(UART_ESP8266, buffer_DMA,2048);
 8002f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f6a:	494e      	ldr	r1, [pc, #312]	; (80030a4 <entregable+0x528>)
 8002f6c:	4850      	ldr	r0, [pc, #320]	; (80030b0 <entregable+0x534>)
 8002f6e:	f002 f8ae 	bl	80050ce <HAL_UART_Receive_DMA>
		res=HAL_UART_Transmit(UART_ESP_AT_WIFI,get,strlen(get),1000);
 8002f72:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd f93c 	bl	80001f4 <strlen>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f88:	4849      	ldr	r0, [pc, #292]	; (80030b0 <entregable+0x534>)
 8002f8a:	f002 f80e 	bl	8004faa <HAL_UART_Transmit>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		osDelay(500);
 8002f94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f98:	f002 fe35 	bl	8005c06 <osDelay>
		HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 8002f9c:	4844      	ldr	r0, [pc, #272]	; (80030b0 <entregable+0x534>)
 8002f9e:	f002 f8c6 	bl	800512e <HAL_UART_DMAStop>
		buffer_ct1=buffer_DMA_size - HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 8002fa2:	4843      	ldr	r0, [pc, #268]	; (80030b0 <entregable+0x534>)
 8002fa4:	f000 fc05 	bl	80037b2 <HAL_DMA_getcounter>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002fae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		buffer_ct=0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		while (buffer_ct<buffer_ct1)
 8002fb8:	e010      	b.n	8002fdc <entregable+0x460>
			res=buff->put(buff,buffer_DMA[buffer_ct++]);
 8002fba:	4b39      	ldr	r3, [pc, #228]	; (80030a0 <entregable+0x524>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	4b37      	ldr	r3, [pc, #220]	; (80030a0 <entregable+0x524>)
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002fc8:	1c59      	adds	r1, r3, #1
 8002fca:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
 8002fce:	4935      	ldr	r1, [pc, #212]	; (80030a4 <entregable+0x528>)
 8002fd0:	5ccb      	ldrb	r3, [r1, r3]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4790      	blx	r2
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		while (buffer_ct<buffer_ct1)
 8002fdc:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8002fe0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	dbe8      	blt.n	8002fba <entregable+0x43e>
		osDelay(20);
 8002fe8:	2014      	movs	r0, #20
 8002fea:	f002 fe0c 	bl	8005c06 <osDelay>

		char *jsonp=strstr(buffer_DMA,"{");
 8002fee:	217b      	movs	r1, #123	; 0x7b
 8002ff0:	482c      	ldr	r0, [pc, #176]	; (80030a4 <entregable+0x528>)
 8002ff2:	f005 fd32 	bl	8008a5a <strchr>
 8002ff6:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
		jsonp[strlen(jsonp)-2]='\0';
 8002ffa:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8002ffe:	f7fd f8f9 	bl	80001f4 <strlen>
 8003002:	4603      	mov	r3, r0
 8003004:	3b02      	subs	r3, #2
 8003006:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800300a:	4413      	add	r3, r2
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
		const cJSON *fecha = NULL;
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
		cJSON * jsonB = cJSON_Parse(jsonp);
 8003016:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 800301a:	f7fe fd65 	bl	8001ae8 <cJSON_Parse>
 800301e:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
		fecha = cJSON_GetObjectItemCaseSensitive(jsonB, "currentDateTime");
 8003022:	4924      	ldr	r1, [pc, #144]	; (80030b4 <entregable+0x538>)
 8003024:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8003028:	f7ff f863 	bl	80020f2 <cJSON_GetObjectItemCaseSensitive>
 800302c:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
		char* fechaSTR= fecha->valuestring;
 8003030:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		struct tm hora;
		char *format = "%Y-%Om-%dT%H:%M%z";
 800303a:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <entregable+0x53c>)
 800303c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		strptime(fechaSTR, format, &hora);
 8003040:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003044:	461a      	mov	r2, r3
 8003046:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800304a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800304e:	f006 fe31 	bl	8009cb4 <strptime>

		while(1){
			hora.tm_sec+=2;
 8003052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003054:	3302      	adds	r3, #2
 8003056:	677b      	str	r3, [r7, #116]	; 0x74
			mktime(&hora);
 8003058:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800305c:	4618      	mov	r0, r3
 800305e:	f005 f975 	bl	800834c <mktime>
			char hora2[100];
			strftime(hora2,100,"%Y-%Om-%d %H:%M:%S\r\n",&hora);
 8003062:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003066:	f107 0010 	add.w	r0, r7, #16
 800306a:	4a14      	ldr	r2, [pc, #80]	; (80030bc <entregable+0x540>)
 800306c:	2164      	movs	r1, #100	; 0x64
 800306e:	f006 fa5b 	bl	8009528 <strftime>
			res=buff->puts(buff,(BUFF_ITEM_t *)hora2,strlen(hora2));
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <entregable+0x524>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691c      	ldr	r4, [r3, #16]
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <entregable+0x524>)
 800307a:	681d      	ldr	r5, [r3, #0]
 800307c:	f107 0310 	add.w	r3, r7, #16
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd f8b7 	bl	80001f4 <strlen>
 8003086:	4602      	mov	r2, r0
 8003088:	f107 0310 	add.w	r3, r7, #16
 800308c:	4619      	mov	r1, r3
 800308e:	4628      	mov	r0, r5
 8003090:	47a0      	blx	r4
 8003092:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
			vTaskDelay(2000/portTICK_RATE_MS );
 8003096:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800309a:	f003 fc11 	bl	80068c0 <vTaskDelay>
		while(1){
 800309e:	e7d8      	b.n	8003052 <entregable+0x4d6>
 80030a0:	20004e6c 	.word	0x20004e6c
 80030a4:	20004404 	.word	0x20004404
 80030a8:	0800dc98 	.word	0x0800dc98
 80030ac:	0800dca8 	.word	0x0800dca8
 80030b0:	2000431c 	.word	0x2000431c
 80030b4:	0800dc34 	.word	0x0800dc34
 80030b8:	0800dc44 	.word	0x0800dc44
 80030bc:	0800dc58 	.word	0x0800dc58

080030c0 <Task_Send>:
		}
}


void Task_Send( void *pvParameters ){
 80030c0:	b5b0      	push	{r4, r5, r7, lr}
 80030c2:	b09e      	sub	sp, #120	; 0x78
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

	uint32_t it;
    uint32_t res;

	char cad[100];
	it=0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	677b      	str	r3, [r7, #116]	; 0x74
	//boot_wifi("OPPOReno2","ilovematy");
	entregable("worldclockapi.com","OPPOReno2","ilovematy");
 80030cc:	4a12      	ldr	r2, [pc, #72]	; (8003118 <Task_Send+0x58>)
 80030ce:	4913      	ldr	r1, [pc, #76]	; (800311c <Task_Send+0x5c>)
 80030d0:	4813      	ldr	r0, [pc, #76]	; (8003120 <Task_Send+0x60>)
 80030d2:	f7ff fd53 	bl	8002b7c <entregable>
	while(1){
		it++;
 80030d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d8:	3301      	adds	r3, #1
 80030da:	677b      	str	r3, [r7, #116]	; 0x74
		sprintf(cad,"IT %d\r\n",(int)it);
 80030dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	4910      	ldr	r1, [pc, #64]	; (8003124 <Task_Send+0x64>)
 80030e4:	4618      	mov	r0, r3
 80030e6:	f005 fc27 	bl	8008938 <siprintf>
		res=buff->puts(buff,(BUFF_ITEM_t *)cad,strlen(cad));
 80030ea:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <Task_Send+0x68>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691c      	ldr	r4, [r3, #16]
 80030f0:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <Task_Send+0x68>)
 80030f2:	681d      	ldr	r5, [r3, #0]
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fd f87b 	bl	80001f4 <strlen>
 80030fe:	4602      	mov	r2, r0
 8003100:	f107 030c 	add.w	r3, r7, #12
 8003104:	4619      	mov	r1, r3
 8003106:	4628      	mov	r0, r5
 8003108:	47a0      	blx	r4
 800310a:	6738      	str	r0, [r7, #112]	; 0x70
		vTaskDelay(10000/portTICK_RATE_MS );
 800310c:	f242 7010 	movw	r0, #10000	; 0x2710
 8003110:	f003 fbd6 	bl	80068c0 <vTaskDelay>
		it++;
 8003114:	e7df      	b.n	80030d6 <Task_Send+0x16>
 8003116:	bf00      	nop
 8003118:	0800dcf8 	.word	0x0800dcf8
 800311c:	0800dd04 	.word	0x0800dd04
 8003120:	0800dd10 	.word	0x0800dd10
 8003124:	0800dd24 	.word	0x0800dd24
 8003128:	20004e6c 	.word	0x20004e6c

0800312c <Task_Receive>:

	}
}

void Task_Receive( void *pvParameters ){
 800312c:	b580      	push	{r7, lr}
 800312e:	b0a8      	sub	sp, #160	; 0xa0
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
#define buffer_length	128
    BUFF_ITEM_t  buffer[buffer_length];
    int buffer_ct,buffer_ct1;
    int crln_detect;

	it=0;
 8003134:	2300      	movs	r3, #0
 8003136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


	while(1){
		it++;
 800313a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800313e:	3301      	adds	r3, #1
 8003140:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

		crln_detect=0;
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		buffer_ct=0;
 800314a:	2300      	movs	r3, #0
 800314c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		while(crln_detect<2){
 8003150:	e03a      	b.n	80031c8 <Task_Receive+0x9c>
	    	res=buff->get(buff_rx,&car);
 8003152:	4b3e      	ldr	r3, [pc, #248]	; (800324c <Task_Receive+0x120>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a3d      	ldr	r2, [pc, #244]	; (8003250 <Task_Receive+0x124>)
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	f107 018b 	add.w	r1, r7, #139	; 0x8b
 8003160:	4610      	mov	r0, r2
 8003162:	4798      	blx	r3
 8003164:	4603      	mov	r3, r0
 8003166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	    	buffer[buffer_ct++]=car;
 800316a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8003174:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 8003178:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800317c:	440b      	add	r3, r1
 800317e:	f803 2c98 	strb.w	r2, [r3, #-152]
	    	if (buffer_ct>1){
 8003182:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003186:	2b01      	cmp	r3, #1
 8003188:	dd1e      	ble.n	80031c8 <Task_Receive+0x9c>

	    		if ((buffer[buffer_ct-2]=='\r')&&(buffer[buffer_ct-1]=='\n')) // \r\n detection end of line
 800318a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800318e:	3b02      	subs	r3, #2
 8003190:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8003194:	4413      	add	r3, r2
 8003196:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 800319a:	2b0d      	cmp	r3, #13
 800319c:	d10d      	bne.n	80031ba <Task_Receive+0x8e>
 800319e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031a2:	3b01      	subs	r3, #1
 80031a4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80031a8:	4413      	add	r3, r2
 80031aa:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 80031ae:	2b0a      	cmp	r3, #10
 80031b0:	d103      	bne.n	80031ba <Task_Receive+0x8e>
					crln_detect=2;
 80031b2:	2302      	movs	r3, #2
 80031b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031b8:	e006      	b.n	80031c8 <Task_Receive+0x9c>
				else
					if ((buffer_ct)==buffer_length)  // line out of limits --> error
 80031ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031be:	2b80      	cmp	r3, #128	; 0x80
 80031c0:	d102      	bne.n	80031c8 <Task_Receive+0x9c>
						crln_detect=3;
 80031c2:	2303      	movs	r3, #3
 80031c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		while(crln_detect<2){
 80031c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	ddc0      	ble.n	8003152 <Task_Receive+0x26>
	    	}

		}

		// prepare reception buffer from ESP
		HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 80031d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031d4:	491f      	ldr	r1, [pc, #124]	; (8003254 <Task_Receive+0x128>)
 80031d6:	4820      	ldr	r0, [pc, #128]	; (8003258 <Task_Receive+0x12c>)
 80031d8:	f001 ff79 	bl	80050ce <HAL_UART_Receive_DMA>
		// send line (command) to ESP
		res=HAL_UART_Transmit(UART_ESP_AT_WIFI,buffer,buffer_ct,1000);
 80031dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	f107 0108 	add.w	r1, r7, #8
 80031e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ea:	481b      	ldr	r0, [pc, #108]	; (8003258 <Task_Receive+0x12c>)
 80031ec:	f001 fedd 	bl	8004faa <HAL_UART_Transmit>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		// wait a bit time
		osDelay(500);
 80031f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031fa:	f002 fd04 	bl	8005c06 <osDelay>
		//stop reception probably all data are in dma buffer
		HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 80031fe:	4816      	ldr	r0, [pc, #88]	; (8003258 <Task_Receive+0x12c>)
 8003200:	f001 ff95 	bl	800512e <HAL_UART_DMAStop>

		// send to console ESP answer.
		buffer_ct1=HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 8003204:	4814      	ldr	r0, [pc, #80]	; (8003258 <Task_Receive+0x12c>)
 8003206:	f000 fad4 	bl	80037b2 <HAL_DMA_getcounter>
 800320a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		buffer_ct=0;
 800320e:	2300      	movs	r3, #0
 8003210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		while (buffer_ct<buffer_ct1)
 8003214:	e010      	b.n	8003238 <Task_Receive+0x10c>
			res=buff->put(buff,buffer_DMA[buffer_ct++]);
 8003216:	4b0d      	ldr	r3, [pc, #52]	; (800324c <Task_Receive+0x120>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <Task_Receive+0x120>)
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003224:	1c59      	adds	r1, r3, #1
 8003226:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800322a:	490a      	ldr	r1, [pc, #40]	; (8003254 <Task_Receive+0x128>)
 800322c:	5ccb      	ldrb	r3, [r1, r3]
 800322e:	4619      	mov	r1, r3
 8003230:	4790      	blx	r2
 8003232:	4603      	mov	r3, r0
 8003234:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (buffer_ct<buffer_ct1)
 8003238:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800323c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003240:	429a      	cmp	r2, r3
 8003242:	dbe8      	blt.n	8003216 <Task_Receive+0xea>
		// wait a bit time
		osDelay(1);
 8003244:	2001      	movs	r0, #1
 8003246:	f002 fcde 	bl	8005c06 <osDelay>
	while(1){
 800324a:	e776      	b.n	800313a <Task_Receive+0xe>
 800324c:	20004e6c 	.word	0x20004e6c
 8003250:	20004c68 	.word	0x20004c68
 8003254:	20004404 	.word	0x20004404
 8003258:	2000431c 	.word	0x2000431c

0800325c <BUFF_is_empty>:
#include <task.h>
#include <math.h>

/////////////////////////////////////////////////////////////////////////////////////// BUFFER sin proteccion

uint32_t BUFF_is_empty(BUFF_BUFFER_t * buffer){
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	return (buffer->n_elem==0);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf0c      	ite	eq
 800326c:	2301      	moveq	r3, #1
 800326e:	2300      	movne	r3, #0
 8003270:	b2db      	uxtb	r3, r3
}
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <BUFF_is_full>:

uint32_t BUFF_is_full(BUFF_BUFFER_t * buffer){
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
	return (buffer->n_elem==buffer->size);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	429a      	cmp	r2, r3
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	b2db      	uxtb	r3, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <BUFF_inserta>:

uint32_t BUFF_inserta(BUFF_BUFFER_t * buffer,BUFF_ITEM_t item){
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	70fb      	strb	r3, [r7, #3]

	if (!buffer->isfull(buffer)){
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4798      	blx	r3
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d119      	bne.n	80032f2 <BUFF_inserta+0x4e>
		buffer->buff[buffer->cabeza]=item;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	4413      	add	r3, r2
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	701a      	strb	r2, [r3, #0]
		buffer->cabeza=((buffer->cabeza)+1)%(buffer->size);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	3301      	adds	r3, #1
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6a12      	ldr	r2, [r2, #32]
 80032d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80032da:	fb02 f201 	mul.w	r2, r2, r1
 80032de:	1a9a      	subs	r2, r3, r2
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	619a      	str	r2, [r3, #24]
		buffer->n_elem++;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	629a      	str	r2, [r3, #40]	; 0x28
		return 1;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <BUFF_inserta+0x50>
	} else return 0;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <BUFF_extrae>:

uint32_t BUFF_extrae(BUFF_BUFFER_t * buffer,BUFF_ITEM_t *item){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]

	if (!buffer->isempty(buffer)){
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d11a      	bne.n	800334a <BUFF_extrae+0x4e>
			*item=buffer->buff[buffer->cola];
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	4413      	add	r3, r2
 800331e:	781a      	ldrb	r2, [r3, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	701a      	strb	r2, [r3, #0]
			buffer->cola=(buffer->cola+1)%(buffer->size);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	3301      	adds	r3, #1
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6a12      	ldr	r2, [r2, #32]
 800332e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003332:	fb02 f201 	mul.w	r2, r2, r1
 8003336:	1a9a      	subs	r2, r3, r2
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	61da      	str	r2, [r3, #28]
			buffer->n_elem--;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	1e5a      	subs	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	629a      	str	r2, [r3, #40]	; 0x28

	} else return 0;

   return 1;
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <BUFF_extrae+0x50>
	} else return 0;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <BUFF_extrae_prot>:

uint32_t BUFF_extrae_prot(BUFF_BUFFER_t * buffer,BUFF_ITEM_t *item)
{ //variable condicion
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
	int it;

	it=0;
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
	while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 8003362:	bf00      	nop
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f242 7110 	movw	r1, #10000	; 0x2710
 800336c:	4618      	mov	r0, r3
 800336e:	f002 ff05 	bl	800617c <xQueueSemaphoreTake>
 8003372:	4603      	mov	r3, r0
 8003374:	2b01      	cmp	r3, #1
 8003376:	d1f5      	bne.n	8003364 <BUFF_extrae_prot+0x10>
	 // lock
	while(!BUFF_extrae(buffer,item)){
 8003378:	e017      	b.n	80033aa <BUFF_extrae_prot+0x56>
			 xSemaphoreGive(buffer->xSem);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6958      	ldr	r0, [r3, #20]
 800337e:	2300      	movs	r3, #0
 8003380:	2200      	movs	r2, #0
 8003382:	2100      	movs	r1, #0
 8003384:	f002 fdfc 	bl	8005f80 <xQueueGenericSend>
	 		 vTaskDelay(100/portTICK_RATE_MS );
 8003388:	2064      	movs	r0, #100	; 0x64
 800338a:	f003 fa99 	bl	80068c0 <vTaskDelay>
	 		 while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 800338e:	bf00      	nop
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f242 7110 	movw	r1, #10000	; 0x2710
 8003398:	4618      	mov	r0, r3
 800339a:	f002 feef 	bl	800617c <xQueueSemaphoreTake>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d1f5      	bne.n	8003390 <BUFF_extrae_prot+0x3c>
	 		 it++;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3301      	adds	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]
	while(!BUFF_extrae(buffer,item)){
 80033aa:	6839      	ldr	r1, [r7, #0]
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ffa5 	bl	80032fc <BUFF_extrae>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0e0      	beq.n	800337a <BUFF_extrae_prot+0x26>
	}
	xSemaphoreGive(buffer->xSem);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6958      	ldr	r0, [r3, #20]
 80033bc:	2300      	movs	r3, #0
 80033be:	2200      	movs	r2, #0
 80033c0:	2100      	movs	r1, #0
 80033c2:	f002 fddd 	bl	8005f80 <xQueueGenericSend>
	return 1; // siempre tiene éxito
 80033c6:	2301      	movs	r3, #1
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <BUFF_inserta_prot>:
uint32_t BUFF_inserta_prot(BUFF_BUFFER_t * buffer,BUFF_ITEM_t item)
{ //variable condicion
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	70fb      	strb	r3, [r7, #3]
	int it;

	it=0;
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]
	while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 80033e0:	bf00      	nop
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f242 7110 	movw	r1, #10000	; 0x2710
 80033ea:	4618      	mov	r0, r3
 80033ec:	f002 fec6 	bl	800617c <xQueueSemaphoreTake>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d1f5      	bne.n	80033e2 <BUFF_inserta_prot+0x12>
	 // lock
	while(!BUFF_inserta(buffer,item)){
 80033f6:	e017      	b.n	8003428 <BUFF_inserta_prot+0x58>
	 		 xSemaphoreGive(buffer->xSem);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6958      	ldr	r0, [r3, #20]
 80033fc:	2300      	movs	r3, #0
 80033fe:	2200      	movs	r2, #0
 8003400:	2100      	movs	r1, #0
 8003402:	f002 fdbd 	bl	8005f80 <xQueueGenericSend>
	 		 vTaskDelay(100/portTICK_RATE_MS );
 8003406:	2064      	movs	r0, #100	; 0x64
 8003408:	f003 fa5a 	bl	80068c0 <vTaskDelay>
	 		 while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 800340c:	bf00      	nop
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f242 7110 	movw	r1, #10000	; 0x2710
 8003416:	4618      	mov	r0, r3
 8003418:	f002 feb0 	bl	800617c <xQueueSemaphoreTake>
 800341c:	4603      	mov	r3, r0
 800341e:	2b01      	cmp	r3, #1
 8003420:	d1f5      	bne.n	800340e <BUFF_inserta_prot+0x3e>
	 		 it++;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3301      	adds	r3, #1
 8003426:	60fb      	str	r3, [r7, #12]
	while(!BUFF_inserta(buffer,item)){
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	4619      	mov	r1, r3
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ff39 	bl	80032a4 <BUFF_inserta>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0df      	beq.n	80033f8 <BUFF_inserta_prot+0x28>
	}
	xSemaphoreGive(buffer->xSem);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6958      	ldr	r0, [r3, #20]
 800343c:	2300      	movs	r3, #0
 800343e:	2200      	movs	r2, #0
 8003440:	2100      	movs	r1, #0
 8003442:	f002 fd9d 	bl	8005f80 <xQueueGenericSend>
	return 1; // siempre tiene éxito
 8003446:	2301      	movs	r3, #1
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <BUFF_inserta_cad>:

uint32_t BUFF_inserta_cad(BUFF_BUFFER_t * buffer,BUFF_ITEM_t * cad,uint32_t nitems)
{ //variable condicion
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]

	int it;
	uint32_t res;
	for (it=0;it<nitems;it++)
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	e010      	b.n	8003484 <BUFF_inserta_cad+0x34>
	{
		res=BUFF_inserta_prot(buffer,cad[it]);
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	4413      	add	r3, r2
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	4619      	mov	r1, r3
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f7ff ffaf 	bl	80033d0 <BUFF_inserta_prot>
 8003472:	6138      	str	r0, [r7, #16]
		if (!res) return it;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <BUFF_inserta_cad+0x2e>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	e007      	b.n	800348e <BUFF_inserta_cad+0x3e>
	for (it=0;it<nitems;it++)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	3301      	adds	r3, #1
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	429a      	cmp	r2, r3
 800348a:	d8ea      	bhi.n	8003462 <BUFF_inserta_cad+0x12>
	}
	return 1; // siempre tiene éxito
 800348c:	2301      	movs	r3, #1
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <bufferCreat>:
} BUFF_BUFFER_t;
*/


// API
BUFF_BUFFER_t * bufferCreat(int size){
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
	BUFF_BUFFER_t * tmp;
	void * bff;

	tmp=malloc(sizeof(BUFF_BUFFER_t));
 80034a0:	202c      	movs	r0, #44	; 0x2c
 80034a2:	f004 fe55 	bl	8008150 <malloc>
 80034a6:	4603      	mov	r3, r0
 80034a8:	60fb      	str	r3, [r7, #12]
	if (tmp){ // enought for structure
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d03d      	beq.n	800352c <bufferCreat+0x94>

		bff=malloc(sizeof(uint8_t)*size);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f004 fe4c 	bl	8008150 <malloc>
 80034b8:	4603      	mov	r3, r0
 80034ba:	60bb      	str	r3, [r7, #8]
		if (bff){ //enought for buffer
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d031      	beq.n	8003526 <bufferCreat+0x8e>
			tmp->xSem=xSemaphoreCreateMutex();
 80034c2:	2001      	movs	r0, #1
 80034c4:	f002 fd43 	bl	8005f4e <xQueueCreateMutex>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	615a      	str	r2, [r3, #20]
			if (!tmp->xSem){
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d107      	bne.n	80034e6 <bufferCreat+0x4e>
				free(bff);
 80034d6:	68b8      	ldr	r0, [r7, #8]
 80034d8:	f004 fe42 	bl	8008160 <free>
				free(tmp);
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f004 fe3f 	bl	8008160 <free>
				return NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e023      	b.n	800352e <bufferCreat+0x96>
			};
            tmp->buff=bff;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24
			tmp->cabeza=0;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	619a      	str	r2, [r3, #24]
			tmp->cola=0;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	61da      	str	r2, [r3, #28]
			tmp->size=size;
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	621a      	str	r2, [r3, #32]
			tmp->n_elem=0;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	629a      	str	r2, [r3, #40]	; 0x28
			tmp->get=(void*)BUFF_extrae_prot;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a0c      	ldr	r2, [pc, #48]	; (8003538 <bufferCreat+0xa0>)
 8003508:	601a      	str	r2, [r3, #0]
			tmp->put=(void*)BUFF_inserta_prot;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4a0b      	ldr	r2, [pc, #44]	; (800353c <bufferCreat+0xa4>)
 800350e:	605a      	str	r2, [r3, #4]
			tmp->puts=(void*)BUFF_inserta_cad;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <bufferCreat+0xa8>)
 8003514:	611a      	str	r2, [r3, #16]

			tmp->isfull=(void*)BUFF_is_full;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <bufferCreat+0xac>)
 800351a:	60da      	str	r2, [r3, #12]
			tmp->isempty=(void*)BUFF_is_empty;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <bufferCreat+0xb0>)
 8003520:	609a      	str	r2, [r3, #8]
			return tmp;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	e003      	b.n	800352e <bufferCreat+0x96>
		}
		else
			free(tmp);
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f004 fe1a 	bl	8008160 <free>
	}
	return NULL;
 800352c:	2300      	movs	r3, #0

}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	08003355 	.word	0x08003355
 800353c:	080033d1 	.word	0x080033d1
 8003540:	08003451 	.word	0x08003451
 8003544:	0800327f 	.word	0x0800327f
 8003548:	0800325d 	.word	0x0800325d

0800354c <makeFreeRtosPriority>:
uint8_t buffer_DMA_1[buffer_SIZE];
uint8_t buffer_DMA_2[buffer_SIZE];


unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	80fb      	strh	r3, [r7, #6]
unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]

if (priority != osPriorityError) {
 800355a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800355e:	2b84      	cmp	r3, #132	; 0x84
 8003560:	d005      	beq.n	800356e <makeFreeRtosPriority+0x22>
fpriority += (priority - osPriorityIdle);
 8003562:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4413      	add	r3, r2
 800356a:	3303      	adds	r3, #3
 800356c:	60fb      	str	r3, [r7, #12]
}

return fpriority;
 800356e:	68fb      	ldr	r3, [r7, #12]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <_write>:

int _write(int file, char *ptr, int len)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	e00b      	b.n	80035a6 <_write+0x2a>
	{
	    //ITM_SendChar( *ptr++ );
	   HAL_UART_Transmit(&huart2, (uint8_t*)ptr++,1,1000);
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	1c4b      	adds	r3, r1, #1
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003598:	2201      	movs	r2, #1
 800359a:	4807      	ldr	r0, [pc, #28]	; (80035b8 <_write+0x3c>)
 800359c:	f001 fd05 	bl	8004faa <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	3301      	adds	r3, #1
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	dbef      	blt.n	800358e <_write+0x12>
	}

	return len;
 80035ae:	687b      	ldr	r3, [r7, #4]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	200043c0 	.word	0x200043c0

080035bc <UART_EndRxTransfer>:
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */

static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035bc:	b480      	push	{r7}
 80035be:	b095      	sub	sp, #84	; 0x54
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	330c      	adds	r3, #12
 80035ca:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ce:	e853 3f00 	ldrex	r3, [r3]
 80035d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	330c      	adds	r3, #12
 80035e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035e4:	643a      	str	r2, [r7, #64]	; 0x40
 80035e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e5      	bne.n	80035c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3314      	adds	r3, #20
 80035fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	e853 3f00 	ldrex	r3, [r3]
 8003606:	61fb      	str	r3, [r7, #28]
   return(result);
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f023 0301 	bic.w	r3, r3, #1
 800360e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3314      	adds	r3, #20
 8003616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003618:	62fa      	str	r2, [r7, #44]	; 0x2c
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800361e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003620:	e841 2300 	strex	r3, r2, [r1]
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1e5      	bne.n	80035f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	2b01      	cmp	r3, #1
 8003632:	d119      	bne.n	8003668 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	60bb      	str	r3, [r7, #8]
   return(result);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f023 0310 	bic.w	r3, r3, #16
 800364a:	647b      	str	r3, [r7, #68]	; 0x44
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	330c      	adds	r3, #12
 8003652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003654:	61ba      	str	r2, [r7, #24]
 8003656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	6979      	ldr	r1, [r7, #20]
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	613b      	str	r3, [r7, #16]
   return(result);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e5      	bne.n	8003634 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003676:	bf00      	nop
 8003678:	3754      	adds	r7, #84	; 0x54
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_DMA_Abort_PAS>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_PAS(DMA_HandleTypeDef *hdma)
{
 8003682:	b480      	push	{r7}
 8003684:	b085      	sub	sp, #20
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	60fb      	str	r3, [r7, #12]

  //uint32_t tickstart = HAL_GetTick();

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d008      	beq.n	80036ae <HAL_DMA_Abort_PAS+0x2c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2280      	movs	r2, #128	; 0x80
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e036      	b.n	800371c <HAL_DMA_Abort_PAS+0x9a>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0216 	bic.w	r2, r2, #22
 80036bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695a      	ldr	r2, [r3, #20]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036cc:	615a      	str	r2, [r3, #20]

    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d103      	bne.n	80036de <HAL_DMA_Abort_PAS+0x5c>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <HAL_DMA_Abort_PAS+0x6c>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0208 	bic.w	r2, r2, #8
 80036ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0201 	bic.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
        return HAL_TIMEOUT;
      }
    }*/

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003702:	223f      	movs	r2, #63	; 0x3f
 8003704:	409a      	lsls	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	609a      	str	r2, [r3, #8]

    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_UART_DMAStop_PAS>:

HAL_StatusTypeDef HAL_UART_DMAStop_PAS(UART_HandleTypeDef *huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	; 0x28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003730:	2300      	movs	r3, #0
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */


  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	bf0c      	ite	eq
 8003742:	2301      	moveq	r3, #1
 8003744:	2300      	movne	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b22      	cmp	r3, #34	; 0x22
 8003754:	d128      	bne.n	80037a8 <HAL_UART_DMAStop_PAS+0x80>
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	2b00      	cmp	r3, #0
 800375a:	d025      	beq.n	80037a8 <HAL_UART_DMAStop_PAS+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3314      	adds	r3, #20
 8003762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	e853 3f00 	ldrex	r3, [r3]
 800376a:	60fb      	str	r3, [r7, #12]
   return(result);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003772:	623b      	str	r3, [r7, #32]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3314      	adds	r3, #20
 800377a:	6a3a      	ldr	r2, [r7, #32]
 800377c:	61fa      	str	r2, [r7, #28]
 800377e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003780:	69b9      	ldr	r1, [r7, #24]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	e841 2300 	strex	r3, r2, [r1]
 8003788:	617b      	str	r3, [r7, #20]
   return(result);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e5      	bne.n	800375c <HAL_UART_DMAStop_PAS+0x34>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	2b00      	cmp	r3, #0
 8003796:	d004      	beq.n	80037a2 <HAL_UART_DMAStop_PAS+0x7a>
    {
      HAL_DMA_Abort_PAS(huart->hdmarx);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff70 	bl	8003682 <HAL_DMA_Abort_PAS>
    }
    UART_EndRxTransfer(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff ff0a 	bl	80035bc <UART_EndRxTransfer>
  }

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3728      	adds	r7, #40	; 0x28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_DMA_getcounter>:



uint32_t HAL_DMA_getcounter(UART_HandleTypeDef *huart){
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
	return huart->hdmarx->Instance->NDTR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80037d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003808 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037d4:	480d      	ldr	r0, [pc, #52]	; (800380c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037d6:	490e      	ldr	r1, [pc, #56]	; (8003810 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037d8:	4a0e      	ldr	r2, [pc, #56]	; (8003814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037dc:	e002      	b.n	80037e4 <LoopCopyDataInit>

080037de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037e2:	3304      	adds	r3, #4

080037e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037e8:	d3f9      	bcc.n	80037de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037ea:	4a0b      	ldr	r2, [pc, #44]	; (8003818 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037ec:	4c0b      	ldr	r4, [pc, #44]	; (800381c <LoopFillZerobss+0x26>)
  movs r3, #0
 80037ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037f0:	e001      	b.n	80037f6 <LoopFillZerobss>

080037f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037f4:	3204      	adds	r2, #4

080037f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037f8:	d3fb      	bcc.n	80037f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037fa:	f7ff f82b 	bl	8002854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037fe:	f004 fc7d 	bl	80080fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003802:	f7fe fc9f 	bl	8002144 <main>
  bx  lr    
 8003806:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003808:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800380c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003810:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8003814:	0800e580 	.word	0x0800e580
  ldr r2, =_sbss
 8003818:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 800381c:	20005084 	.word	0x20005084

08003820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003820:	e7fe      	b.n	8003820 <ADC_IRQHandler>
	...

08003824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003828:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <HAL_Init+0x40>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <HAL_Init+0x40>)
 800382e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003834:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <HAL_Init+0x40>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <HAL_Init+0x40>)
 800383a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800383e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <HAL_Init+0x40>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a07      	ldr	r2, [pc, #28]	; (8003864 <HAL_Init+0x40>)
 8003846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800384c:	2003      	movs	r0, #3
 800384e:	f000 f92b 	bl	8003aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003852:	200f      	movs	r0, #15
 8003854:	f000 f808 	bl	8003868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003858:	f7fe fe0e 	bl	8002478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40023c00 	.word	0x40023c00

08003868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003870:	4b12      	ldr	r3, [pc, #72]	; (80038bc <HAL_InitTick+0x54>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <HAL_InitTick+0x58>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	4619      	mov	r1, r3
 800387a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800387e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f943 	bl	8003b12 <HAL_SYSTICK_Config>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e00e      	b.n	80038b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b0f      	cmp	r3, #15
 800389a:	d80a      	bhi.n	80038b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800389c:	2200      	movs	r2, #0
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	f000 f90b 	bl	8003abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038a8:	4a06      	ldr	r2, [pc, #24]	; (80038c4 <HAL_InitTick+0x5c>)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e000      	b.n	80038b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000010 	.word	0x20000010
 80038c0:	20000018 	.word	0x20000018
 80038c4:	20000014 	.word	0x20000014

080038c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_IncTick+0x20>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	4b06      	ldr	r3, [pc, #24]	; (80038ec <HAL_IncTick+0x24>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4413      	add	r3, r2
 80038d8:	4a04      	ldr	r2, [pc, #16]	; (80038ec <HAL_IncTick+0x24>)
 80038da:	6013      	str	r3, [r2, #0]
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000018 	.word	0x20000018
 80038ec:	20005070 	.word	0x20005070

080038f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  return uwTick;
 80038f4:	4b03      	ldr	r3, [pc, #12]	; (8003904 <HAL_GetTick+0x14>)
 80038f6:	681b      	ldr	r3, [r3, #0]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20005070 	.word	0x20005070

08003908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <__NVIC_SetPriorityGrouping+0x44>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003924:	4013      	ands	r3, r2
 8003926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800393a:	4a04      	ldr	r2, [pc, #16]	; (800394c <__NVIC_SetPriorityGrouping+0x44>)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	60d3      	str	r3, [r2, #12]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	e000ed00 	.word	0xe000ed00

08003950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <__NVIC_GetPriorityGrouping+0x18>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	f003 0307 	and.w	r3, r3, #7
}
 800395e:	4618      	mov	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	2b00      	cmp	r3, #0
 800397c:	db0b      	blt.n	8003996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	f003 021f 	and.w	r2, r3, #31
 8003984:	4907      	ldr	r1, [pc, #28]	; (80039a4 <__NVIC_EnableIRQ+0x38>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2001      	movs	r0, #1
 800398e:	fa00 f202 	lsl.w	r2, r0, r2
 8003992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	e000e100 	.word	0xe000e100

080039a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	db0a      	blt.n	80039d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	490c      	ldr	r1, [pc, #48]	; (80039f4 <__NVIC_SetPriority+0x4c>)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	0112      	lsls	r2, r2, #4
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	440b      	add	r3, r1
 80039cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d0:	e00a      	b.n	80039e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	4908      	ldr	r1, [pc, #32]	; (80039f8 <__NVIC_SetPriority+0x50>)
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	3b04      	subs	r3, #4
 80039e0:	0112      	lsls	r2, r2, #4
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	440b      	add	r3, r1
 80039e6:	761a      	strb	r2, [r3, #24]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000e100 	.word	0xe000e100
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b089      	sub	sp, #36	; 0x24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f1c3 0307 	rsb	r3, r3, #7
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	bf28      	it	cs
 8003a1a:	2304      	movcs	r3, #4
 8003a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3304      	adds	r3, #4
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d902      	bls.n	8003a2c <NVIC_EncodePriority+0x30>
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3b03      	subs	r3, #3
 8003a2a:	e000      	b.n	8003a2e <NVIC_EncodePriority+0x32>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	f04f 32ff 	mov.w	r2, #4294967295
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	401a      	ands	r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a44:	f04f 31ff 	mov.w	r1, #4294967295
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	43d9      	mvns	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a54:	4313      	orrs	r3, r2
         );
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3724      	adds	r7, #36	; 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a74:	d301      	bcc.n	8003a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a76:	2301      	movs	r3, #1
 8003a78:	e00f      	b.n	8003a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <SysTick_Config+0x40>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a82:	210f      	movs	r1, #15
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295
 8003a88:	f7ff ff8e 	bl	80039a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <SysTick_Config+0x40>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a92:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <SysTick_Config+0x40>)
 8003a94:	2207      	movs	r2, #7
 8003a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	e000e010 	.word	0xe000e010

08003aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ff29 	bl	8003908 <__NVIC_SetPriorityGrouping>
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
 8003aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad0:	f7ff ff3e 	bl	8003950 <__NVIC_GetPriorityGrouping>
 8003ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	6978      	ldr	r0, [r7, #20]
 8003adc:	f7ff ff8e 	bl	80039fc <NVIC_EncodePriority>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff5d 	bl	80039a8 <__NVIC_SetPriority>
}
 8003aee:	bf00      	nop
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	4603      	mov	r3, r0
 8003afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ff31 	bl	800396c <__NVIC_EnableIRQ>
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff ffa2 	bl	8003a64 <SysTick_Config>
 8003b20:	4603      	mov	r3, r0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b38:	f7ff feda 	bl	80038f0 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e099      	b.n	8003c7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0201 	bic.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b68:	e00f      	b.n	8003b8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b6a:	f7ff fec1 	bl	80038f0 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b05      	cmp	r3, #5
 8003b76:	d908      	bls.n	8003b8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2203      	movs	r2, #3
 8003b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e078      	b.n	8003c7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e8      	bne.n	8003b6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4b38      	ldr	r3, [pc, #224]	; (8003c84 <HAL_DMA_Init+0x158>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d107      	bne.n	8003bf4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	4313      	orrs	r3, r2
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0307 	bic.w	r3, r3, #7
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d117      	bne.n	8003c4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00e      	beq.n	8003c4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fadf 	bl	80041f4 <DMA_CheckFifoParam>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2240      	movs	r2, #64	; 0x40
 8003c40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e016      	b.n	8003c7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa96 	bl	8004188 <DMA_CalcBaseAndBitshift>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c64:	223f      	movs	r2, #63	; 0x3f
 8003c66:	409a      	lsls	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	f010803f 	.word	0xf010803f

08003c88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_DMA_Start_IT+0x26>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e040      	b.n	8003d30 <HAL_DMA_Start_IT+0xa8>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d12f      	bne.n	8003d22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 fa28 	bl	800412c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce0:	223f      	movs	r2, #63	; 0x3f
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0216 	orr.w	r2, r2, #22
 8003cf6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0208 	orr.w	r2, r2, #8
 8003d0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e005      	b.n	8003d2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d46:	f7ff fdd3 	bl	80038f0 <HAL_GetTick>
 8003d4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d008      	beq.n	8003d6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2280      	movs	r2, #128	; 0x80
 8003d5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e052      	b.n	8003e10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0216 	bic.w	r2, r2, #22
 8003d78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695a      	ldr	r2, [r3, #20]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d103      	bne.n	8003d9a <HAL_DMA_Abort+0x62>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d007      	beq.n	8003daa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0208 	bic.w	r2, r2, #8
 8003da8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0201 	bic.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dba:	e013      	b.n	8003de4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dbc:	f7ff fd98 	bl	80038f0 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b05      	cmp	r3, #5
 8003dc8:	d90c      	bls.n	8003de4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e015      	b.n	8003e10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1e4      	bne.n	8003dbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df6:	223f      	movs	r2, #63	; 0x3f
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e24:	4b92      	ldr	r3, [pc, #584]	; (8004070 <HAL_DMA_IRQHandler+0x258>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a92      	ldr	r2, [pc, #584]	; (8004074 <HAL_DMA_IRQHandler+0x25c>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	0a9b      	lsrs	r3, r3, #10
 8003e30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e42:	2208      	movs	r2, #8
 8003e44:	409a      	lsls	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d01a      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d013      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0204 	bic.w	r2, r2, #4
 8003e6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	2208      	movs	r2, #8
 8003e72:	409a      	lsls	r2, r3
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7c:	f043 0201 	orr.w	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e88:	2201      	movs	r2, #1
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d012      	beq.n	8003eba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00b      	beq.n	8003eba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	f043 0202 	orr.w	r2, r3, #2
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d012      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00b      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	2204      	movs	r2, #4
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee8:	f043 0204 	orr.w	r2, r3, #4
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	2210      	movs	r2, #16
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d043      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d03c      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f12:	2210      	movs	r2, #16
 8003f14:	409a      	lsls	r2, r3
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d018      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d108      	bne.n	8003f48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d024      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
 8003f46:	e01f      	b.n	8003f88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01b      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
 8003f58:	e016      	b.n	8003f88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d107      	bne.n	8003f78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0208 	bic.w	r2, r2, #8
 8003f76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 808e 	beq.w	80040b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8086 	beq.w	80040b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fae:	2220      	movs	r2, #32
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b05      	cmp	r3, #5
 8003fc0:	d136      	bne.n	8004030 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0216 	bic.w	r2, r2, #22
 8003fd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fe0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d103      	bne.n	8003ff2 <HAL_DMA_IRQHandler+0x1da>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0208 	bic.w	r2, r2, #8
 8004000:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004006:	223f      	movs	r2, #63	; 0x3f
 8004008:	409a      	lsls	r2, r3
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004022:	2b00      	cmp	r3, #0
 8004024:	d07d      	beq.n	8004122 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	4798      	blx	r3
        }
        return;
 800402e:	e078      	b.n	8004122 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d01c      	beq.n	8004078 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d108      	bne.n	800405e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004050:	2b00      	cmp	r3, #0
 8004052:	d030      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	4798      	blx	r3
 800405c:	e02b      	b.n	80040b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d027      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	4798      	blx	r3
 800406e:	e022      	b.n	80040b6 <HAL_DMA_IRQHandler+0x29e>
 8004070:	20000010 	.word	0x20000010
 8004074:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10f      	bne.n	80040a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0210 	bic.w	r2, r2, #16
 8004094:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d032      	beq.n	8004124 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d022      	beq.n	8004110 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2205      	movs	r2, #5
 80040ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	3301      	adds	r3, #1
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d307      	bcc.n	80040fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f2      	bne.n	80040e2 <HAL_DMA_IRQHandler+0x2ca>
 80040fc:	e000      	b.n	8004100 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80040fe:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4798      	blx	r3
 8004120:	e000      	b.n	8004124 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004122:	bf00      	nop
    }
  }
}
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop

0800412c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004148:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b40      	cmp	r3, #64	; 0x40
 8004158:	d108      	bne.n	800416c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800416a:	e007      	b.n	800417c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	60da      	str	r2, [r3, #12]
}
 800417c:	bf00      	nop
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	3b10      	subs	r3, #16
 8004198:	4a14      	ldr	r2, [pc, #80]	; (80041ec <DMA_CalcBaseAndBitshift+0x64>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	091b      	lsrs	r3, r3, #4
 80041a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041a2:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <DMA_CalcBaseAndBitshift+0x68>)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d909      	bls.n	80041ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041be:	f023 0303 	bic.w	r3, r3, #3
 80041c2:	1d1a      	adds	r2, r3, #4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	659a      	str	r2, [r3, #88]	; 0x58
 80041c8:	e007      	b.n	80041da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041d2:	f023 0303 	bic.w	r3, r3, #3
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	aaaaaaab 	.word	0xaaaaaaab
 80041f0:	0800dd58 	.word	0x0800dd58

080041f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d11f      	bne.n	800424e <DMA_CheckFifoParam+0x5a>
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b03      	cmp	r3, #3
 8004212:	d856      	bhi.n	80042c2 <DMA_CheckFifoParam+0xce>
 8004214:	a201      	add	r2, pc, #4	; (adr r2, 800421c <DMA_CheckFifoParam+0x28>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	0800422d 	.word	0x0800422d
 8004220:	0800423f 	.word	0x0800423f
 8004224:	0800422d 	.word	0x0800422d
 8004228:	080042c3 	.word	0x080042c3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d046      	beq.n	80042c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800423c:	e043      	b.n	80042c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004246:	d140      	bne.n	80042ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800424c:	e03d      	b.n	80042ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004256:	d121      	bne.n	800429c <DMA_CheckFifoParam+0xa8>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b03      	cmp	r3, #3
 800425c:	d837      	bhi.n	80042ce <DMA_CheckFifoParam+0xda>
 800425e:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <DMA_CheckFifoParam+0x70>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	08004275 	.word	0x08004275
 8004268:	0800427b 	.word	0x0800427b
 800426c:	08004275 	.word	0x08004275
 8004270:	0800428d 	.word	0x0800428d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
      break;
 8004278:	e030      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d025      	beq.n	80042d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800428a:	e022      	b.n	80042d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004294:	d11f      	bne.n	80042d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800429a:	e01c      	b.n	80042d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d903      	bls.n	80042aa <DMA_CheckFifoParam+0xb6>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d003      	beq.n	80042b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042a8:	e018      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	73fb      	strb	r3, [r7, #15]
      break;
 80042ae:	e015      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00e      	beq.n	80042da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
      break;
 80042c0:	e00b      	b.n	80042da <DMA_CheckFifoParam+0xe6>
      break;
 80042c2:	bf00      	nop
 80042c4:	e00a      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;
 80042c6:	bf00      	nop
 80042c8:	e008      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;
 80042ca:	bf00      	nop
 80042cc:	e006      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;
 80042ce:	bf00      	nop
 80042d0:	e004      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;
 80042d2:	bf00      	nop
 80042d4:	e002      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;   
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;
 80042da:	bf00      	nop
    }
  } 
  
  return status; 
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop

080042ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b089      	sub	sp, #36	; 0x24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042fe:	2300      	movs	r3, #0
 8004300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	e159      	b.n	80045bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004308:	2201      	movs	r2, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4013      	ands	r3, r2
 800431a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	429a      	cmp	r2, r3
 8004322:	f040 8148 	bne.w	80045b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d005      	beq.n	800433e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800433a:	2b02      	cmp	r3, #2
 800433c:	d130      	bne.n	80043a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	2203      	movs	r2, #3
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4013      	ands	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4313      	orrs	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004374:	2201      	movs	r2, #1
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4013      	ands	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 0201 	and.w	r2, r3, #1
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4313      	orrs	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d017      	beq.n	80043dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	2203      	movs	r2, #3
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43db      	mvns	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d123      	bne.n	8004430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	08da      	lsrs	r2, r3, #3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3208      	adds	r2, #8
 80043f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	220f      	movs	r2, #15
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4313      	orrs	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	08da      	lsrs	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3208      	adds	r2, #8
 800442a:	69b9      	ldr	r1, [r7, #24]
 800442c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	2203      	movs	r2, #3
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43db      	mvns	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 0203 	and.w	r2, r3, #3
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80a2 	beq.w	80045b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	4b57      	ldr	r3, [pc, #348]	; (80045d4 <HAL_GPIO_Init+0x2e8>)
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	4a56      	ldr	r2, [pc, #344]	; (80045d4 <HAL_GPIO_Init+0x2e8>)
 800447c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004480:	6453      	str	r3, [r2, #68]	; 0x44
 8004482:	4b54      	ldr	r3, [pc, #336]	; (80045d4 <HAL_GPIO_Init+0x2e8>)
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800448e:	4a52      	ldr	r2, [pc, #328]	; (80045d8 <HAL_GPIO_Init+0x2ec>)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	3302      	adds	r3, #2
 8004496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800449a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	220f      	movs	r2, #15
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a49      	ldr	r2, [pc, #292]	; (80045dc <HAL_GPIO_Init+0x2f0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d019      	beq.n	80044ee <HAL_GPIO_Init+0x202>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a48      	ldr	r2, [pc, #288]	; (80045e0 <HAL_GPIO_Init+0x2f4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <HAL_GPIO_Init+0x1fe>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a47      	ldr	r2, [pc, #284]	; (80045e4 <HAL_GPIO_Init+0x2f8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00d      	beq.n	80044e6 <HAL_GPIO_Init+0x1fa>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a46      	ldr	r2, [pc, #280]	; (80045e8 <HAL_GPIO_Init+0x2fc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <HAL_GPIO_Init+0x1f6>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a45      	ldr	r2, [pc, #276]	; (80045ec <HAL_GPIO_Init+0x300>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <HAL_GPIO_Init+0x1f2>
 80044da:	2304      	movs	r3, #4
 80044dc:	e008      	b.n	80044f0 <HAL_GPIO_Init+0x204>
 80044de:	2307      	movs	r3, #7
 80044e0:	e006      	b.n	80044f0 <HAL_GPIO_Init+0x204>
 80044e2:	2303      	movs	r3, #3
 80044e4:	e004      	b.n	80044f0 <HAL_GPIO_Init+0x204>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e002      	b.n	80044f0 <HAL_GPIO_Init+0x204>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_GPIO_Init+0x204>
 80044ee:	2300      	movs	r3, #0
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	f002 0203 	and.w	r2, r2, #3
 80044f6:	0092      	lsls	r2, r2, #2
 80044f8:	4093      	lsls	r3, r2
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004500:	4935      	ldr	r1, [pc, #212]	; (80045d8 <HAL_GPIO_Init+0x2ec>)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	089b      	lsrs	r3, r3, #2
 8004506:	3302      	adds	r3, #2
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800450e:	4b38      	ldr	r3, [pc, #224]	; (80045f0 <HAL_GPIO_Init+0x304>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	43db      	mvns	r3, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4013      	ands	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004532:	4a2f      	ldr	r2, [pc, #188]	; (80045f0 <HAL_GPIO_Init+0x304>)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004538:	4b2d      	ldr	r3, [pc, #180]	; (80045f0 <HAL_GPIO_Init+0x304>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	43db      	mvns	r3, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4013      	ands	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800455c:	4a24      	ldr	r2, [pc, #144]	; (80045f0 <HAL_GPIO_Init+0x304>)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004562:	4b23      	ldr	r3, [pc, #140]	; (80045f0 <HAL_GPIO_Init+0x304>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004586:	4a1a      	ldr	r2, [pc, #104]	; (80045f0 <HAL_GPIO_Init+0x304>)
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800458c:	4b18      	ldr	r3, [pc, #96]	; (80045f0 <HAL_GPIO_Init+0x304>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045b0:	4a0f      	ldr	r2, [pc, #60]	; (80045f0 <HAL_GPIO_Init+0x304>)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3301      	adds	r3, #1
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	2b0f      	cmp	r3, #15
 80045c0:	f67f aea2 	bls.w	8004308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop
 80045c8:	3724      	adds	r7, #36	; 0x24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40013800 	.word	0x40013800
 80045dc:	40020000 	.word	0x40020000
 80045e0:	40020400 	.word	0x40020400
 80045e4:	40020800 	.word	0x40020800
 80045e8:	40020c00 	.word	0x40020c00
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40013c00 	.word	0x40013c00

080045f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	807b      	strh	r3, [r7, #2]
 8004600:	4613      	mov	r3, r2
 8004602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004604:	787b      	ldrb	r3, [r7, #1]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800460a:	887a      	ldrh	r2, [r7, #2]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004610:	e003      	b.n	800461a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004612:	887b      	ldrh	r3, [r7, #2]
 8004614:	041a      	lsls	r2, r3, #16
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	619a      	str	r2, [r3, #24]
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e264      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d075      	beq.n	8004732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004646:	4ba3      	ldr	r3, [pc, #652]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
 800464e:	2b04      	cmp	r3, #4
 8004650:	d00c      	beq.n	800466c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004652:	4ba0      	ldr	r3, [pc, #640]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800465a:	2b08      	cmp	r3, #8
 800465c:	d112      	bne.n	8004684 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800465e:	4b9d      	ldr	r3, [pc, #628]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800466a:	d10b      	bne.n	8004684 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466c:	4b99      	ldr	r3, [pc, #612]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d05b      	beq.n	8004730 <HAL_RCC_OscConfig+0x108>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d157      	bne.n	8004730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e23f      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468c:	d106      	bne.n	800469c <HAL_RCC_OscConfig+0x74>
 800468e:	4b91      	ldr	r3, [pc, #580]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a90      	ldr	r2, [pc, #576]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 8004694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e01d      	b.n	80046d8 <HAL_RCC_OscConfig+0xb0>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046a4:	d10c      	bne.n	80046c0 <HAL_RCC_OscConfig+0x98>
 80046a6:	4b8b      	ldr	r3, [pc, #556]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a8a      	ldr	r2, [pc, #552]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	4b88      	ldr	r3, [pc, #544]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a87      	ldr	r2, [pc, #540]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	e00b      	b.n	80046d8 <HAL_RCC_OscConfig+0xb0>
 80046c0:	4b84      	ldr	r3, [pc, #528]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a83      	ldr	r2, [pc, #524]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 80046c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	4b81      	ldr	r3, [pc, #516]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a80      	ldr	r2, [pc, #512]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 80046d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d013      	beq.n	8004708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7ff f906 	bl	80038f0 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046e8:	f7ff f902 	bl	80038f0 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	; 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e204      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fa:	4b76      	ldr	r3, [pc, #472]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0xc0>
 8004706:	e014      	b.n	8004732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004708:	f7ff f8f2 	bl	80038f0 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004710:	f7ff f8ee 	bl	80038f0 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	; 0x64
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e1f0      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004722:	4b6c      	ldr	r3, [pc, #432]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0xe8>
 800472e:	e000      	b.n	8004732 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d063      	beq.n	8004806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800473e:	4b65      	ldr	r3, [pc, #404]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00b      	beq.n	8004762 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800474a:	4b62      	ldr	r3, [pc, #392]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004752:	2b08      	cmp	r3, #8
 8004754:	d11c      	bne.n	8004790 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004756:	4b5f      	ldr	r3, [pc, #380]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d116      	bne.n	8004790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004762:	4b5c      	ldr	r3, [pc, #368]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <HAL_RCC_OscConfig+0x152>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d001      	beq.n	800477a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e1c4      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477a:	4b56      	ldr	r3, [pc, #344]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	4952      	ldr	r1, [pc, #328]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 800478a:	4313      	orrs	r3, r2
 800478c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800478e:	e03a      	b.n	8004806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d020      	beq.n	80047da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004798:	4b4f      	ldr	r3, [pc, #316]	; (80048d8 <HAL_RCC_OscConfig+0x2b0>)
 800479a:	2201      	movs	r2, #1
 800479c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479e:	f7ff f8a7 	bl	80038f0 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047a6:	f7ff f8a3 	bl	80038f0 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e1a5      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b8:	4b46      	ldr	r3, [pc, #280]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0f0      	beq.n	80047a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c4:	4b43      	ldr	r3, [pc, #268]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4940      	ldr	r1, [pc, #256]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	600b      	str	r3, [r1, #0]
 80047d8:	e015      	b.n	8004806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047da:	4b3f      	ldr	r3, [pc, #252]	; (80048d8 <HAL_RCC_OscConfig+0x2b0>)
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e0:	f7ff f886 	bl	80038f0 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047e8:	f7ff f882 	bl	80038f0 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e184      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fa:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	d030      	beq.n	8004874 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d016      	beq.n	8004848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800481a:	4b30      	ldr	r3, [pc, #192]	; (80048dc <HAL_RCC_OscConfig+0x2b4>)
 800481c:	2201      	movs	r2, #1
 800481e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004820:	f7ff f866 	bl	80038f0 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004828:	f7ff f862 	bl	80038f0 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e164      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483a:	4b26      	ldr	r3, [pc, #152]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 800483c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCC_OscConfig+0x200>
 8004846:	e015      	b.n	8004874 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004848:	4b24      	ldr	r3, [pc, #144]	; (80048dc <HAL_RCC_OscConfig+0x2b4>)
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800484e:	f7ff f84f 	bl	80038f0 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004856:	f7ff f84b 	bl	80038f0 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e14d      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004868:	4b1a      	ldr	r3, [pc, #104]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 800486a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f0      	bne.n	8004856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80a0 	beq.w	80049c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004882:	2300      	movs	r3, #0
 8004884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004886:	4b13      	ldr	r3, [pc, #76]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10f      	bne.n	80048b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	4a0e      	ldr	r2, [pc, #56]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 800489c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a0:	6413      	str	r3, [r2, #64]	; 0x40
 80048a2:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ae:	2301      	movs	r3, #1
 80048b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b2:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_RCC_OscConfig+0x2b8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d121      	bne.n	8004902 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048be:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <HAL_RCC_OscConfig+0x2b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a07      	ldr	r2, [pc, #28]	; (80048e0 <HAL_RCC_OscConfig+0x2b8>)
 80048c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ca:	f7ff f811 	bl	80038f0 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d0:	e011      	b.n	80048f6 <HAL_RCC_OscConfig+0x2ce>
 80048d2:	bf00      	nop
 80048d4:	40023800 	.word	0x40023800
 80048d8:	42470000 	.word	0x42470000
 80048dc:	42470e80 	.word	0x42470e80
 80048e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e4:	f7ff f804 	bl	80038f0 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e106      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f6:	4b85      	ldr	r3, [pc, #532]	; (8004b0c <HAL_RCC_OscConfig+0x4e4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f0      	beq.n	80048e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d106      	bne.n	8004918 <HAL_RCC_OscConfig+0x2f0>
 800490a:	4b81      	ldr	r3, [pc, #516]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490e:	4a80      	ldr	r2, [pc, #512]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	6713      	str	r3, [r2, #112]	; 0x70
 8004916:	e01c      	b.n	8004952 <HAL_RCC_OscConfig+0x32a>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b05      	cmp	r3, #5
 800491e:	d10c      	bne.n	800493a <HAL_RCC_OscConfig+0x312>
 8004920:	4b7b      	ldr	r3, [pc, #492]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 8004922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004924:	4a7a      	ldr	r2, [pc, #488]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 8004926:	f043 0304 	orr.w	r3, r3, #4
 800492a:	6713      	str	r3, [r2, #112]	; 0x70
 800492c:	4b78      	ldr	r3, [pc, #480]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 800492e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004930:	4a77      	ldr	r2, [pc, #476]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	6713      	str	r3, [r2, #112]	; 0x70
 8004938:	e00b      	b.n	8004952 <HAL_RCC_OscConfig+0x32a>
 800493a:	4b75      	ldr	r3, [pc, #468]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	4a74      	ldr	r2, [pc, #464]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 8004940:	f023 0301 	bic.w	r3, r3, #1
 8004944:	6713      	str	r3, [r2, #112]	; 0x70
 8004946:	4b72      	ldr	r3, [pc, #456]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	4a71      	ldr	r2, [pc, #452]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 800494c:	f023 0304 	bic.w	r3, r3, #4
 8004950:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d015      	beq.n	8004986 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495a:	f7fe ffc9 	bl	80038f0 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004960:	e00a      	b.n	8004978 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004962:	f7fe ffc5 	bl	80038f0 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004970:	4293      	cmp	r3, r2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e0c5      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004978:	4b65      	ldr	r3, [pc, #404]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0ee      	beq.n	8004962 <HAL_RCC_OscConfig+0x33a>
 8004984:	e014      	b.n	80049b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004986:	f7fe ffb3 	bl	80038f0 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800498c:	e00a      	b.n	80049a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800498e:	f7fe ffaf 	bl	80038f0 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	f241 3288 	movw	r2, #5000	; 0x1388
 800499c:	4293      	cmp	r3, r2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e0af      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a4:	4b5a      	ldr	r3, [pc, #360]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 80049a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1ee      	bne.n	800498e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049b0:	7dfb      	ldrb	r3, [r7, #23]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d105      	bne.n	80049c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b6:	4b56      	ldr	r3, [pc, #344]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	4a55      	ldr	r2, [pc, #340]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 80049bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 809b 	beq.w	8004b02 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049cc:	4b50      	ldr	r3, [pc, #320]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 030c 	and.w	r3, r3, #12
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d05c      	beq.n	8004a92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d141      	bne.n	8004a64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e0:	4b4c      	ldr	r3, [pc, #304]	; (8004b14 <HAL_RCC_OscConfig+0x4ec>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e6:	f7fe ff83 	bl	80038f0 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ee:	f7fe ff7f 	bl	80038f0 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e081      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a00:	4b43      	ldr	r3, [pc, #268]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1f0      	bne.n	80049ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69da      	ldr	r2, [r3, #28]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	019b      	lsls	r3, r3, #6
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	085b      	lsrs	r3, r3, #1
 8004a24:	3b01      	subs	r3, #1
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	061b      	lsls	r3, r3, #24
 8004a30:	4937      	ldr	r1, [pc, #220]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a36:	4b37      	ldr	r3, [pc, #220]	; (8004b14 <HAL_RCC_OscConfig+0x4ec>)
 8004a38:	2201      	movs	r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7fe ff58 	bl	80038f0 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fe ff54 	bl	80038f0 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e056      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a56:	4b2e      	ldr	r3, [pc, #184]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x41c>
 8004a62:	e04e      	b.n	8004b02 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a64:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <HAL_RCC_OscConfig+0x4ec>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6a:	f7fe ff41 	bl	80038f0 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a72:	f7fe ff3d 	bl	80038f0 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e03f      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a84:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f0      	bne.n	8004a72 <HAL_RCC_OscConfig+0x44a>
 8004a90:	e037      	b.n	8004b02 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e032      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a9e:	4b1c      	ldr	r3, [pc, #112]	; (8004b10 <HAL_RCC_OscConfig+0x4e8>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d028      	beq.n	8004afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d121      	bne.n	8004afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d11a      	bne.n	8004afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ace:	4013      	ands	r3, r2
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ad4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d111      	bne.n	8004afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d001      	beq.n	8004b02 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40007000 	.word	0x40007000
 8004b10:	40023800 	.word	0x40023800
 8004b14:	42470060 	.word	0x42470060

08004b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0cc      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b2c:	4b68      	ldr	r3, [pc, #416]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d90c      	bls.n	8004b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3a:	4b65      	ldr	r3, [pc, #404]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b42:	4b63      	ldr	r3, [pc, #396]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d001      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0b8      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d020      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b6c:	4b59      	ldr	r3, [pc, #356]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a58      	ldr	r2, [pc, #352]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b84:	4b53      	ldr	r3, [pc, #332]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a52      	ldr	r2, [pc, #328]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b90:	4b50      	ldr	r3, [pc, #320]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	494d      	ldr	r1, [pc, #308]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d044      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d107      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb6:	4b47      	ldr	r3, [pc, #284]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d119      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e07f      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d003      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d107      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd6:	4b3f      	ldr	r3, [pc, #252]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d109      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e06f      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be6:	4b3b      	ldr	r3, [pc, #236]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e067      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bf6:	4b37      	ldr	r3, [pc, #220]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f023 0203 	bic.w	r2, r3, #3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	4934      	ldr	r1, [pc, #208]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c08:	f7fe fe72 	bl	80038f0 <HAL_GetTick>
 8004c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0e:	e00a      	b.n	8004c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c10:	f7fe fe6e 	bl	80038f0 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e04f      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c26:	4b2b      	ldr	r3, [pc, #172]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 020c 	and.w	r2, r3, #12
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d1eb      	bne.n	8004c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c38:	4b25      	ldr	r3, [pc, #148]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d20c      	bcs.n	8004c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c46:	4b22      	ldr	r3, [pc, #136]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4e:	4b20      	ldr	r3, [pc, #128]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e032      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c6c:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4916      	ldr	r1, [pc, #88]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	490e      	ldr	r1, [pc, #56]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c9e:	f000 f821 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	490a      	ldr	r1, [pc, #40]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb0:	5ccb      	ldrb	r3, [r1, r3]
 8004cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb6:	4a09      	ldr	r2, [pc, #36]	; (8004cdc <HAL_RCC_ClockConfig+0x1c4>)
 8004cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cba:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe fdd2 	bl	8003868 <HAL_InitTick>

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40023c00 	.word	0x40023c00
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	0800dd40 	.word	0x0800dd40
 8004cdc:	20000010 	.word	0x20000010
 8004ce0:	20000014 	.word	0x20000014

08004ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	607b      	str	r3, [r7, #4]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cfc:	4b67      	ldr	r3, [pc, #412]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 030c 	and.w	r3, r3, #12
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d00d      	beq.n	8004d24 <HAL_RCC_GetSysClockFreq+0x40>
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	f200 80bd 	bhi.w	8004e88 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0x34>
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d003      	beq.n	8004d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d16:	e0b7      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d18:	4b61      	ldr	r3, [pc, #388]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d1a:	60bb      	str	r3, [r7, #8]
       break;
 8004d1c:	e0b7      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d1e:	4b61      	ldr	r3, [pc, #388]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004d20:	60bb      	str	r3, [r7, #8]
      break;
 8004d22:	e0b4      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d24:	4b5d      	ldr	r3, [pc, #372]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d2e:	4b5b      	ldr	r3, [pc, #364]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d04d      	beq.n	8004dd6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d3a:	4b58      	ldr	r3, [pc, #352]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	099b      	lsrs	r3, r3, #6
 8004d40:	461a      	mov	r2, r3
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d4a:	f04f 0100 	mov.w	r1, #0
 8004d4e:	ea02 0800 	and.w	r8, r2, r0
 8004d52:	ea03 0901 	and.w	r9, r3, r1
 8004d56:	4640      	mov	r0, r8
 8004d58:	4649      	mov	r1, r9
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	014b      	lsls	r3, r1, #5
 8004d64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d68:	0142      	lsls	r2, r0, #5
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	ebb0 0008 	subs.w	r0, r0, r8
 8004d72:	eb61 0109 	sbc.w	r1, r1, r9
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	018b      	lsls	r3, r1, #6
 8004d80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d84:	0182      	lsls	r2, r0, #6
 8004d86:	1a12      	subs	r2, r2, r0
 8004d88:	eb63 0301 	sbc.w	r3, r3, r1
 8004d8c:	f04f 0000 	mov.w	r0, #0
 8004d90:	f04f 0100 	mov.w	r1, #0
 8004d94:	00d9      	lsls	r1, r3, #3
 8004d96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d9a:	00d0      	lsls	r0, r2, #3
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	eb12 0208 	adds.w	r2, r2, r8
 8004da4:	eb43 0309 	adc.w	r3, r3, r9
 8004da8:	f04f 0000 	mov.w	r0, #0
 8004dac:	f04f 0100 	mov.w	r1, #0
 8004db0:	0259      	lsls	r1, r3, #9
 8004db2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004db6:	0250      	lsls	r0, r2, #9
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	f7fb ff60 	bl	8000c8c <__aeabi_uldivmod>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e04a      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd6:	4b31      	ldr	r3, [pc, #196]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	099b      	lsrs	r3, r3, #6
 8004ddc:	461a      	mov	r2, r3
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004de6:	f04f 0100 	mov.w	r1, #0
 8004dea:	ea02 0400 	and.w	r4, r2, r0
 8004dee:	ea03 0501 	and.w	r5, r3, r1
 8004df2:	4620      	mov	r0, r4
 8004df4:	4629      	mov	r1, r5
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	f04f 0300 	mov.w	r3, #0
 8004dfe:	014b      	lsls	r3, r1, #5
 8004e00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e04:	0142      	lsls	r2, r0, #5
 8004e06:	4610      	mov	r0, r2
 8004e08:	4619      	mov	r1, r3
 8004e0a:	1b00      	subs	r0, r0, r4
 8004e0c:	eb61 0105 	sbc.w	r1, r1, r5
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	018b      	lsls	r3, r1, #6
 8004e1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e1e:	0182      	lsls	r2, r0, #6
 8004e20:	1a12      	subs	r2, r2, r0
 8004e22:	eb63 0301 	sbc.w	r3, r3, r1
 8004e26:	f04f 0000 	mov.w	r0, #0
 8004e2a:	f04f 0100 	mov.w	r1, #0
 8004e2e:	00d9      	lsls	r1, r3, #3
 8004e30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e34:	00d0      	lsls	r0, r2, #3
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	1912      	adds	r2, r2, r4
 8004e3c:	eb45 0303 	adc.w	r3, r5, r3
 8004e40:	f04f 0000 	mov.w	r0, #0
 8004e44:	f04f 0100 	mov.w	r1, #0
 8004e48:	0299      	lsls	r1, r3, #10
 8004e4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e4e:	0290      	lsls	r0, r2, #10
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4610      	mov	r0, r2
 8004e56:	4619      	mov	r1, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	f7fb ff14 	bl	8000c8c <__aeabi_uldivmod>
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4613      	mov	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	0c1b      	lsrs	r3, r3, #16
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	3301      	adds	r3, #1
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e84:	60bb      	str	r3, [r7, #8]
      break;
 8004e86:	e002      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e8a:	60bb      	str	r3, [r7, #8]
      break;
 8004e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	00f42400 	.word	0x00f42400
 8004ea4:	007a1200 	.word	0x007a1200

08004ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eac:	4b03      	ldr	r3, [pc, #12]	; (8004ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8004eae:	681b      	ldr	r3, [r3, #0]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20000010 	.word	0x20000010

08004ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ec4:	f7ff fff0 	bl	8004ea8 <HAL_RCC_GetHCLKFreq>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	0a9b      	lsrs	r3, r3, #10
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	4903      	ldr	r1, [pc, #12]	; (8004ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ed6:	5ccb      	ldrb	r3, [r1, r3]
 8004ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	0800dd50 	.word	0x0800dd50

08004ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004eec:	f7ff ffdc 	bl	8004ea8 <HAL_RCC_GetHCLKFreq>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	0b5b      	lsrs	r3, r3, #13
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	4903      	ldr	r1, [pc, #12]	; (8004f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004efe:	5ccb      	ldrb	r3, [r1, r3]
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	0800dd50 	.word	0x0800dd50

08004f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e03f      	b.n	8004fa2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fd faca 	bl	80024d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2224      	movs	r2, #36	; 0x24
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fc23 	bl	80057a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695a      	ldr	r2, [r3, #20]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b08a      	sub	sp, #40	; 0x28
 8004fae:	af02      	add	r7, sp, #8
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	603b      	str	r3, [r7, #0]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d17c      	bne.n	80050c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <HAL_UART_Transmit+0x2c>
 8004fd0:	88fb      	ldrh	r3, [r7, #6]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e075      	b.n	80050c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_UART_Transmit+0x3e>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e06e      	b.n	80050c6 <HAL_UART_Transmit+0x11c>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2221      	movs	r2, #33	; 0x21
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ffe:	f7fe fc77 	bl	80038f0 <HAL_GetTick>
 8005002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	88fa      	ldrh	r2, [r7, #6]
 800500e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005018:	d108      	bne.n	800502c <HAL_UART_Transmit+0x82>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d104      	bne.n	800502c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	e003      	b.n	8005034 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800503c:	e02a      	b.n	8005094 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2200      	movs	r2, #0
 8005046:	2180      	movs	r1, #128	; 0x80
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 fa11 	bl	8005470 <UART_WaitOnFlagUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e036      	b.n	80050c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10b      	bne.n	8005076 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800506c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	3302      	adds	r3, #2
 8005072:	61bb      	str	r3, [r7, #24]
 8005074:	e007      	b.n	8005086 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	781a      	ldrb	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	3301      	adds	r3, #1
 8005084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800508a:	b29b      	uxth	r3, r3
 800508c:	3b01      	subs	r3, #1
 800508e:	b29a      	uxth	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1cf      	bne.n	800503e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2200      	movs	r2, #0
 80050a6:	2140      	movs	r1, #64	; 0x40
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f9e1 	bl	8005470 <UART_WaitOnFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e006      	b.n	80050c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050c0:	2300      	movs	r3, #0
 80050c2:	e000      	b.n	80050c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050c4:	2302      	movs	r3, #2
  }
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3720      	adds	r7, #32
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	4613      	mov	r3, r2
 80050da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d11d      	bne.n	8005124 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_UART_Receive_DMA+0x26>
 80050ee:	88fb      	ldrh	r3, [r7, #6]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e016      	b.n	8005126 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_UART_Receive_DMA+0x38>
 8005102:	2302      	movs	r3, #2
 8005104:	e00f      	b.n	8005126 <HAL_UART_Receive_DMA+0x58>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005114:	88fb      	ldrh	r3, [r7, #6]
 8005116:	461a      	mov	r2, r3
 8005118:	68b9      	ldr	r1, [r7, #8]
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 fa16 	bl	800554c <UART_Start_Receive_DMA>
 8005120:	4603      	mov	r3, r0
 8005122:	e000      	b.n	8005126 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005124:	2302      	movs	r3, #2
  }
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b090      	sub	sp, #64	; 0x40
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005136:	2300      	movs	r3, #0
 8005138:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005144:	2b80      	cmp	r3, #128	; 0x80
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b21      	cmp	r3, #33	; 0x21
 800515a:	d128      	bne.n	80051ae <HAL_UART_DMAStop+0x80>
 800515c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d025      	beq.n	80051ae <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3314      	adds	r3, #20
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	623b      	str	r3, [r7, #32]
   return(result);
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005178:	63bb      	str	r3, [r7, #56]	; 0x38
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3314      	adds	r3, #20
 8005180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005182:	633a      	str	r2, [r7, #48]	; 0x30
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e5      	bne.n	8005162 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519a:	2b00      	cmp	r3, #0
 800519c:	d004      	beq.n	80051a8 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fe fdc8 	bl	8003d38 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fa6d 	bl	8005688 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b40      	cmp	r3, #64	; 0x40
 80051ba:	bf0c      	ite	eq
 80051bc:	2301      	moveq	r3, #1
 80051be:	2300      	movne	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b22      	cmp	r3, #34	; 0x22
 80051ce:	d128      	bne.n	8005222 <HAL_UART_DMAStop+0xf4>
 80051d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d025      	beq.n	8005222 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3314      	adds	r3, #20
 80051dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ec:	637b      	str	r3, [r7, #52]	; 0x34
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3314      	adds	r3, #20
 80051f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051f6:	61fa      	str	r2, [r7, #28]
 80051f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	69b9      	ldr	r1, [r7, #24]
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	617b      	str	r3, [r7, #20]
   return(result);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e5      	bne.n	80051d6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	2b00      	cmp	r3, #0
 8005210:	d004      	beq.n	800521c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005216:	4618      	mov	r0, r3
 8005218:	f7fe fd8e 	bl	8003d38 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fa5b 	bl	80056d8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3740      	adds	r7, #64	; 0x40
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b09c      	sub	sp, #112	; 0x70
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005298:	2b00      	cmp	r3, #0
 800529a:	d172      	bne.n	8005382 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800529c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529e:	2200      	movs	r2, #0
 80052a0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	330c      	adds	r3, #12
 80052a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80052ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	330c      	adds	r3, #12
 80052c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80052c4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052ca:	e841 2300 	strex	r3, r2, [r1]
 80052ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e5      	bne.n	80052a2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3314      	adds	r3, #20
 80052dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e8:	f023 0301 	bic.w	r3, r3, #1
 80052ec:	667b      	str	r3, [r7, #100]	; 0x64
 80052ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3314      	adds	r3, #20
 80052f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052f6:	647a      	str	r2, [r7, #68]	; 0x44
 80052f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e5      	bne.n	80052d6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800530a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3314      	adds	r3, #20
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	623b      	str	r3, [r7, #32]
   return(result);
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005320:	663b      	str	r3, [r7, #96]	; 0x60
 8005322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3314      	adds	r3, #20
 8005328:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800532a:	633a      	str	r2, [r7, #48]	; 0x30
 800532c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e5      	bne.n	800530a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800533e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005340:	2220      	movs	r2, #32
 8005342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	2b01      	cmp	r3, #1
 800534c:	d119      	bne.n	8005382 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800534e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	330c      	adds	r3, #12
 8005354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	60fb      	str	r3, [r7, #12]
   return(result);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f023 0310 	bic.w	r3, r3, #16
 8005364:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	330c      	adds	r3, #12
 800536c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800536e:	61fa      	str	r2, [r7, #28]
 8005370:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	69b9      	ldr	r1, [r7, #24]
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	617b      	str	r3, [r7, #20]
   return(result);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e5      	bne.n	800534e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	2b01      	cmp	r3, #1
 8005388:	d106      	bne.n	8005398 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800538a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800538e:	4619      	mov	r1, r3
 8005390:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005392:	f7ff ff69 	bl	8005268 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005396:	e002      	b.n	800539e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005398:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800539a:	f7ff ff47 	bl	800522c <HAL_UART_RxCpltCallback>
}
 800539e:	bf00      	nop
 80053a0:	3770      	adds	r7, #112	; 0x70
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d108      	bne.n	80053ce <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	4619      	mov	r1, r3
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f7ff ff4e 	bl	8005268 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053cc:	e002      	b.n	80053d4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff ff36 	bl	8005240 <HAL_UART_RxHalfCpltCallback>
}
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f8:	2b80      	cmp	r3, #128	; 0x80
 80053fa:	bf0c      	ite	eq
 80053fc:	2301      	moveq	r3, #1
 80053fe:	2300      	movne	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b21      	cmp	r3, #33	; 0x21
 800540e:	d108      	bne.n	8005422 <UART_DMAError+0x46>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2200      	movs	r2, #0
 800541a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800541c:	68b8      	ldr	r0, [r7, #8]
 800541e:	f000 f933 	bl	8005688 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	bf0c      	ite	eq
 8005430:	2301      	moveq	r3, #1
 8005432:	2300      	movne	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b22      	cmp	r3, #34	; 0x22
 8005442:	d108      	bne.n	8005456 <UART_DMAError+0x7a>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2200      	movs	r2, #0
 800544e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005450:	68b8      	ldr	r0, [r7, #8]
 8005452:	f000 f941 	bl	80056d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	f043 0210 	orr.w	r2, r3, #16
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005462:	68b8      	ldr	r0, [r7, #8]
 8005464:	f7ff fef6 	bl	8005254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005468:	bf00      	nop
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b090      	sub	sp, #64	; 0x40
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	4613      	mov	r3, r2
 800547e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005480:	e050      	b.n	8005524 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005488:	d04c      	beq.n	8005524 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800548a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005490:	f7fe fa2e 	bl	80038f0 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800549c:	429a      	cmp	r2, r3
 800549e:	d241      	bcs.n	8005524 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	330c      	adds	r3, #12
 80054a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	e853 3f00 	ldrex	r3, [r3]
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054c0:	637a      	str	r2, [r7, #52]	; 0x34
 80054c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054c8:	e841 2300 	strex	r3, r2, [r1]
 80054cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e5      	bne.n	80054a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3314      	adds	r3, #20
 80054da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	e853 3f00 	ldrex	r3, [r3]
 80054e2:	613b      	str	r3, [r7, #16]
   return(result);
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f023 0301 	bic.w	r3, r3, #1
 80054ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3314      	adds	r3, #20
 80054f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054f4:	623a      	str	r2, [r7, #32]
 80054f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	69f9      	ldr	r1, [r7, #28]
 80054fa:	6a3a      	ldr	r2, [r7, #32]
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	61bb      	str	r3, [r7, #24]
   return(result);
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e5      	bne.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e00f      	b.n	8005544 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4013      	ands	r3, r2
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	429a      	cmp	r2, r3
 8005532:	bf0c      	ite	eq
 8005534:	2301      	moveq	r3, #1
 8005536:	2300      	movne	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	461a      	mov	r2, r3
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	429a      	cmp	r2, r3
 8005540:	d09f      	beq.n	8005482 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3740      	adds	r7, #64	; 0x40
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b098      	sub	sp, #96	; 0x60
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	4613      	mov	r3, r2
 8005558:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	88fa      	ldrh	r2, [r7, #6]
 8005564:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2222      	movs	r2, #34	; 0x22
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	4a40      	ldr	r2, [pc, #256]	; (800567c <UART_Start_Receive_DMA+0x130>)
 800557a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	4a3f      	ldr	r2, [pc, #252]	; (8005680 <UART_Start_Receive_DMA+0x134>)
 8005582:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005588:	4a3e      	ldr	r2, [pc, #248]	; (8005684 <UART_Start_Receive_DMA+0x138>)
 800558a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	2200      	movs	r2, #0
 8005592:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005594:	f107 0308 	add.w	r3, r7, #8
 8005598:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4619      	mov	r1, r3
 80055a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	f7fe fb6c 	bl	8003c88 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80055b0:	2300      	movs	r3, #0
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d019      	beq.n	800560a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	330c      	adds	r3, #12
 80055f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055f6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80055f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80055fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e5      	bne.n	80055d6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3314      	adds	r3, #20
 8005610:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	e853 3f00 	ldrex	r3, [r3]
 8005618:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	f043 0301 	orr.w	r3, r3, #1
 8005620:	657b      	str	r3, [r7, #84]	; 0x54
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3314      	adds	r3, #20
 8005628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800562a:	63ba      	str	r2, [r7, #56]	; 0x38
 800562c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e5      	bne.n	800560a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3314      	adds	r3, #20
 8005644:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	617b      	str	r3, [r7, #20]
   return(result);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005654:	653b      	str	r3, [r7, #80]	; 0x50
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3314      	adds	r3, #20
 800565c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800565e:	627a      	str	r2, [r7, #36]	; 0x24
 8005660:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	6a39      	ldr	r1, [r7, #32]
 8005664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	61fb      	str	r3, [r7, #28]
   return(result);
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e5      	bne.n	800563e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3760      	adds	r7, #96	; 0x60
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	08005281 	.word	0x08005281
 8005680:	080053a7 	.word	0x080053a7
 8005684:	080053dd 	.word	0x080053dd

08005688 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005688:	b480      	push	{r7}
 800568a:	b089      	sub	sp, #36	; 0x24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	330c      	adds	r3, #12
 8005696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	60bb      	str	r3, [r7, #8]
   return(result);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056a6:	61fb      	str	r3, [r7, #28]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	330c      	adds	r3, #12
 80056ae:	69fa      	ldr	r2, [r7, #28]
 80056b0:	61ba      	str	r2, [r7, #24]
 80056b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6979      	ldr	r1, [r7, #20]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	613b      	str	r3, [r7, #16]
   return(result);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e5      	bne.n	8005690 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80056cc:	bf00      	nop
 80056ce:	3724      	adds	r7, #36	; 0x24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056d8:	b480      	push	{r7}
 80056da:	b095      	sub	sp, #84	; 0x54
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	330c      	adds	r3, #12
 80056e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	330c      	adds	r3, #12
 80056fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005700:	643a      	str	r2, [r7, #64]	; 0x40
 8005702:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005704:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005706:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800570e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e5      	bne.n	80056e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3314      	adds	r3, #20
 800571a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	e853 3f00 	ldrex	r3, [r3]
 8005722:	61fb      	str	r3, [r7, #28]
   return(result);
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f023 0301 	bic.w	r3, r3, #1
 800572a:	64bb      	str	r3, [r7, #72]	; 0x48
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3314      	adds	r3, #20
 8005732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005734:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800573a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800573c:	e841 2300 	strex	r3, r2, [r1]
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e5      	bne.n	8005714 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574c:	2b01      	cmp	r3, #1
 800574e:	d119      	bne.n	8005784 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	e853 3f00 	ldrex	r3, [r3]
 800575e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f023 0310 	bic.w	r3, r3, #16
 8005766:	647b      	str	r3, [r7, #68]	; 0x44
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	330c      	adds	r3, #12
 800576e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005770:	61ba      	str	r2, [r7, #24]
 8005772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	6979      	ldr	r1, [r7, #20]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	613b      	str	r3, [r7, #16]
   return(result);
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e5      	bne.n	8005750 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005792:	bf00      	nop
 8005794:	3754      	adds	r7, #84	; 0x54
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
	...

080057a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a4:	b09f      	sub	sp, #124	; 0x7c
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b6:	68d9      	ldr	r1, [r3, #12]
 80057b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	ea40 0301 	orr.w	r3, r0, r1
 80057c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	431a      	orrs	r2, r3
 80057d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80057da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057e4:	f021 010c 	bic.w	r1, r1, #12
 80057e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057ee:	430b      	orrs	r3, r1
 80057f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80057fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057fe:	6999      	ldr	r1, [r3, #24]
 8005800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	ea40 0301 	orr.w	r3, r0, r1
 8005808:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800580a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	4bc5      	ldr	r3, [pc, #788]	; (8005b24 <UART_SetConfig+0x384>)
 8005810:	429a      	cmp	r2, r3
 8005812:	d004      	beq.n	800581e <UART_SetConfig+0x7e>
 8005814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	4bc3      	ldr	r3, [pc, #780]	; (8005b28 <UART_SetConfig+0x388>)
 800581a:	429a      	cmp	r2, r3
 800581c:	d103      	bne.n	8005826 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800581e:	f7ff fb63 	bl	8004ee8 <HAL_RCC_GetPCLK2Freq>
 8005822:	6778      	str	r0, [r7, #116]	; 0x74
 8005824:	e002      	b.n	800582c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005826:	f7ff fb4b 	bl	8004ec0 <HAL_RCC_GetPCLK1Freq>
 800582a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800582c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005834:	f040 80b6 	bne.w	80059a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800583a:	461c      	mov	r4, r3
 800583c:	f04f 0500 	mov.w	r5, #0
 8005840:	4622      	mov	r2, r4
 8005842:	462b      	mov	r3, r5
 8005844:	1891      	adds	r1, r2, r2
 8005846:	6439      	str	r1, [r7, #64]	; 0x40
 8005848:	415b      	adcs	r3, r3
 800584a:	647b      	str	r3, [r7, #68]	; 0x44
 800584c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005850:	1912      	adds	r2, r2, r4
 8005852:	eb45 0303 	adc.w	r3, r5, r3
 8005856:	f04f 0000 	mov.w	r0, #0
 800585a:	f04f 0100 	mov.w	r1, #0
 800585e:	00d9      	lsls	r1, r3, #3
 8005860:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005864:	00d0      	lsls	r0, r2, #3
 8005866:	4602      	mov	r2, r0
 8005868:	460b      	mov	r3, r1
 800586a:	1911      	adds	r1, r2, r4
 800586c:	6639      	str	r1, [r7, #96]	; 0x60
 800586e:	416b      	adcs	r3, r5
 8005870:	667b      	str	r3, [r7, #100]	; 0x64
 8005872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	461a      	mov	r2, r3
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	1891      	adds	r1, r2, r2
 800587e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005880:	415b      	adcs	r3, r3
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005884:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005888:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800588c:	f7fb f9fe 	bl	8000c8c <__aeabi_uldivmod>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4ba5      	ldr	r3, [pc, #660]	; (8005b2c <UART_SetConfig+0x38c>)
 8005896:	fba3 2302 	umull	r2, r3, r3, r2
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	011e      	lsls	r6, r3, #4
 800589e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058a0:	461c      	mov	r4, r3
 80058a2:	f04f 0500 	mov.w	r5, #0
 80058a6:	4622      	mov	r2, r4
 80058a8:	462b      	mov	r3, r5
 80058aa:	1891      	adds	r1, r2, r2
 80058ac:	6339      	str	r1, [r7, #48]	; 0x30
 80058ae:	415b      	adcs	r3, r3
 80058b0:	637b      	str	r3, [r7, #52]	; 0x34
 80058b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80058b6:	1912      	adds	r2, r2, r4
 80058b8:	eb45 0303 	adc.w	r3, r5, r3
 80058bc:	f04f 0000 	mov.w	r0, #0
 80058c0:	f04f 0100 	mov.w	r1, #0
 80058c4:	00d9      	lsls	r1, r3, #3
 80058c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058ca:	00d0      	lsls	r0, r2, #3
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	1911      	adds	r1, r2, r4
 80058d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80058d4:	416b      	adcs	r3, r5
 80058d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	461a      	mov	r2, r3
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	1891      	adds	r1, r2, r2
 80058e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80058e6:	415b      	adcs	r3, r3
 80058e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80058f2:	f7fb f9cb 	bl	8000c8c <__aeabi_uldivmod>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4b8c      	ldr	r3, [pc, #560]	; (8005b2c <UART_SetConfig+0x38c>)
 80058fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005900:	095b      	lsrs	r3, r3, #5
 8005902:	2164      	movs	r1, #100	; 0x64
 8005904:	fb01 f303 	mul.w	r3, r1, r3
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	3332      	adds	r3, #50	; 0x32
 800590e:	4a87      	ldr	r2, [pc, #540]	; (8005b2c <UART_SetConfig+0x38c>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800591c:	441e      	add	r6, r3
 800591e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005920:	4618      	mov	r0, r3
 8005922:	f04f 0100 	mov.w	r1, #0
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	1894      	adds	r4, r2, r2
 800592c:	623c      	str	r4, [r7, #32]
 800592e:	415b      	adcs	r3, r3
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
 8005932:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005936:	1812      	adds	r2, r2, r0
 8005938:	eb41 0303 	adc.w	r3, r1, r3
 800593c:	f04f 0400 	mov.w	r4, #0
 8005940:	f04f 0500 	mov.w	r5, #0
 8005944:	00dd      	lsls	r5, r3, #3
 8005946:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800594a:	00d4      	lsls	r4, r2, #3
 800594c:	4622      	mov	r2, r4
 800594e:	462b      	mov	r3, r5
 8005950:	1814      	adds	r4, r2, r0
 8005952:	653c      	str	r4, [r7, #80]	; 0x50
 8005954:	414b      	adcs	r3, r1
 8005956:	657b      	str	r3, [r7, #84]	; 0x54
 8005958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	461a      	mov	r2, r3
 800595e:	f04f 0300 	mov.w	r3, #0
 8005962:	1891      	adds	r1, r2, r2
 8005964:	61b9      	str	r1, [r7, #24]
 8005966:	415b      	adcs	r3, r3
 8005968:	61fb      	str	r3, [r7, #28]
 800596a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800596e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005972:	f7fb f98b 	bl	8000c8c <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4b6c      	ldr	r3, [pc, #432]	; (8005b2c <UART_SetConfig+0x38c>)
 800597c:	fba3 1302 	umull	r1, r3, r3, r2
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	2164      	movs	r1, #100	; 0x64
 8005984:	fb01 f303 	mul.w	r3, r1, r3
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	3332      	adds	r3, #50	; 0x32
 800598e:	4a67      	ldr	r2, [pc, #412]	; (8005b2c <UART_SetConfig+0x38c>)
 8005990:	fba2 2303 	umull	r2, r3, r2, r3
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	f003 0207 	and.w	r2, r3, #7
 800599a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4432      	add	r2, r6
 80059a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059a2:	e0b9      	b.n	8005b18 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a6:	461c      	mov	r4, r3
 80059a8:	f04f 0500 	mov.w	r5, #0
 80059ac:	4622      	mov	r2, r4
 80059ae:	462b      	mov	r3, r5
 80059b0:	1891      	adds	r1, r2, r2
 80059b2:	6139      	str	r1, [r7, #16]
 80059b4:	415b      	adcs	r3, r3
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80059bc:	1912      	adds	r2, r2, r4
 80059be:	eb45 0303 	adc.w	r3, r5, r3
 80059c2:	f04f 0000 	mov.w	r0, #0
 80059c6:	f04f 0100 	mov.w	r1, #0
 80059ca:	00d9      	lsls	r1, r3, #3
 80059cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059d0:	00d0      	lsls	r0, r2, #3
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	eb12 0804 	adds.w	r8, r2, r4
 80059da:	eb43 0905 	adc.w	r9, r3, r5
 80059de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f04f 0100 	mov.w	r1, #0
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	008b      	lsls	r3, r1, #2
 80059f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059f6:	0082      	lsls	r2, r0, #2
 80059f8:	4640      	mov	r0, r8
 80059fa:	4649      	mov	r1, r9
 80059fc:	f7fb f946 	bl	8000c8c <__aeabi_uldivmod>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	4b49      	ldr	r3, [pc, #292]	; (8005b2c <UART_SetConfig+0x38c>)
 8005a06:	fba3 2302 	umull	r2, r3, r3, r2
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	011e      	lsls	r6, r3, #4
 8005a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a10:	4618      	mov	r0, r3
 8005a12:	f04f 0100 	mov.w	r1, #0
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	1894      	adds	r4, r2, r2
 8005a1c:	60bc      	str	r4, [r7, #8]
 8005a1e:	415b      	adcs	r3, r3
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a26:	1812      	adds	r2, r2, r0
 8005a28:	eb41 0303 	adc.w	r3, r1, r3
 8005a2c:	f04f 0400 	mov.w	r4, #0
 8005a30:	f04f 0500 	mov.w	r5, #0
 8005a34:	00dd      	lsls	r5, r3, #3
 8005a36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a3a:	00d4      	lsls	r4, r2, #3
 8005a3c:	4622      	mov	r2, r4
 8005a3e:	462b      	mov	r3, r5
 8005a40:	1814      	adds	r4, r2, r0
 8005a42:	64bc      	str	r4, [r7, #72]	; 0x48
 8005a44:	414b      	adcs	r3, r1
 8005a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f04f 0100 	mov.w	r1, #0
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	f04f 0300 	mov.w	r3, #0
 8005a5a:	008b      	lsls	r3, r1, #2
 8005a5c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a60:	0082      	lsls	r2, r0, #2
 8005a62:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005a66:	f7fb f911 	bl	8000c8c <__aeabi_uldivmod>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4b2f      	ldr	r3, [pc, #188]	; (8005b2c <UART_SetConfig+0x38c>)
 8005a70:	fba3 1302 	umull	r1, r3, r3, r2
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	2164      	movs	r1, #100	; 0x64
 8005a78:	fb01 f303 	mul.w	r3, r1, r3
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	3332      	adds	r3, #50	; 0x32
 8005a82:	4a2a      	ldr	r2, [pc, #168]	; (8005b2c <UART_SetConfig+0x38c>)
 8005a84:	fba2 2303 	umull	r2, r3, r2, r3
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a8e:	441e      	add	r6, r3
 8005a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a92:	4618      	mov	r0, r3
 8005a94:	f04f 0100 	mov.w	r1, #0
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	1894      	adds	r4, r2, r2
 8005a9e:	603c      	str	r4, [r7, #0]
 8005aa0:	415b      	adcs	r3, r3
 8005aa2:	607b      	str	r3, [r7, #4]
 8005aa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aa8:	1812      	adds	r2, r2, r0
 8005aaa:	eb41 0303 	adc.w	r3, r1, r3
 8005aae:	f04f 0400 	mov.w	r4, #0
 8005ab2:	f04f 0500 	mov.w	r5, #0
 8005ab6:	00dd      	lsls	r5, r3, #3
 8005ab8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005abc:	00d4      	lsls	r4, r2, #3
 8005abe:	4622      	mov	r2, r4
 8005ac0:	462b      	mov	r3, r5
 8005ac2:	eb12 0a00 	adds.w	sl, r2, r0
 8005ac6:	eb43 0b01 	adc.w	fp, r3, r1
 8005aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f04f 0100 	mov.w	r1, #0
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	008b      	lsls	r3, r1, #2
 8005ade:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ae2:	0082      	lsls	r2, r0, #2
 8005ae4:	4650      	mov	r0, sl
 8005ae6:	4659      	mov	r1, fp
 8005ae8:	f7fb f8d0 	bl	8000c8c <__aeabi_uldivmod>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4b0e      	ldr	r3, [pc, #56]	; (8005b2c <UART_SetConfig+0x38c>)
 8005af2:	fba3 1302 	umull	r1, r3, r3, r2
 8005af6:	095b      	lsrs	r3, r3, #5
 8005af8:	2164      	movs	r1, #100	; 0x64
 8005afa:	fb01 f303 	mul.w	r3, r1, r3
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	3332      	adds	r3, #50	; 0x32
 8005b04:	4a09      	ldr	r2, [pc, #36]	; (8005b2c <UART_SetConfig+0x38c>)
 8005b06:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	f003 020f 	and.w	r2, r3, #15
 8005b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4432      	add	r2, r6
 8005b16:	609a      	str	r2, [r3, #8]
}
 8005b18:	bf00      	nop
 8005b1a:	377c      	adds	r7, #124	; 0x7c
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b22:	bf00      	nop
 8005b24:	40011000 	.word	0x40011000
 8005b28:	40011400 	.word	0x40011400
 8005b2c:	51eb851f 	.word	0x51eb851f

08005b30 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	4603      	mov	r3, r0
 8005b38:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b42:	2b84      	cmp	r3, #132	; 0x84
 8005b44:	d005      	beq.n	8005b52 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005b46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	3303      	adds	r3, #3
 8005b50:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005b52:	68fb      	ldr	r3, [r7, #12]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005b64:	f000 fee0 	bl	8006928 <vTaskStartScheduler>
  
  return osOK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b70:	b089      	sub	sp, #36	; 0x24
 8005b72:	af04      	add	r7, sp, #16
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d020      	beq.n	8005bc2 <osThreadCreate+0x54>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d01c      	beq.n	8005bc2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685c      	ldr	r4, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681d      	ldr	r5, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691e      	ldr	r6, [r3, #16]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff ffc8 	bl	8005b30 <makeFreeRtosPriority>
 8005ba0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005baa:	9202      	str	r2, [sp, #8]
 8005bac:	9301      	str	r3, [sp, #4]
 8005bae:	9100      	str	r1, [sp, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	4632      	mov	r2, r6
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f000 fcee 	bl	8006598 <xTaskCreateStatic>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	e01c      	b.n	8005bfc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685c      	ldr	r4, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bce:	b29e      	uxth	r6, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff ffaa 	bl	8005b30 <makeFreeRtosPriority>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	f107 030c 	add.w	r3, r7, #12
 8005be2:	9301      	str	r3, [sp, #4]
 8005be4:	9200      	str	r2, [sp, #0]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	4632      	mov	r2, r6
 8005bea:	4629      	mov	r1, r5
 8005bec:	4620      	mov	r0, r4
 8005bee:	f000 fd30 	bl	8006652 <xTaskCreate>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d001      	beq.n	8005bfc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e000      	b.n	8005bfe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c06 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <osDelay+0x16>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	e000      	b.n	8005c1e <osDelay+0x18>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fe4e 	bl	80068c0 <vTaskDelay>
  
  return osOK;
 8005c24:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f103 0208 	add.w	r2, r3, #8
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f04f 32ff 	mov.w	r2, #4294967295
 8005c46:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f103 0208 	add.w	r2, r3, #8
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f103 0208 	add.w	r2, r3, #8
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	601a      	str	r2, [r3, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d103      	bne.n	8005cf0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	e00c      	b.n	8005d0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	e002      	b.n	8005cfe <vListInsert+0x2e>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d2f6      	bcs.n	8005cf8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	601a      	str	r2, [r3, #0]
}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6892      	ldr	r2, [r2, #8]
 8005d58:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6852      	ldr	r2, [r2, #4]
 8005d62:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d103      	bne.n	8005d76 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	1e5a      	subs	r2, r3, #1
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
	...

08005d98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005dc2:	f001 fcff 	bl	80077c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dce:	68f9      	ldr	r1, [r7, #12]
 8005dd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	441a      	add	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df2:	3b01      	subs	r3, #1
 8005df4:	68f9      	ldr	r1, [r7, #12]
 8005df6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	441a      	add	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	22ff      	movs	r2, #255	; 0xff
 8005e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	22ff      	movs	r2, #255	; 0xff
 8005e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d114      	bne.n	8005e42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01a      	beq.n	8005e56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3310      	adds	r3, #16
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 ffc1 	bl	8006dac <xTaskRemoveFromEventList>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d012      	beq.n	8005e56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e30:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <xQueueGenericReset+0xcc>)
 8005e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	e009      	b.n	8005e56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3310      	adds	r3, #16
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff fef1 	bl	8005c2e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3324      	adds	r3, #36	; 0x24
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff feec 	bl	8005c2e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e56:	f001 fce5 	bl	8007824 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e5a:	2301      	movs	r3, #1
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08a      	sub	sp, #40	; 0x28
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	4613      	mov	r3, r2
 8005e74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	613b      	str	r3, [r7, #16]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	fb02 f303 	mul.w	r3, r2, r3
 8005e9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	3348      	adds	r3, #72	; 0x48
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f001 fd71 	bl	8007988 <pvPortMalloc>
 8005ea6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d011      	beq.n	8005ed2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	3348      	adds	r3, #72	; 0x48
 8005eb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ec0:	79fa      	ldrb	r2, [r7, #7]
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f805 	bl	8005edc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ed2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3720      	adds	r7, #32
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d103      	bne.n	8005ef8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	e002      	b.n	8005efe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	69b8      	ldr	r0, [r7, #24]
 8005f0e:	f7ff ff43 	bl	8005d98 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b082      	sub	sp, #8
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00e      	beq.n	8005f46 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2100      	movs	r1, #0
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f81d 	bl	8005f80 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b086      	sub	sp, #24
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	4603      	mov	r3, r0
 8005f56:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	461a      	mov	r2, r3
 8005f64:	6939      	ldr	r1, [r7, #16]
 8005f66:	6978      	ldr	r0, [r7, #20]
 8005f68:	f7ff ff7e 	bl	8005e68 <xQueueGenericCreate>
 8005f6c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f7ff ffd3 	bl	8005f1a <prvInitialiseMutex>

		return xNewQueue;
 8005f74:	68fb      	ldr	r3, [r7, #12]
	}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08e      	sub	sp, #56	; 0x38
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <xQueueGenericSend+0x32>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d103      	bne.n	8005fc0 <xQueueGenericSend+0x40>
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <xQueueGenericSend+0x44>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <xQueueGenericSend+0x46>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10a      	bne.n	8005fe0 <xQueueGenericSend+0x60>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fdc:	bf00      	nop
 8005fde:	e7fe      	b.n	8005fde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d103      	bne.n	8005fee <xQueueGenericSend+0x6e>
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <xQueueGenericSend+0x72>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <xQueueGenericSend+0x74>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <xQueueGenericSend+0x8e>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	623b      	str	r3, [r7, #32]
}
 800600a:	bf00      	nop
 800600c:	e7fe      	b.n	800600c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800600e:	f001 f889 	bl	8007124 <xTaskGetSchedulerState>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <xQueueGenericSend+0x9e>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <xQueueGenericSend+0xa2>
 800601e:	2301      	movs	r3, #1
 8006020:	e000      	b.n	8006024 <xQueueGenericSend+0xa4>
 8006022:	2300      	movs	r3, #0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <xQueueGenericSend+0xbe>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	61fb      	str	r3, [r7, #28]
}
 800603a:	bf00      	nop
 800603c:	e7fe      	b.n	800603c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800603e:	f001 fbc1 	bl	80077c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604a:	429a      	cmp	r2, r3
 800604c:	d302      	bcc.n	8006054 <xQueueGenericSend+0xd4>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d129      	bne.n	80060a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800605a:	f000 f9b3 	bl	80063c4 <prvCopyDataToQueue>
 800605e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	2b00      	cmp	r3, #0
 8006066:	d010      	beq.n	800608a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	3324      	adds	r3, #36	; 0x24
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fe9d 	bl	8006dac <xTaskRemoveFromEventList>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d013      	beq.n	80060a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006078:	4b3f      	ldr	r3, [pc, #252]	; (8006178 <xQueueGenericSend+0x1f8>)
 800607a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	e00a      	b.n	80060a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d007      	beq.n	80060a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006090:	4b39      	ldr	r3, [pc, #228]	; (8006178 <xQueueGenericSend+0x1f8>)
 8006092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80060a0:	f001 fbc0 	bl	8007824 <vPortExitCritical>
				return pdPASS;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e063      	b.n	8006170 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d103      	bne.n	80060b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060ae:	f001 fbb9 	bl	8007824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	e05c      	b.n	8006170 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d106      	bne.n	80060ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060bc:	f107 0314 	add.w	r3, r7, #20
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fed5 	bl	8006e70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060c6:	2301      	movs	r3, #1
 80060c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060ca:	f001 fbab 	bl	8007824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060ce:	f000 fc8b 	bl	80069e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060d2:	f001 fb77 	bl	80077c4 <vPortEnterCritical>
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060dc:	b25b      	sxtb	r3, r3
 80060de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e2:	d103      	bne.n	80060ec <xQueueGenericSend+0x16c>
 80060e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060f2:	b25b      	sxtb	r3, r3
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d103      	bne.n	8006102 <xQueueGenericSend+0x182>
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006102:	f001 fb8f 	bl	8007824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006106:	1d3a      	adds	r2, r7, #4
 8006108:	f107 0314 	add.w	r3, r7, #20
 800610c:	4611      	mov	r1, r2
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fec4 	bl	8006e9c <xTaskCheckForTimeOut>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d124      	bne.n	8006164 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800611a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800611c:	f000 fa24 	bl	8006568 <prvIsQueueFull>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d018      	beq.n	8006158 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006128:	3310      	adds	r3, #16
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	4611      	mov	r1, r2
 800612e:	4618      	mov	r0, r3
 8006130:	f000 fe18 	bl	8006d64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006136:	f000 f9af 	bl	8006498 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800613a:	f000 fc63 	bl	8006a04 <xTaskResumeAll>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	f47f af7c 	bne.w	800603e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006146:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <xQueueGenericSend+0x1f8>)
 8006148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	e772      	b.n	800603e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800615a:	f000 f99d 	bl	8006498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800615e:	f000 fc51 	bl	8006a04 <xTaskResumeAll>
 8006162:	e76c      	b.n	800603e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006166:	f000 f997 	bl	8006498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800616a:	f000 fc4b 	bl	8006a04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800616e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006170:	4618      	mov	r0, r3
 8006172:	3738      	adds	r7, #56	; 0x38
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	e000ed04 	.word	0xe000ed04

0800617c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08e      	sub	sp, #56	; 0x38
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006186:	2300      	movs	r3, #0
 8006188:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800618e:	2300      	movs	r3, #0
 8006190:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10a      	bne.n	80061ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	623b      	str	r3, [r7, #32]
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80061ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	61fb      	str	r3, [r7, #28]
}
 80061c8:	bf00      	nop
 80061ca:	e7fe      	b.n	80061ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061cc:	f000 ffaa 	bl	8007124 <xTaskGetSchedulerState>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d102      	bne.n	80061dc <xQueueSemaphoreTake+0x60>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <xQueueSemaphoreTake+0x64>
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <xQueueSemaphoreTake+0x66>
 80061e0:	2300      	movs	r3, #0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	61bb      	str	r3, [r7, #24]
}
 80061f8:	bf00      	nop
 80061fa:	e7fe      	b.n	80061fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061fc:	f001 fae2 	bl	80077c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	2b00      	cmp	r3, #0
 800620a:	d024      	beq.n	8006256 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	1e5a      	subs	r2, r3, #1
 8006210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006212:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800621c:	f001 f92a 	bl	8007474 <pvTaskIncrementMutexHeldCount>
 8006220:	4602      	mov	r2, r0
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00f      	beq.n	800624e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	3310      	adds	r3, #16
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fdba 	bl	8006dac <xTaskRemoveFromEventList>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800623e:	4b54      	ldr	r3, [pc, #336]	; (8006390 <xQueueSemaphoreTake+0x214>)
 8006240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800624e:	f001 fae9 	bl	8007824 <vPortExitCritical>
				return pdPASS;
 8006252:	2301      	movs	r3, #1
 8006254:	e097      	b.n	8006386 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d111      	bne.n	8006280 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	617b      	str	r3, [r7, #20]
}
 8006274:	bf00      	nop
 8006276:	e7fe      	b.n	8006276 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006278:	f001 fad4 	bl	8007824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800627c:	2300      	movs	r3, #0
 800627e:	e082      	b.n	8006386 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006286:	f107 030c 	add.w	r3, r7, #12
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fdf0 	bl	8006e70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006290:	2301      	movs	r3, #1
 8006292:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006294:	f001 fac6 	bl	8007824 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006298:	f000 fba6 	bl	80069e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800629c:	f001 fa92 	bl	80077c4 <vPortEnterCritical>
 80062a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062a6:	b25b      	sxtb	r3, r3
 80062a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ac:	d103      	bne.n	80062b6 <xQueueSemaphoreTake+0x13a>
 80062ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062bc:	b25b      	sxtb	r3, r3
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c2:	d103      	bne.n	80062cc <xQueueSemaphoreTake+0x150>
 80062c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062cc:	f001 faaa 	bl	8007824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062d0:	463a      	mov	r2, r7
 80062d2:	f107 030c 	add.w	r3, r7, #12
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 fddf 	bl	8006e9c <xTaskCheckForTimeOut>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d132      	bne.n	800634a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062e6:	f000 f929 	bl	800653c <prvIsQueueEmpty>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d026      	beq.n	800633e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d109      	bne.n	800630c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80062f8:	f001 fa64 	bl	80077c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 ff2d 	bl	8007160 <xTaskPriorityInherit>
 8006306:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006308:	f001 fa8c 	bl	8007824 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	3324      	adds	r3, #36	; 0x24
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	4611      	mov	r1, r2
 8006314:	4618      	mov	r0, r3
 8006316:	f000 fd25 	bl	8006d64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800631a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800631c:	f000 f8bc 	bl	8006498 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006320:	f000 fb70 	bl	8006a04 <xTaskResumeAll>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	f47f af68 	bne.w	80061fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800632c:	4b18      	ldr	r3, [pc, #96]	; (8006390 <xQueueSemaphoreTake+0x214>)
 800632e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	e75e      	b.n	80061fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800633e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006340:	f000 f8aa 	bl	8006498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006344:	f000 fb5e 	bl	8006a04 <xTaskResumeAll>
 8006348:	e758      	b.n	80061fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800634a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800634c:	f000 f8a4 	bl	8006498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006350:	f000 fb58 	bl	8006a04 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006356:	f000 f8f1 	bl	800653c <prvIsQueueEmpty>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	f43f af4d 	beq.w	80061fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00d      	beq.n	8006384 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006368:	f001 fa2c 	bl	80077c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800636c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800636e:	f000 f811 	bl	8006394 <prvGetDisinheritPriorityAfterTimeout>
 8006372:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800637a:	4618      	mov	r0, r3
 800637c:	f000 ffec 	bl	8007358 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006380:	f001 fa50 	bl	8007824 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006384:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006386:	4618      	mov	r0, r3
 8006388:	3738      	adds	r7, #56	; 0x38
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	e000ed04 	.word	0xe000ed04

08006394 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d006      	beq.n	80063b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f1c3 0307 	rsb	r3, r3, #7
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	e001      	b.n	80063b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80063b2:	2300      	movs	r3, #0
 80063b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80063b6:	68fb      	ldr	r3, [r7, #12]
	}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063d0:	2300      	movs	r3, #0
 80063d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10d      	bne.n	80063fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d14d      	bne.n	8006486 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 ff2c 	bl	800724c <xTaskPriorityDisinherit>
 80063f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	609a      	str	r2, [r3, #8]
 80063fc:	e043      	b.n	8006486 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d119      	bne.n	8006438 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6858      	ldr	r0, [r3, #4]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640c:	461a      	mov	r2, r3
 800640e:	68b9      	ldr	r1, [r7, #8]
 8006410:	f001 feae 	bl	8008170 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641c:	441a      	add	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	429a      	cmp	r2, r3
 800642c:	d32b      	bcc.n	8006486 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	605a      	str	r2, [r3, #4]
 8006436:	e026      	b.n	8006486 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	68d8      	ldr	r0, [r3, #12]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006440:	461a      	mov	r2, r3
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	f001 fe94 	bl	8008170 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006450:	425b      	negs	r3, r3
 8006452:	441a      	add	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	429a      	cmp	r2, r3
 8006462:	d207      	bcs.n	8006474 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646c:	425b      	negs	r3, r3
 800646e:	441a      	add	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b02      	cmp	r3, #2
 8006478:	d105      	bne.n	8006486 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	3b01      	subs	r3, #1
 8006484:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800648e:	697b      	ldr	r3, [r7, #20]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064a0:	f001 f990 	bl	80077c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064ac:	e011      	b.n	80064d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d012      	beq.n	80064dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	3324      	adds	r3, #36	; 0x24
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fc76 	bl	8006dac <xTaskRemoveFromEventList>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064c6:	f000 fd4b 	bl	8006f60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	dce9      	bgt.n	80064ae <prvUnlockQueue+0x16>
 80064da:	e000      	b.n	80064de <prvUnlockQueue+0x46>
					break;
 80064dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	22ff      	movs	r2, #255	; 0xff
 80064e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80064e6:	f001 f99d 	bl	8007824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064ea:	f001 f96b 	bl	80077c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064f6:	e011      	b.n	800651c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d012      	beq.n	8006526 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3310      	adds	r3, #16
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fc51 	bl	8006dac <xTaskRemoveFromEventList>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006510:	f000 fd26 	bl	8006f60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	3b01      	subs	r3, #1
 8006518:	b2db      	uxtb	r3, r3
 800651a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800651c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006520:	2b00      	cmp	r3, #0
 8006522:	dce9      	bgt.n	80064f8 <prvUnlockQueue+0x60>
 8006524:	e000      	b.n	8006528 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006526:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	22ff      	movs	r2, #255	; 0xff
 800652c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006530:	f001 f978 	bl	8007824 <vPortExitCritical>
}
 8006534:	bf00      	nop
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006544:	f001 f93e 	bl	80077c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006550:	2301      	movs	r3, #1
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	e001      	b.n	800655a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800655a:	f001 f963 	bl	8007824 <vPortExitCritical>

	return xReturn;
 800655e:	68fb      	ldr	r3, [r7, #12]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006570:	f001 f928 	bl	80077c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657c:	429a      	cmp	r2, r3
 800657e:	d102      	bne.n	8006586 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006580:	2301      	movs	r3, #1
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	e001      	b.n	800658a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006586:	2300      	movs	r3, #0
 8006588:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800658a:	f001 f94b 	bl	8007824 <vPortExitCritical>

	return xReturn;
 800658e:	68fb      	ldr	r3, [r7, #12]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08e      	sub	sp, #56	; 0x38
 800659c:	af04      	add	r7, sp, #16
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10a      	bne.n	80065c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	623b      	str	r3, [r7, #32]
}
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <xTaskCreateStatic+0x46>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	61fb      	str	r3, [r7, #28]
}
 80065da:	bf00      	nop
 80065dc:	e7fe      	b.n	80065dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065de:	2354      	movs	r3, #84	; 0x54
 80065e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	2b54      	cmp	r3, #84	; 0x54
 80065e6:	d00a      	beq.n	80065fe <xTaskCreateStatic+0x66>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	61bb      	str	r3, [r7, #24]
}
 80065fa:	bf00      	nop
 80065fc:	e7fe      	b.n	80065fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006602:	2b00      	cmp	r3, #0
 8006604:	d01e      	beq.n	8006644 <xTaskCreateStatic+0xac>
 8006606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006608:	2b00      	cmp	r3, #0
 800660a:	d01b      	beq.n	8006644 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006614:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	2202      	movs	r2, #2
 800661a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800661e:	2300      	movs	r3, #0
 8006620:	9303      	str	r3, [sp, #12]
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	9302      	str	r3, [sp, #8]
 8006626:	f107 0314 	add.w	r3, r7, #20
 800662a:	9301      	str	r3, [sp, #4]
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 f850 	bl	80066dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800663c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800663e:	f000 f8d5 	bl	80067ec <prvAddNewTaskToReadyList>
 8006642:	e001      	b.n	8006648 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006644:	2300      	movs	r3, #0
 8006646:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006648:	697b      	ldr	r3, [r7, #20]
	}
 800664a:	4618      	mov	r0, r3
 800664c:	3728      	adds	r7, #40	; 0x28
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006652:	b580      	push	{r7, lr}
 8006654:	b08c      	sub	sp, #48	; 0x30
 8006656:	af04      	add	r7, sp, #16
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	603b      	str	r3, [r7, #0]
 800665e:	4613      	mov	r3, r2
 8006660:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006662:	88fb      	ldrh	r3, [r7, #6]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4618      	mov	r0, r3
 8006668:	f001 f98e 	bl	8007988 <pvPortMalloc>
 800666c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00e      	beq.n	8006692 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006674:	2054      	movs	r0, #84	; 0x54
 8006676:	f001 f987 	bl	8007988 <pvPortMalloc>
 800667a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	631a      	str	r2, [r3, #48]	; 0x30
 8006688:	e005      	b.n	8006696 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800668a:	6978      	ldr	r0, [r7, #20]
 800668c:	f001 fa48 	bl	8007b20 <vPortFree>
 8006690:	e001      	b.n	8006696 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006692:	2300      	movs	r3, #0
 8006694:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d017      	beq.n	80066cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066a4:	88fa      	ldrh	r2, [r7, #6]
 80066a6:	2300      	movs	r3, #0
 80066a8:	9303      	str	r3, [sp, #12]
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	9302      	str	r3, [sp, #8]
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f80e 	bl	80066dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066c0:	69f8      	ldr	r0, [r7, #28]
 80066c2:	f000 f893 	bl	80067ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066c6:	2301      	movs	r3, #1
 80066c8:	61bb      	str	r3, [r7, #24]
 80066ca:	e002      	b.n	80066d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066cc:	f04f 33ff 	mov.w	r3, #4294967295
 80066d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066d2:	69bb      	ldr	r3, [r7, #24]
	}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3720      	adds	r7, #32
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066f4:	3b01      	subs	r3, #1
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	f023 0307 	bic.w	r3, r3, #7
 8006702:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <prvInitialiseNewTask+0x48>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	617b      	str	r3, [r7, #20]
}
 8006720:	bf00      	nop
 8006722:	e7fe      	b.n	8006722 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d01f      	beq.n	800676a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800672a:	2300      	movs	r3, #0
 800672c:	61fb      	str	r3, [r7, #28]
 800672e:	e012      	b.n	8006756 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	4413      	add	r3, r2
 8006736:	7819      	ldrb	r1, [r3, #0]
 8006738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	4413      	add	r3, r2
 800673e:	3334      	adds	r3, #52	; 0x34
 8006740:	460a      	mov	r2, r1
 8006742:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	4413      	add	r3, r2
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d006      	beq.n	800675e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	3301      	adds	r3, #1
 8006754:	61fb      	str	r3, [r7, #28]
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	2b0f      	cmp	r3, #15
 800675a:	d9e9      	bls.n	8006730 <prvInitialiseNewTask+0x54>
 800675c:	e000      	b.n	8006760 <prvInitialiseNewTask+0x84>
			{
				break;
 800675e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006768:	e003      	b.n	8006772 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006774:	2b06      	cmp	r3, #6
 8006776:	d901      	bls.n	800677c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006778:	2306      	movs	r3, #6
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006780:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006786:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	2200      	movs	r2, #0
 800678c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	3304      	adds	r3, #4
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff fa6b 	bl	8005c6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679a:	3318      	adds	r3, #24
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff fa66 	bl	8005c6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	f1c3 0207 	rsb	r2, r3, #7
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	2200      	movs	r2, #0
 80067bc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	68f9      	ldr	r1, [r7, #12]
 80067ca:	69b8      	ldr	r0, [r7, #24]
 80067cc:	f000 fecc 	bl	8007568 <pxPortInitialiseStack>
 80067d0:	4602      	mov	r2, r0
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80067d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067e2:	bf00      	nop
 80067e4:	3720      	adds	r7, #32
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80067f4:	f000 ffe6 	bl	80077c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067f8:	4b2a      	ldr	r3, [pc, #168]	; (80068a4 <prvAddNewTaskToReadyList+0xb8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3301      	adds	r3, #1
 80067fe:	4a29      	ldr	r2, [pc, #164]	; (80068a4 <prvAddNewTaskToReadyList+0xb8>)
 8006800:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006802:	4b29      	ldr	r3, [pc, #164]	; (80068a8 <prvAddNewTaskToReadyList+0xbc>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d109      	bne.n	800681e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800680a:	4a27      	ldr	r2, [pc, #156]	; (80068a8 <prvAddNewTaskToReadyList+0xbc>)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006810:	4b24      	ldr	r3, [pc, #144]	; (80068a4 <prvAddNewTaskToReadyList+0xb8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d110      	bne.n	800683a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006818:	f000 fbc6 	bl	8006fa8 <prvInitialiseTaskLists>
 800681c:	e00d      	b.n	800683a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800681e:	4b23      	ldr	r3, [pc, #140]	; (80068ac <prvAddNewTaskToReadyList+0xc0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d109      	bne.n	800683a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006826:	4b20      	ldr	r3, [pc, #128]	; (80068a8 <prvAddNewTaskToReadyList+0xbc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006830:	429a      	cmp	r2, r3
 8006832:	d802      	bhi.n	800683a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006834:	4a1c      	ldr	r2, [pc, #112]	; (80068a8 <prvAddNewTaskToReadyList+0xbc>)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800683a:	4b1d      	ldr	r3, [pc, #116]	; (80068b0 <prvAddNewTaskToReadyList+0xc4>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3301      	adds	r3, #1
 8006840:	4a1b      	ldr	r2, [pc, #108]	; (80068b0 <prvAddNewTaskToReadyList+0xc4>)
 8006842:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	2201      	movs	r2, #1
 800684a:	409a      	lsls	r2, r3
 800684c:	4b19      	ldr	r3, [pc, #100]	; (80068b4 <prvAddNewTaskToReadyList+0xc8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4313      	orrs	r3, r2
 8006852:	4a18      	ldr	r2, [pc, #96]	; (80068b4 <prvAddNewTaskToReadyList+0xc8>)
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685a:	4613      	mov	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4a15      	ldr	r2, [pc, #84]	; (80068b8 <prvAddNewTaskToReadyList+0xcc>)
 8006864:	441a      	add	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	3304      	adds	r3, #4
 800686a:	4619      	mov	r1, r3
 800686c:	4610      	mov	r0, r2
 800686e:	f7ff fa0b 	bl	8005c88 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006872:	f000 ffd7 	bl	8007824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006876:	4b0d      	ldr	r3, [pc, #52]	; (80068ac <prvAddNewTaskToReadyList+0xc0>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00e      	beq.n	800689c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800687e:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <prvAddNewTaskToReadyList+0xbc>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006888:	429a      	cmp	r2, r3
 800688a:	d207      	bcs.n	800689c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800688c:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <prvAddNewTaskToReadyList+0xd0>)
 800688e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800689c:	bf00      	nop
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	200005d8 	.word	0x200005d8
 80068a8:	200004d8 	.word	0x200004d8
 80068ac:	200005e4 	.word	0x200005e4
 80068b0:	200005f4 	.word	0x200005f4
 80068b4:	200005e0 	.word	0x200005e0
 80068b8:	200004dc 	.word	0x200004dc
 80068bc:	e000ed04 	.word	0xe000ed04

080068c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80068c8:	2300      	movs	r3, #0
 80068ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d017      	beq.n	8006902 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80068d2:	4b13      	ldr	r3, [pc, #76]	; (8006920 <vTaskDelay+0x60>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <vTaskDelay+0x30>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	60bb      	str	r3, [r7, #8]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80068f0:	f000 f87a 	bl	80069e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068f4:	2100      	movs	r1, #0
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fdd0 	bl	800749c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80068fc:	f000 f882 	bl	8006a04 <xTaskResumeAll>
 8006900:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d107      	bne.n	8006918 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006908:	4b06      	ldr	r3, [pc, #24]	; (8006924 <vTaskDelay+0x64>)
 800690a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20000600 	.word	0x20000600
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08a      	sub	sp, #40	; 0x28
 800692c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800692e:	2300      	movs	r3, #0
 8006930:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006936:	463a      	mov	r2, r7
 8006938:	1d39      	adds	r1, r7, #4
 800693a:	f107 0308 	add.w	r3, r7, #8
 800693e:	4618      	mov	r0, r3
 8006940:	f7fb fbe6 	bl	8002110 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	9202      	str	r2, [sp, #8]
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	2300      	movs	r3, #0
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	2300      	movs	r3, #0
 8006954:	460a      	mov	r2, r1
 8006956:	491e      	ldr	r1, [pc, #120]	; (80069d0 <vTaskStartScheduler+0xa8>)
 8006958:	481e      	ldr	r0, [pc, #120]	; (80069d4 <vTaskStartScheduler+0xac>)
 800695a:	f7ff fe1d 	bl	8006598 <xTaskCreateStatic>
 800695e:	4603      	mov	r3, r0
 8006960:	4a1d      	ldr	r2, [pc, #116]	; (80069d8 <vTaskStartScheduler+0xb0>)
 8006962:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006964:	4b1c      	ldr	r3, [pc, #112]	; (80069d8 <vTaskStartScheduler+0xb0>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800696c:	2301      	movs	r3, #1
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	e001      	b.n	8006976 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006972:	2300      	movs	r3, #0
 8006974:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d116      	bne.n	80069aa <vTaskStartScheduler+0x82>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	613b      	str	r3, [r7, #16]
}
 800698e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006990:	4b12      	ldr	r3, [pc, #72]	; (80069dc <vTaskStartScheduler+0xb4>)
 8006992:	f04f 32ff 	mov.w	r2, #4294967295
 8006996:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006998:	4b11      	ldr	r3, [pc, #68]	; (80069e0 <vTaskStartScheduler+0xb8>)
 800699a:	2201      	movs	r2, #1
 800699c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800699e:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <vTaskStartScheduler+0xbc>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069a4:	f000 fe6c 	bl	8007680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069a8:	e00e      	b.n	80069c8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b0:	d10a      	bne.n	80069c8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	60fb      	str	r3, [r7, #12]
}
 80069c4:	bf00      	nop
 80069c6:	e7fe      	b.n	80069c6 <vTaskStartScheduler+0x9e>
}
 80069c8:	bf00      	nop
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	0800dd2c 	.word	0x0800dd2c
 80069d4:	08006f79 	.word	0x08006f79
 80069d8:	200005fc 	.word	0x200005fc
 80069dc:	200005f8 	.word	0x200005f8
 80069e0:	200005e4 	.word	0x200005e4
 80069e4:	200005dc 	.word	0x200005dc

080069e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80069ec:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <vTaskSuspendAll+0x18>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3301      	adds	r3, #1
 80069f2:	4a03      	ldr	r2, [pc, #12]	; (8006a00 <vTaskSuspendAll+0x18>)
 80069f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80069f6:	bf00      	nop
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	20000600 	.word	0x20000600

08006a04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a12:	4b41      	ldr	r3, [pc, #260]	; (8006b18 <xTaskResumeAll+0x114>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10a      	bne.n	8006a30 <xTaskResumeAll+0x2c>
	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	603b      	str	r3, [r7, #0]
}
 8006a2c:	bf00      	nop
 8006a2e:	e7fe      	b.n	8006a2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a30:	f000 fec8 	bl	80077c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a34:	4b38      	ldr	r3, [pc, #224]	; (8006b18 <xTaskResumeAll+0x114>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	4a37      	ldr	r2, [pc, #220]	; (8006b18 <xTaskResumeAll+0x114>)
 8006a3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a3e:	4b36      	ldr	r3, [pc, #216]	; (8006b18 <xTaskResumeAll+0x114>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d161      	bne.n	8006b0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a46:	4b35      	ldr	r3, [pc, #212]	; (8006b1c <xTaskResumeAll+0x118>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d05d      	beq.n	8006b0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a4e:	e02e      	b.n	8006aae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a50:	4b33      	ldr	r3, [pc, #204]	; (8006b20 <xTaskResumeAll+0x11c>)
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	3318      	adds	r3, #24
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7ff f970 	bl	8005d42 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3304      	adds	r3, #4
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff f96b 	bl	8005d42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a70:	2201      	movs	r2, #1
 8006a72:	409a      	lsls	r2, r3
 8006a74:	4b2b      	ldr	r3, [pc, #172]	; (8006b24 <xTaskResumeAll+0x120>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	4a2a      	ldr	r2, [pc, #168]	; (8006b24 <xTaskResumeAll+0x120>)
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4a27      	ldr	r2, [pc, #156]	; (8006b28 <xTaskResumeAll+0x124>)
 8006a8c:	441a      	add	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3304      	adds	r3, #4
 8006a92:	4619      	mov	r1, r3
 8006a94:	4610      	mov	r0, r2
 8006a96:	f7ff f8f7 	bl	8005c88 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9e:	4b23      	ldr	r3, [pc, #140]	; (8006b2c <xTaskResumeAll+0x128>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d302      	bcc.n	8006aae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006aa8:	4b21      	ldr	r3, [pc, #132]	; (8006b30 <xTaskResumeAll+0x12c>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006aae:	4b1c      	ldr	r3, [pc, #112]	; (8006b20 <xTaskResumeAll+0x11c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1cc      	bne.n	8006a50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006abc:	f000 fb12 	bl	80070e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ac0:	4b1c      	ldr	r3, [pc, #112]	; (8006b34 <xTaskResumeAll+0x130>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d010      	beq.n	8006aee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006acc:	f000 f836 	bl	8006b3c <xTaskIncrementTick>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006ad6:	4b16      	ldr	r3, [pc, #88]	; (8006b30 <xTaskResumeAll+0x12c>)
 8006ad8:	2201      	movs	r2, #1
 8006ada:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1f1      	bne.n	8006acc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006ae8:	4b12      	ldr	r3, [pc, #72]	; (8006b34 <xTaskResumeAll+0x130>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006aee:	4b10      	ldr	r3, [pc, #64]	; (8006b30 <xTaskResumeAll+0x12c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d009      	beq.n	8006b0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006af6:	2301      	movs	r3, #1
 8006af8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006afa:	4b0f      	ldr	r3, [pc, #60]	; (8006b38 <xTaskResumeAll+0x134>)
 8006afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b0a:	f000 fe8b 	bl	8007824 <vPortExitCritical>

	return xAlreadyYielded;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	20000600 	.word	0x20000600
 8006b1c:	200005d8 	.word	0x200005d8
 8006b20:	20000598 	.word	0x20000598
 8006b24:	200005e0 	.word	0x200005e0
 8006b28:	200004dc 	.word	0x200004dc
 8006b2c:	200004d8 	.word	0x200004d8
 8006b30:	200005ec 	.word	0x200005ec
 8006b34:	200005e8 	.word	0x200005e8
 8006b38:	e000ed04 	.word	0xe000ed04

08006b3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b46:	4b4e      	ldr	r3, [pc, #312]	; (8006c80 <xTaskIncrementTick+0x144>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f040 808e 	bne.w	8006c6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b50:	4b4c      	ldr	r3, [pc, #304]	; (8006c84 <xTaskIncrementTick+0x148>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3301      	adds	r3, #1
 8006b56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b58:	4a4a      	ldr	r2, [pc, #296]	; (8006c84 <xTaskIncrementTick+0x148>)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d120      	bne.n	8006ba6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b64:	4b48      	ldr	r3, [pc, #288]	; (8006c88 <xTaskIncrementTick+0x14c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <xTaskIncrementTick+0x48>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	603b      	str	r3, [r7, #0]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <xTaskIncrementTick+0x46>
 8006b84:	4b40      	ldr	r3, [pc, #256]	; (8006c88 <xTaskIncrementTick+0x14c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	60fb      	str	r3, [r7, #12]
 8006b8a:	4b40      	ldr	r3, [pc, #256]	; (8006c8c <xTaskIncrementTick+0x150>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a3e      	ldr	r2, [pc, #248]	; (8006c88 <xTaskIncrementTick+0x14c>)
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	4a3e      	ldr	r2, [pc, #248]	; (8006c8c <xTaskIncrementTick+0x150>)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	4b3d      	ldr	r3, [pc, #244]	; (8006c90 <xTaskIncrementTick+0x154>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	4a3c      	ldr	r2, [pc, #240]	; (8006c90 <xTaskIncrementTick+0x154>)
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	f000 fa9f 	bl	80070e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ba6:	4b3b      	ldr	r3, [pc, #236]	; (8006c94 <xTaskIncrementTick+0x158>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d348      	bcc.n	8006c42 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bb0:	4b35      	ldr	r3, [pc, #212]	; (8006c88 <xTaskIncrementTick+0x14c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d104      	bne.n	8006bc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bba:	4b36      	ldr	r3, [pc, #216]	; (8006c94 <xTaskIncrementTick+0x158>)
 8006bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc0:	601a      	str	r2, [r3, #0]
					break;
 8006bc2:	e03e      	b.n	8006c42 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc4:	4b30      	ldr	r3, [pc, #192]	; (8006c88 <xTaskIncrementTick+0x14c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d203      	bcs.n	8006be4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006bdc:	4a2d      	ldr	r2, [pc, #180]	; (8006c94 <xTaskIncrementTick+0x158>)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006be2:	e02e      	b.n	8006c42 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	3304      	adds	r3, #4
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff f8aa 	bl	8005d42 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d004      	beq.n	8006c00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	3318      	adds	r3, #24
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff f8a1 	bl	8005d42 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c04:	2201      	movs	r2, #1
 8006c06:	409a      	lsls	r2, r3
 8006c08:	4b23      	ldr	r3, [pc, #140]	; (8006c98 <xTaskIncrementTick+0x15c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	4a22      	ldr	r2, [pc, #136]	; (8006c98 <xTaskIncrementTick+0x15c>)
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c16:	4613      	mov	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4a1f      	ldr	r2, [pc, #124]	; (8006c9c <xTaskIncrementTick+0x160>)
 8006c20:	441a      	add	r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	3304      	adds	r3, #4
 8006c26:	4619      	mov	r1, r3
 8006c28:	4610      	mov	r0, r2
 8006c2a:	f7ff f82d 	bl	8005c88 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c32:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <xTaskIncrementTick+0x164>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d3b9      	bcc.n	8006bb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c40:	e7b6      	b.n	8006bb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c42:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <xTaskIncrementTick+0x164>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c48:	4914      	ldr	r1, [pc, #80]	; (8006c9c <xTaskIncrementTick+0x160>)
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d901      	bls.n	8006c5e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c5e:	4b11      	ldr	r3, [pc, #68]	; (8006ca4 <xTaskIncrementTick+0x168>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d007      	beq.n	8006c76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006c66:	2301      	movs	r3, #1
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	e004      	b.n	8006c76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <xTaskIncrementTick+0x16c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3301      	adds	r3, #1
 8006c72:	4a0d      	ldr	r2, [pc, #52]	; (8006ca8 <xTaskIncrementTick+0x16c>)
 8006c74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c76:	697b      	ldr	r3, [r7, #20]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	20000600 	.word	0x20000600
 8006c84:	200005dc 	.word	0x200005dc
 8006c88:	20000590 	.word	0x20000590
 8006c8c:	20000594 	.word	0x20000594
 8006c90:	200005f0 	.word	0x200005f0
 8006c94:	200005f8 	.word	0x200005f8
 8006c98:	200005e0 	.word	0x200005e0
 8006c9c:	200004dc 	.word	0x200004dc
 8006ca0:	200004d8 	.word	0x200004d8
 8006ca4:	200005ec 	.word	0x200005ec
 8006ca8:	200005e8 	.word	0x200005e8

08006cac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006cb2:	4b27      	ldr	r3, [pc, #156]	; (8006d50 <vTaskSwitchContext+0xa4>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006cba:	4b26      	ldr	r3, [pc, #152]	; (8006d54 <vTaskSwitchContext+0xa8>)
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006cc0:	e03f      	b.n	8006d42 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006cc2:	4b24      	ldr	r3, [pc, #144]	; (8006d54 <vTaskSwitchContext+0xa8>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cc8:	4b23      	ldr	r3, [pc, #140]	; (8006d58 <vTaskSwitchContext+0xac>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	fab3 f383 	clz	r3, r3
 8006cd4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006cd6:	7afb      	ldrb	r3, [r7, #11]
 8006cd8:	f1c3 031f 	rsb	r3, r3, #31
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	491f      	ldr	r1, [pc, #124]	; (8006d5c <vTaskSwitchContext+0xb0>)
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	440b      	add	r3, r1
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10a      	bne.n	8006d08 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	607b      	str	r3, [r7, #4]
}
 8006d04:	bf00      	nop
 8006d06:	e7fe      	b.n	8006d06 <vTaskSwitchContext+0x5a>
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4a12      	ldr	r2, [pc, #72]	; (8006d5c <vTaskSwitchContext+0xb0>)
 8006d14:	4413      	add	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	605a      	str	r2, [r3, #4]
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	3308      	adds	r3, #8
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d104      	bne.n	8006d38 <vTaskSwitchContext+0x8c>
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	605a      	str	r2, [r3, #4]
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	4a08      	ldr	r2, [pc, #32]	; (8006d60 <vTaskSwitchContext+0xb4>)
 8006d40:	6013      	str	r3, [r2, #0]
}
 8006d42:	bf00      	nop
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	20000600 	.word	0x20000600
 8006d54:	200005ec 	.word	0x200005ec
 8006d58:	200005e0 	.word	0x200005e0
 8006d5c:	200004dc 	.word	0x200004dc
 8006d60:	200004d8 	.word	0x200004d8

08006d64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	60fb      	str	r3, [r7, #12]
}
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d8a:	4b07      	ldr	r3, [pc, #28]	; (8006da8 <vTaskPlaceOnEventList+0x44>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3318      	adds	r3, #24
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7fe ff9c 	bl	8005cd0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d98:	2101      	movs	r1, #1
 8006d9a:	6838      	ldr	r0, [r7, #0]
 8006d9c:	f000 fb7e 	bl	800749c <prvAddCurrentTaskToDelayedList>
}
 8006da0:	bf00      	nop
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	200004d8 	.word	0x200004d8

08006dac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10a      	bne.n	8006dd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	60fb      	str	r3, [r7, #12]
}
 8006dd4:	bf00      	nop
 8006dd6:	e7fe      	b.n	8006dd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3318      	adds	r3, #24
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fe ffb0 	bl	8005d42 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006de2:	4b1d      	ldr	r3, [pc, #116]	; (8006e58 <xTaskRemoveFromEventList+0xac>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d11c      	bne.n	8006e24 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	3304      	adds	r3, #4
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe ffa7 	bl	8005d42 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	2201      	movs	r2, #1
 8006dfa:	409a      	lsls	r2, r3
 8006dfc:	4b17      	ldr	r3, [pc, #92]	; (8006e5c <xTaskRemoveFromEventList+0xb0>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	4a16      	ldr	r2, [pc, #88]	; (8006e5c <xTaskRemoveFromEventList+0xb0>)
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4a13      	ldr	r2, [pc, #76]	; (8006e60 <xTaskRemoveFromEventList+0xb4>)
 8006e14:	441a      	add	r2, r3
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	f7fe ff33 	bl	8005c88 <vListInsertEnd>
 8006e22:	e005      	b.n	8006e30 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	3318      	adds	r3, #24
 8006e28:	4619      	mov	r1, r3
 8006e2a:	480e      	ldr	r0, [pc, #56]	; (8006e64 <xTaskRemoveFromEventList+0xb8>)
 8006e2c:	f7fe ff2c 	bl	8005c88 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e34:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <xTaskRemoveFromEventList+0xbc>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d905      	bls.n	8006e4a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e42:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <xTaskRemoveFromEventList+0xc0>)
 8006e44:	2201      	movs	r2, #1
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	e001      	b.n	8006e4e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e4e:	697b      	ldr	r3, [r7, #20]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	20000600 	.word	0x20000600
 8006e5c:	200005e0 	.word	0x200005e0
 8006e60:	200004dc 	.word	0x200004dc
 8006e64:	20000598 	.word	0x20000598
 8006e68:	200004d8 	.word	0x200004d8
 8006e6c:	200005ec 	.word	0x200005ec

08006e70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e78:	4b06      	ldr	r3, [pc, #24]	; (8006e94 <vTaskInternalSetTimeOutState+0x24>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e80:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <vTaskInternalSetTimeOutState+0x28>)
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	605a      	str	r2, [r3, #4]
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	200005f0 	.word	0x200005f0
 8006e98:	200005dc 	.word	0x200005dc

08006e9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10a      	bne.n	8006ec2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	613b      	str	r3, [r7, #16]
}
 8006ebe:	bf00      	nop
 8006ec0:	e7fe      	b.n	8006ec0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10a      	bne.n	8006ede <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	60fb      	str	r3, [r7, #12]
}
 8006eda:	bf00      	nop
 8006edc:	e7fe      	b.n	8006edc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006ede:	f000 fc71 	bl	80077c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006ee2:	4b1d      	ldr	r3, [pc, #116]	; (8006f58 <xTaskCheckForTimeOut+0xbc>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efa:	d102      	bne.n	8006f02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006efc:	2300      	movs	r3, #0
 8006efe:	61fb      	str	r3, [r7, #28]
 8006f00:	e023      	b.n	8006f4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	4b15      	ldr	r3, [pc, #84]	; (8006f5c <xTaskCheckForTimeOut+0xc0>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d007      	beq.n	8006f1e <xTaskCheckForTimeOut+0x82>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d302      	bcc.n	8006f1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	61fb      	str	r3, [r7, #28]
 8006f1c:	e015      	b.n	8006f4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d20b      	bcs.n	8006f40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	1ad2      	subs	r2, r2, r3
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff ff9b 	bl	8006e70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61fb      	str	r3, [r7, #28]
 8006f3e:	e004      	b.n	8006f4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f46:	2301      	movs	r3, #1
 8006f48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f4a:	f000 fc6b 	bl	8007824 <vPortExitCritical>

	return xReturn;
 8006f4e:	69fb      	ldr	r3, [r7, #28]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3720      	adds	r7, #32
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	200005dc 	.word	0x200005dc
 8006f5c:	200005f0 	.word	0x200005f0

08006f60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f64:	4b03      	ldr	r3, [pc, #12]	; (8006f74 <vTaskMissedYield+0x14>)
 8006f66:	2201      	movs	r2, #1
 8006f68:	601a      	str	r2, [r3, #0]
}
 8006f6a:	bf00      	nop
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	200005ec 	.word	0x200005ec

08006f78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f80:	f000 f852 	bl	8007028 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f84:	4b06      	ldr	r3, [pc, #24]	; (8006fa0 <prvIdleTask+0x28>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d9f9      	bls.n	8006f80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f8c:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <prvIdleTask+0x2c>)
 8006f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f9c:	e7f0      	b.n	8006f80 <prvIdleTask+0x8>
 8006f9e:	bf00      	nop
 8006fa0:	200004dc 	.word	0x200004dc
 8006fa4:	e000ed04 	.word	0xe000ed04

08006fa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fae:	2300      	movs	r3, #0
 8006fb0:	607b      	str	r3, [r7, #4]
 8006fb2:	e00c      	b.n	8006fce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4a12      	ldr	r2, [pc, #72]	; (8007008 <prvInitialiseTaskLists+0x60>)
 8006fc0:	4413      	add	r3, r2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe fe33 	bl	8005c2e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	607b      	str	r3, [r7, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b06      	cmp	r3, #6
 8006fd2:	d9ef      	bls.n	8006fb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fd4:	480d      	ldr	r0, [pc, #52]	; (800700c <prvInitialiseTaskLists+0x64>)
 8006fd6:	f7fe fe2a 	bl	8005c2e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fda:	480d      	ldr	r0, [pc, #52]	; (8007010 <prvInitialiseTaskLists+0x68>)
 8006fdc:	f7fe fe27 	bl	8005c2e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fe0:	480c      	ldr	r0, [pc, #48]	; (8007014 <prvInitialiseTaskLists+0x6c>)
 8006fe2:	f7fe fe24 	bl	8005c2e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fe6:	480c      	ldr	r0, [pc, #48]	; (8007018 <prvInitialiseTaskLists+0x70>)
 8006fe8:	f7fe fe21 	bl	8005c2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fec:	480b      	ldr	r0, [pc, #44]	; (800701c <prvInitialiseTaskLists+0x74>)
 8006fee:	f7fe fe1e 	bl	8005c2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ff2:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <prvInitialiseTaskLists+0x78>)
 8006ff4:	4a05      	ldr	r2, [pc, #20]	; (800700c <prvInitialiseTaskLists+0x64>)
 8006ff6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <prvInitialiseTaskLists+0x7c>)
 8006ffa:	4a05      	ldr	r2, [pc, #20]	; (8007010 <prvInitialiseTaskLists+0x68>)
 8006ffc:	601a      	str	r2, [r3, #0]
}
 8006ffe:	bf00      	nop
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	200004dc 	.word	0x200004dc
 800700c:	20000568 	.word	0x20000568
 8007010:	2000057c 	.word	0x2000057c
 8007014:	20000598 	.word	0x20000598
 8007018:	200005ac 	.word	0x200005ac
 800701c:	200005c4 	.word	0x200005c4
 8007020:	20000590 	.word	0x20000590
 8007024:	20000594 	.word	0x20000594

08007028 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800702e:	e019      	b.n	8007064 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007030:	f000 fbc8 	bl	80077c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007034:	4b10      	ldr	r3, [pc, #64]	; (8007078 <prvCheckTasksWaitingTermination+0x50>)
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3304      	adds	r3, #4
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe fe7e 	bl	8005d42 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007046:	4b0d      	ldr	r3, [pc, #52]	; (800707c <prvCheckTasksWaitingTermination+0x54>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3b01      	subs	r3, #1
 800704c:	4a0b      	ldr	r2, [pc, #44]	; (800707c <prvCheckTasksWaitingTermination+0x54>)
 800704e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <prvCheckTasksWaitingTermination+0x58>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3b01      	subs	r3, #1
 8007056:	4a0a      	ldr	r2, [pc, #40]	; (8007080 <prvCheckTasksWaitingTermination+0x58>)
 8007058:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800705a:	f000 fbe3 	bl	8007824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f810 	bl	8007084 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007064:	4b06      	ldr	r3, [pc, #24]	; (8007080 <prvCheckTasksWaitingTermination+0x58>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e1      	bne.n	8007030 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	200005ac 	.word	0x200005ac
 800707c:	200005d8 	.word	0x200005d8
 8007080:	200005c0 	.word	0x200005c0

08007084 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007092:	2b00      	cmp	r3, #0
 8007094:	d108      	bne.n	80070a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	4618      	mov	r0, r3
 800709c:	f000 fd40 	bl	8007b20 <vPortFree>
				vPortFree( pxTCB );
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fd3d 	bl	8007b20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80070a6:	e018      	b.n	80070da <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d103      	bne.n	80070ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fd34 	bl	8007b20 <vPortFree>
	}
 80070b8:	e00f      	b.n	80070da <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d00a      	beq.n	80070da <prvDeleteTCB+0x56>
	__asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	60fb      	str	r3, [r7, #12]
}
 80070d6:	bf00      	nop
 80070d8:	e7fe      	b.n	80070d8 <prvDeleteTCB+0x54>
	}
 80070da:	bf00      	nop
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070ea:	4b0c      	ldr	r3, [pc, #48]	; (800711c <prvResetNextTaskUnblockTime+0x38>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d104      	bne.n	80070fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070f4:	4b0a      	ldr	r3, [pc, #40]	; (8007120 <prvResetNextTaskUnblockTime+0x3c>)
 80070f6:	f04f 32ff 	mov.w	r2, #4294967295
 80070fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070fc:	e008      	b.n	8007110 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070fe:	4b07      	ldr	r3, [pc, #28]	; (800711c <prvResetNextTaskUnblockTime+0x38>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	4a04      	ldr	r2, [pc, #16]	; (8007120 <prvResetNextTaskUnblockTime+0x3c>)
 800710e:	6013      	str	r3, [r2, #0]
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	20000590 	.word	0x20000590
 8007120:	200005f8 	.word	0x200005f8

08007124 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800712a:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <xTaskGetSchedulerState+0x34>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d102      	bne.n	8007138 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007132:	2301      	movs	r3, #1
 8007134:	607b      	str	r3, [r7, #4]
 8007136:	e008      	b.n	800714a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007138:	4b08      	ldr	r3, [pc, #32]	; (800715c <xTaskGetSchedulerState+0x38>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d102      	bne.n	8007146 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007140:	2302      	movs	r3, #2
 8007142:	607b      	str	r3, [r7, #4]
 8007144:	e001      	b.n	800714a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007146:	2300      	movs	r3, #0
 8007148:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800714a:	687b      	ldr	r3, [r7, #4]
	}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	200005e4 	.word	0x200005e4
 800715c:	20000600 	.word	0x20000600

08007160 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800716c:	2300      	movs	r3, #0
 800716e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d05e      	beq.n	8007234 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717a:	4b31      	ldr	r3, [pc, #196]	; (8007240 <xTaskPriorityInherit+0xe0>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	429a      	cmp	r2, r3
 8007182:	d24e      	bcs.n	8007222 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	2b00      	cmp	r3, #0
 800718a:	db06      	blt.n	800719a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800718c:	4b2c      	ldr	r3, [pc, #176]	; (8007240 <xTaskPriorityInherit+0xe0>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007192:	f1c3 0207 	rsb	r2, r3, #7
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	6959      	ldr	r1, [r3, #20]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a2:	4613      	mov	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4a26      	ldr	r2, [pc, #152]	; (8007244 <xTaskPriorityInherit+0xe4>)
 80071ac:	4413      	add	r3, r2
 80071ae:	4299      	cmp	r1, r3
 80071b0:	d12f      	bne.n	8007212 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	3304      	adds	r3, #4
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe fdc3 	bl	8005d42 <uxListRemove>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10a      	bne.n	80071d8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c6:	2201      	movs	r2, #1
 80071c8:	fa02 f303 	lsl.w	r3, r2, r3
 80071cc:	43da      	mvns	r2, r3
 80071ce:	4b1e      	ldr	r3, [pc, #120]	; (8007248 <xTaskPriorityInherit+0xe8>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4013      	ands	r3, r2
 80071d4:	4a1c      	ldr	r2, [pc, #112]	; (8007248 <xTaskPriorityInherit+0xe8>)
 80071d6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071d8:	4b19      	ldr	r3, [pc, #100]	; (8007240 <xTaskPriorityInherit+0xe0>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e6:	2201      	movs	r2, #1
 80071e8:	409a      	lsls	r2, r3
 80071ea:	4b17      	ldr	r3, [pc, #92]	; (8007248 <xTaskPriorityInherit+0xe8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	4a15      	ldr	r2, [pc, #84]	; (8007248 <xTaskPriorityInherit+0xe8>)
 80071f2:	6013      	str	r3, [r2, #0]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f8:	4613      	mov	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4a10      	ldr	r2, [pc, #64]	; (8007244 <xTaskPriorityInherit+0xe4>)
 8007202:	441a      	add	r2, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	3304      	adds	r3, #4
 8007208:	4619      	mov	r1, r3
 800720a:	4610      	mov	r0, r2
 800720c:	f7fe fd3c 	bl	8005c88 <vListInsertEnd>
 8007210:	e004      	b.n	800721c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007212:	4b0b      	ldr	r3, [pc, #44]	; (8007240 <xTaskPriorityInherit+0xe0>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800721c:	2301      	movs	r3, #1
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	e008      	b.n	8007234 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007226:	4b06      	ldr	r3, [pc, #24]	; (8007240 <xTaskPriorityInherit+0xe0>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	429a      	cmp	r2, r3
 800722e:	d201      	bcs.n	8007234 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007230:	2301      	movs	r3, #1
 8007232:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007234:	68fb      	ldr	r3, [r7, #12]
	}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	200004d8 	.word	0x200004d8
 8007244:	200004dc 	.word	0x200004dc
 8007248:	200005e0 	.word	0x200005e0

0800724c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007258:	2300      	movs	r3, #0
 800725a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d06e      	beq.n	8007340 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007262:	4b3a      	ldr	r3, [pc, #232]	; (800734c <xTaskPriorityDisinherit+0x100>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	429a      	cmp	r2, r3
 800726a:	d00a      	beq.n	8007282 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	60fb      	str	r3, [r7, #12]
}
 800727e:	bf00      	nop
 8007280:	e7fe      	b.n	8007280 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10a      	bne.n	80072a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	60bb      	str	r3, [r7, #8]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a4:	1e5a      	subs	r2, r3, #1
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d044      	beq.n	8007340 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d140      	bne.n	8007340 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	3304      	adds	r3, #4
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe fd3d 	bl	8005d42 <uxListRemove>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d115      	bne.n	80072fa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d2:	491f      	ldr	r1, [pc, #124]	; (8007350 <xTaskPriorityDisinherit+0x104>)
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	440b      	add	r3, r1
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10a      	bne.n	80072fa <xTaskPriorityDisinherit+0xae>
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	2201      	movs	r2, #1
 80072ea:	fa02 f303 	lsl.w	r3, r2, r3
 80072ee:	43da      	mvns	r2, r3
 80072f0:	4b18      	ldr	r3, [pc, #96]	; (8007354 <xTaskPriorityDisinherit+0x108>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4013      	ands	r3, r2
 80072f6:	4a17      	ldr	r2, [pc, #92]	; (8007354 <xTaskPriorityDisinherit+0x108>)
 80072f8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	f1c3 0207 	rsb	r2, r3, #7
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007312:	2201      	movs	r2, #1
 8007314:	409a      	lsls	r2, r3
 8007316:	4b0f      	ldr	r3, [pc, #60]	; (8007354 <xTaskPriorityDisinherit+0x108>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4313      	orrs	r3, r2
 800731c:	4a0d      	ldr	r2, [pc, #52]	; (8007354 <xTaskPriorityDisinherit+0x108>)
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4a08      	ldr	r2, [pc, #32]	; (8007350 <xTaskPriorityDisinherit+0x104>)
 800732e:	441a      	add	r2, r3
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	3304      	adds	r3, #4
 8007334:	4619      	mov	r1, r3
 8007336:	4610      	mov	r0, r2
 8007338:	f7fe fca6 	bl	8005c88 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800733c:	2301      	movs	r3, #1
 800733e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007340:	697b      	ldr	r3, [r7, #20]
	}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	200004d8 	.word	0x200004d8
 8007350:	200004dc 	.word	0x200004dc
 8007354:	200005e0 	.word	0x200005e0

08007358 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007366:	2301      	movs	r3, #1
 8007368:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d077      	beq.n	8007460 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10a      	bne.n	800738e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	60fb      	str	r3, [r7, #12]
}
 800738a:	bf00      	nop
 800738c:	e7fe      	b.n	800738c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d902      	bls.n	800739e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	61fb      	str	r3, [r7, #28]
 800739c:	e002      	b.n	80073a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	69fa      	ldr	r2, [r7, #28]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d058      	beq.n	8007460 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d153      	bne.n	8007460 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80073b8:	4b2b      	ldr	r3, [pc, #172]	; (8007468 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d10a      	bne.n	80073d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	60bb      	str	r3, [r7, #8]
}
 80073d4:	bf00      	nop
 80073d6:	e7fe      	b.n	80073d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	69fa      	ldr	r2, [r7, #28]
 80073e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	db04      	blt.n	80073f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	f1c3 0207 	rsb	r2, r3, #7
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	6959      	ldr	r1, [r3, #20]
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	4613      	mov	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4a19      	ldr	r2, [pc, #100]	; (800746c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007406:	4413      	add	r3, r2
 8007408:	4299      	cmp	r1, r3
 800740a:	d129      	bne.n	8007460 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	3304      	adds	r3, #4
 8007410:	4618      	mov	r0, r3
 8007412:	f7fe fc96 	bl	8005d42 <uxListRemove>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10a      	bne.n	8007432 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007420:	2201      	movs	r2, #1
 8007422:	fa02 f303 	lsl.w	r3, r2, r3
 8007426:	43da      	mvns	r2, r3
 8007428:	4b11      	ldr	r3, [pc, #68]	; (8007470 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4013      	ands	r3, r2
 800742e:	4a10      	ldr	r2, [pc, #64]	; (8007470 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007430:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007436:	2201      	movs	r2, #1
 8007438:	409a      	lsls	r2, r3
 800743a:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4313      	orrs	r3, r2
 8007440:	4a0b      	ldr	r2, [pc, #44]	; (8007470 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007442:	6013      	str	r3, [r2, #0]
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4a06      	ldr	r2, [pc, #24]	; (800746c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007452:	441a      	add	r2, r3
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	3304      	adds	r3, #4
 8007458:	4619      	mov	r1, r3
 800745a:	4610      	mov	r0, r2
 800745c:	f7fe fc14 	bl	8005c88 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007460:	bf00      	nop
 8007462:	3720      	adds	r7, #32
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	200004d8 	.word	0x200004d8
 800746c:	200004dc 	.word	0x200004dc
 8007470:	200005e0 	.word	0x200005e0

08007474 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007474:	b480      	push	{r7}
 8007476:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007478:	4b07      	ldr	r3, [pc, #28]	; (8007498 <pvTaskIncrementMutexHeldCount+0x24>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d004      	beq.n	800748a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007480:	4b05      	ldr	r3, [pc, #20]	; (8007498 <pvTaskIncrementMutexHeldCount+0x24>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007486:	3201      	adds	r2, #1
 8007488:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800748a:	4b03      	ldr	r3, [pc, #12]	; (8007498 <pvTaskIncrementMutexHeldCount+0x24>)
 800748c:	681b      	ldr	r3, [r3, #0]
	}
 800748e:	4618      	mov	r0, r3
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	200004d8 	.word	0x200004d8

0800749c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80074a6:	4b29      	ldr	r3, [pc, #164]	; (800754c <prvAddCurrentTaskToDelayedList+0xb0>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074ac:	4b28      	ldr	r3, [pc, #160]	; (8007550 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3304      	adds	r3, #4
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe fc45 	bl	8005d42 <uxListRemove>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10b      	bne.n	80074d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80074be:	4b24      	ldr	r3, [pc, #144]	; (8007550 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	2201      	movs	r2, #1
 80074c6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ca:	43da      	mvns	r2, r3
 80074cc:	4b21      	ldr	r3, [pc, #132]	; (8007554 <prvAddCurrentTaskToDelayedList+0xb8>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4013      	ands	r3, r2
 80074d2:	4a20      	ldr	r2, [pc, #128]	; (8007554 <prvAddCurrentTaskToDelayedList+0xb8>)
 80074d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074dc:	d10a      	bne.n	80074f4 <prvAddCurrentTaskToDelayedList+0x58>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d007      	beq.n	80074f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074e4:	4b1a      	ldr	r3, [pc, #104]	; (8007550 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	3304      	adds	r3, #4
 80074ea:	4619      	mov	r1, r3
 80074ec:	481a      	ldr	r0, [pc, #104]	; (8007558 <prvAddCurrentTaskToDelayedList+0xbc>)
 80074ee:	f7fe fbcb 	bl	8005c88 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074f2:	e026      	b.n	8007542 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4413      	add	r3, r2
 80074fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074fc:	4b14      	ldr	r3, [pc, #80]	; (8007550 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	429a      	cmp	r2, r3
 800750a:	d209      	bcs.n	8007520 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800750c:	4b13      	ldr	r3, [pc, #76]	; (800755c <prvAddCurrentTaskToDelayedList+0xc0>)
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	4b0f      	ldr	r3, [pc, #60]	; (8007550 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3304      	adds	r3, #4
 8007516:	4619      	mov	r1, r3
 8007518:	4610      	mov	r0, r2
 800751a:	f7fe fbd9 	bl	8005cd0 <vListInsert>
}
 800751e:	e010      	b.n	8007542 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007520:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	4b0a      	ldr	r3, [pc, #40]	; (8007550 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3304      	adds	r3, #4
 800752a:	4619      	mov	r1, r3
 800752c:	4610      	mov	r0, r2
 800752e:	f7fe fbcf 	bl	8005cd0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007532:	4b0c      	ldr	r3, [pc, #48]	; (8007564 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	429a      	cmp	r2, r3
 800753a:	d202      	bcs.n	8007542 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800753c:	4a09      	ldr	r2, [pc, #36]	; (8007564 <prvAddCurrentTaskToDelayedList+0xc8>)
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	6013      	str	r3, [r2, #0]
}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	200005dc 	.word	0x200005dc
 8007550:	200004d8 	.word	0x200004d8
 8007554:	200005e0 	.word	0x200005e0
 8007558:	200005c4 	.word	0x200005c4
 800755c:	20000594 	.word	0x20000594
 8007560:	20000590 	.word	0x20000590
 8007564:	200005f8 	.word	0x200005f8

08007568 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	3b04      	subs	r3, #4
 8007578:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	3b04      	subs	r3, #4
 8007586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f023 0201 	bic.w	r2, r3, #1
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	3b04      	subs	r3, #4
 8007596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007598:	4a0c      	ldr	r2, [pc, #48]	; (80075cc <pxPortInitialiseStack+0x64>)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3b14      	subs	r3, #20
 80075a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3b04      	subs	r3, #4
 80075ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f06f 0202 	mvn.w	r2, #2
 80075b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	3b20      	subs	r3, #32
 80075bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075be:	68fb      	ldr	r3, [r7, #12]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	080075d1 	.word	0x080075d1

080075d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80075da:	4b12      	ldr	r3, [pc, #72]	; (8007624 <prvTaskExitError+0x54>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e2:	d00a      	beq.n	80075fa <prvTaskExitError+0x2a>
	__asm volatile
 80075e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	60fb      	str	r3, [r7, #12]
}
 80075f6:	bf00      	nop
 80075f8:	e7fe      	b.n	80075f8 <prvTaskExitError+0x28>
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	60bb      	str	r3, [r7, #8]
}
 800760c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800760e:	bf00      	nop
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0fc      	beq.n	8007610 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007616:	bf00      	nop
 8007618:	bf00      	nop
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	2000001c 	.word	0x2000001c
	...

08007630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007630:	4b07      	ldr	r3, [pc, #28]	; (8007650 <pxCurrentTCBConst2>)
 8007632:	6819      	ldr	r1, [r3, #0]
 8007634:	6808      	ldr	r0, [r1, #0]
 8007636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763a:	f380 8809 	msr	PSP, r0
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f04f 0000 	mov.w	r0, #0
 8007646:	f380 8811 	msr	BASEPRI, r0
 800764a:	4770      	bx	lr
 800764c:	f3af 8000 	nop.w

08007650 <pxCurrentTCBConst2>:
 8007650:	200004d8 	.word	0x200004d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop

08007658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007658:	4808      	ldr	r0, [pc, #32]	; (800767c <prvPortStartFirstTask+0x24>)
 800765a:	6800      	ldr	r0, [r0, #0]
 800765c:	6800      	ldr	r0, [r0, #0]
 800765e:	f380 8808 	msr	MSP, r0
 8007662:	f04f 0000 	mov.w	r0, #0
 8007666:	f380 8814 	msr	CONTROL, r0
 800766a:	b662      	cpsie	i
 800766c:	b661      	cpsie	f
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	df00      	svc	0
 8007678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800767a:	bf00      	nop
 800767c:	e000ed08 	.word	0xe000ed08

08007680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007686:	4b46      	ldr	r3, [pc, #280]	; (80077a0 <xPortStartScheduler+0x120>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a46      	ldr	r2, [pc, #280]	; (80077a4 <xPortStartScheduler+0x124>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d10a      	bne.n	80076a6 <xPortStartScheduler+0x26>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	613b      	str	r3, [r7, #16]
}
 80076a2:	bf00      	nop
 80076a4:	e7fe      	b.n	80076a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076a6:	4b3e      	ldr	r3, [pc, #248]	; (80077a0 <xPortStartScheduler+0x120>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a3f      	ldr	r2, [pc, #252]	; (80077a8 <xPortStartScheduler+0x128>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d10a      	bne.n	80076c6 <xPortStartScheduler+0x46>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	60fb      	str	r3, [r7, #12]
}
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076c6:	4b39      	ldr	r3, [pc, #228]	; (80077ac <xPortStartScheduler+0x12c>)
 80076c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	22ff      	movs	r2, #255	; 0xff
 80076d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076e0:	78fb      	ldrb	r3, [r7, #3]
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	4b31      	ldr	r3, [pc, #196]	; (80077b0 <xPortStartScheduler+0x130>)
 80076ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076ee:	4b31      	ldr	r3, [pc, #196]	; (80077b4 <xPortStartScheduler+0x134>)
 80076f0:	2207      	movs	r2, #7
 80076f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076f4:	e009      	b.n	800770a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80076f6:	4b2f      	ldr	r3, [pc, #188]	; (80077b4 <xPortStartScheduler+0x134>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	4a2d      	ldr	r2, [pc, #180]	; (80077b4 <xPortStartScheduler+0x134>)
 80076fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	b2db      	uxtb	r3, r3
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	b2db      	uxtb	r3, r3
 8007708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800770a:	78fb      	ldrb	r3, [r7, #3]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007712:	2b80      	cmp	r3, #128	; 0x80
 8007714:	d0ef      	beq.n	80076f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007716:	4b27      	ldr	r3, [pc, #156]	; (80077b4 <xPortStartScheduler+0x134>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f1c3 0307 	rsb	r3, r3, #7
 800771e:	2b04      	cmp	r3, #4
 8007720:	d00a      	beq.n	8007738 <xPortStartScheduler+0xb8>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	60bb      	str	r3, [r7, #8]
}
 8007734:	bf00      	nop
 8007736:	e7fe      	b.n	8007736 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007738:	4b1e      	ldr	r3, [pc, #120]	; (80077b4 <xPortStartScheduler+0x134>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	021b      	lsls	r3, r3, #8
 800773e:	4a1d      	ldr	r2, [pc, #116]	; (80077b4 <xPortStartScheduler+0x134>)
 8007740:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007742:	4b1c      	ldr	r3, [pc, #112]	; (80077b4 <xPortStartScheduler+0x134>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800774a:	4a1a      	ldr	r2, [pc, #104]	; (80077b4 <xPortStartScheduler+0x134>)
 800774c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	b2da      	uxtb	r2, r3
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007756:	4b18      	ldr	r3, [pc, #96]	; (80077b8 <xPortStartScheduler+0x138>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a17      	ldr	r2, [pc, #92]	; (80077b8 <xPortStartScheduler+0x138>)
 800775c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007760:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007762:	4b15      	ldr	r3, [pc, #84]	; (80077b8 <xPortStartScheduler+0x138>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a14      	ldr	r2, [pc, #80]	; (80077b8 <xPortStartScheduler+0x138>)
 8007768:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800776c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800776e:	f000 f8dd 	bl	800792c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007772:	4b12      	ldr	r3, [pc, #72]	; (80077bc <xPortStartScheduler+0x13c>)
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007778:	f000 f8fc 	bl	8007974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800777c:	4b10      	ldr	r3, [pc, #64]	; (80077c0 <xPortStartScheduler+0x140>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a0f      	ldr	r2, [pc, #60]	; (80077c0 <xPortStartScheduler+0x140>)
 8007782:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007786:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007788:	f7ff ff66 	bl	8007658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800778c:	f7ff fa8e 	bl	8006cac <vTaskSwitchContext>
	prvTaskExitError();
 8007790:	f7ff ff1e 	bl	80075d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	e000ed00 	.word	0xe000ed00
 80077a4:	410fc271 	.word	0x410fc271
 80077a8:	410fc270 	.word	0x410fc270
 80077ac:	e000e400 	.word	0xe000e400
 80077b0:	20000604 	.word	0x20000604
 80077b4:	20000608 	.word	0x20000608
 80077b8:	e000ed20 	.word	0xe000ed20
 80077bc:	2000001c 	.word	0x2000001c
 80077c0:	e000ef34 	.word	0xe000ef34

080077c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
	__asm volatile
 80077ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	607b      	str	r3, [r7, #4]
}
 80077dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077de:	4b0f      	ldr	r3, [pc, #60]	; (800781c <vPortEnterCritical+0x58>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3301      	adds	r3, #1
 80077e4:	4a0d      	ldr	r2, [pc, #52]	; (800781c <vPortEnterCritical+0x58>)
 80077e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80077e8:	4b0c      	ldr	r3, [pc, #48]	; (800781c <vPortEnterCritical+0x58>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d10f      	bne.n	8007810 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077f0:	4b0b      	ldr	r3, [pc, #44]	; (8007820 <vPortEnterCritical+0x5c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <vPortEnterCritical+0x4c>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	603b      	str	r3, [r7, #0]
}
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <vPortEnterCritical+0x4a>
	}
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	2000001c 	.word	0x2000001c
 8007820:	e000ed04 	.word	0xe000ed04

08007824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800782a:	4b12      	ldr	r3, [pc, #72]	; (8007874 <vPortExitCritical+0x50>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10a      	bne.n	8007848 <vPortExitCritical+0x24>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	607b      	str	r3, [r7, #4]
}
 8007844:	bf00      	nop
 8007846:	e7fe      	b.n	8007846 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007848:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <vPortExitCritical+0x50>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3b01      	subs	r3, #1
 800784e:	4a09      	ldr	r2, [pc, #36]	; (8007874 <vPortExitCritical+0x50>)
 8007850:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007852:	4b08      	ldr	r3, [pc, #32]	; (8007874 <vPortExitCritical+0x50>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d105      	bne.n	8007866 <vPortExitCritical+0x42>
 800785a:	2300      	movs	r3, #0
 800785c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007864:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	2000001c 	.word	0x2000001c
	...

08007880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007880:	f3ef 8009 	mrs	r0, PSP
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	4b15      	ldr	r3, [pc, #84]	; (80078e0 <pxCurrentTCBConst>)
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	f01e 0f10 	tst.w	lr, #16
 8007890:	bf08      	it	eq
 8007892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789a:	6010      	str	r0, [r2, #0]
 800789c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078a4:	f380 8811 	msr	BASEPRI, r0
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	f3bf 8f6f 	isb	sy
 80078b0:	f7ff f9fc 	bl	8006cac <vTaskSwitchContext>
 80078b4:	f04f 0000 	mov.w	r0, #0
 80078b8:	f380 8811 	msr	BASEPRI, r0
 80078bc:	bc09      	pop	{r0, r3}
 80078be:	6819      	ldr	r1, [r3, #0]
 80078c0:	6808      	ldr	r0, [r1, #0]
 80078c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c6:	f01e 0f10 	tst.w	lr, #16
 80078ca:	bf08      	it	eq
 80078cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80078d0:	f380 8809 	msr	PSP, r0
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	f3af 8000 	nop.w

080078e0 <pxCurrentTCBConst>:
 80078e0:	200004d8 	.word	0x200004d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop

080078e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	607b      	str	r3, [r7, #4]
}
 8007900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007902:	f7ff f91b 	bl	8006b3c <xTaskIncrementTick>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d003      	beq.n	8007914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800790c:	4b06      	ldr	r3, [pc, #24]	; (8007928 <xPortSysTickHandler+0x40>)
 800790e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	2300      	movs	r3, #0
 8007916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	f383 8811 	msr	BASEPRI, r3
}
 800791e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007920:	bf00      	nop
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	e000ed04 	.word	0xe000ed04

0800792c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007930:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <vPortSetupTimerInterrupt+0x34>)
 8007932:	2200      	movs	r2, #0
 8007934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007936:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <vPortSetupTimerInterrupt+0x38>)
 8007938:	2200      	movs	r2, #0
 800793a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800793c:	4b0a      	ldr	r3, [pc, #40]	; (8007968 <vPortSetupTimerInterrupt+0x3c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a0a      	ldr	r2, [pc, #40]	; (800796c <vPortSetupTimerInterrupt+0x40>)
 8007942:	fba2 2303 	umull	r2, r3, r2, r3
 8007946:	099b      	lsrs	r3, r3, #6
 8007948:	4a09      	ldr	r2, [pc, #36]	; (8007970 <vPortSetupTimerInterrupt+0x44>)
 800794a:	3b01      	subs	r3, #1
 800794c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800794e:	4b04      	ldr	r3, [pc, #16]	; (8007960 <vPortSetupTimerInterrupt+0x34>)
 8007950:	2207      	movs	r2, #7
 8007952:	601a      	str	r2, [r3, #0]
}
 8007954:	bf00      	nop
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	e000e010 	.word	0xe000e010
 8007964:	e000e018 	.word	0xe000e018
 8007968:	20000010 	.word	0x20000010
 800796c:	10624dd3 	.word	0x10624dd3
 8007970:	e000e014 	.word	0xe000e014

08007974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007984 <vPortEnableVFP+0x10>
 8007978:	6801      	ldr	r1, [r0, #0]
 800797a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800797e:	6001      	str	r1, [r0, #0]
 8007980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007982:	bf00      	nop
 8007984:	e000ed88 	.word	0xe000ed88

08007988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08a      	sub	sp, #40	; 0x28
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007990:	2300      	movs	r3, #0
 8007992:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007994:	f7ff f828 	bl	80069e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007998:	4b5b      	ldr	r3, [pc, #364]	; (8007b08 <pvPortMalloc+0x180>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079a0:	f000 f920 	bl	8007be4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079a4:	4b59      	ldr	r3, [pc, #356]	; (8007b0c <pvPortMalloc+0x184>)
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4013      	ands	r3, r2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f040 8093 	bne.w	8007ad8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d01d      	beq.n	80079f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80079b8:	2208      	movs	r2, #8
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4413      	add	r3, r2
 80079be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d014      	beq.n	80079f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f023 0307 	bic.w	r3, r3, #7
 80079d0:	3308      	adds	r3, #8
 80079d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f003 0307 	and.w	r3, r3, #7
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <pvPortMalloc+0x6c>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	617b      	str	r3, [r7, #20]
}
 80079f0:	bf00      	nop
 80079f2:	e7fe      	b.n	80079f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d06e      	beq.n	8007ad8 <pvPortMalloc+0x150>
 80079fa:	4b45      	ldr	r3, [pc, #276]	; (8007b10 <pvPortMalloc+0x188>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d869      	bhi.n	8007ad8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a04:	4b43      	ldr	r3, [pc, #268]	; (8007b14 <pvPortMalloc+0x18c>)
 8007a06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a08:	4b42      	ldr	r3, [pc, #264]	; (8007b14 <pvPortMalloc+0x18c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a0e:	e004      	b.n	8007a1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d903      	bls.n	8007a2c <pvPortMalloc+0xa4>
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1f1      	bne.n	8007a10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a2c:	4b36      	ldr	r3, [pc, #216]	; (8007b08 <pvPortMalloc+0x180>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d050      	beq.n	8007ad8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2208      	movs	r2, #8
 8007a3c:	4413      	add	r3, r2
 8007a3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	1ad2      	subs	r2, r2, r3
 8007a50:	2308      	movs	r3, #8
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d91f      	bls.n	8007a98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <pvPortMalloc+0xf8>
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	613b      	str	r3, [r7, #16]
}
 8007a7c:	bf00      	nop
 8007a7e:	e7fe      	b.n	8007a7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	1ad2      	subs	r2, r2, r3
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a92:	69b8      	ldr	r0, [r7, #24]
 8007a94:	f000 f908 	bl	8007ca8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a98:	4b1d      	ldr	r3, [pc, #116]	; (8007b10 <pvPortMalloc+0x188>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	4a1b      	ldr	r2, [pc, #108]	; (8007b10 <pvPortMalloc+0x188>)
 8007aa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007aa6:	4b1a      	ldr	r3, [pc, #104]	; (8007b10 <pvPortMalloc+0x188>)
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	4b1b      	ldr	r3, [pc, #108]	; (8007b18 <pvPortMalloc+0x190>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d203      	bcs.n	8007aba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ab2:	4b17      	ldr	r3, [pc, #92]	; (8007b10 <pvPortMalloc+0x188>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a18      	ldr	r2, [pc, #96]	; (8007b18 <pvPortMalloc+0x190>)
 8007ab8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	4b13      	ldr	r3, [pc, #76]	; (8007b0c <pvPortMalloc+0x184>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <pvPortMalloc+0x194>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	4a11      	ldr	r2, [pc, #68]	; (8007b1c <pvPortMalloc+0x194>)
 8007ad6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ad8:	f7fe ff94 	bl	8006a04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	f003 0307 	and.w	r3, r3, #7
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00a      	beq.n	8007afc <pvPortMalloc+0x174>
	__asm volatile
 8007ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	60fb      	str	r3, [r7, #12]
}
 8007af8:	bf00      	nop
 8007afa:	e7fe      	b.n	8007afa <pvPortMalloc+0x172>
	return pvReturn;
 8007afc:	69fb      	ldr	r3, [r7, #28]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3728      	adds	r7, #40	; 0x28
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20004214 	.word	0x20004214
 8007b0c:	20004228 	.word	0x20004228
 8007b10:	20004218 	.word	0x20004218
 8007b14:	2000420c 	.word	0x2000420c
 8007b18:	2000421c 	.word	0x2000421c
 8007b1c:	20004220 	.word	0x20004220

08007b20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d04d      	beq.n	8007bce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b32:	2308      	movs	r3, #8
 8007b34:	425b      	negs	r3, r3
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4413      	add	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	4b24      	ldr	r3, [pc, #144]	; (8007bd8 <vPortFree+0xb8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4013      	ands	r3, r2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10a      	bne.n	8007b64 <vPortFree+0x44>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	60fb      	str	r3, [r7, #12]
}
 8007b60:	bf00      	nop
 8007b62:	e7fe      	b.n	8007b62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00a      	beq.n	8007b82 <vPortFree+0x62>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	60bb      	str	r3, [r7, #8]
}
 8007b7e:	bf00      	nop
 8007b80:	e7fe      	b.n	8007b80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	4b14      	ldr	r3, [pc, #80]	; (8007bd8 <vPortFree+0xb8>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d01e      	beq.n	8007bce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d11a      	bne.n	8007bce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	4b0e      	ldr	r3, [pc, #56]	; (8007bd8 <vPortFree+0xb8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	43db      	mvns	r3, r3
 8007ba2:	401a      	ands	r2, r3
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ba8:	f7fe ff1e 	bl	80069e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	4b0a      	ldr	r3, [pc, #40]	; (8007bdc <vPortFree+0xbc>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	4a09      	ldr	r2, [pc, #36]	; (8007bdc <vPortFree+0xbc>)
 8007bb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bba:	6938      	ldr	r0, [r7, #16]
 8007bbc:	f000 f874 	bl	8007ca8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007bc0:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <vPortFree+0xc0>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	4a06      	ldr	r2, [pc, #24]	; (8007be0 <vPortFree+0xc0>)
 8007bc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007bca:	f7fe ff1b 	bl	8006a04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007bce:	bf00      	nop
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20004228 	.word	0x20004228
 8007bdc:	20004218 	.word	0x20004218
 8007be0:	20004224 	.word	0x20004224

08007be4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007bea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007bee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007bf0:	4b27      	ldr	r3, [pc, #156]	; (8007c90 <prvHeapInit+0xac>)
 8007bf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f003 0307 	and.w	r3, r3, #7
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00c      	beq.n	8007c18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3307      	adds	r3, #7
 8007c02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 0307 	bic.w	r3, r3, #7
 8007c0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	4a1f      	ldr	r2, [pc, #124]	; (8007c90 <prvHeapInit+0xac>)
 8007c14:	4413      	add	r3, r2
 8007c16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c1c:	4a1d      	ldr	r2, [pc, #116]	; (8007c94 <prvHeapInit+0xb0>)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c22:	4b1c      	ldr	r3, [pc, #112]	; (8007c94 <prvHeapInit+0xb0>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c30:	2208      	movs	r2, #8
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	1a9b      	subs	r3, r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0307 	bic.w	r3, r3, #7
 8007c3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4a15      	ldr	r2, [pc, #84]	; (8007c98 <prvHeapInit+0xb4>)
 8007c44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c46:	4b14      	ldr	r3, [pc, #80]	; (8007c98 <prvHeapInit+0xb4>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c4e:	4b12      	ldr	r3, [pc, #72]	; (8007c98 <prvHeapInit+0xb4>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2200      	movs	r2, #0
 8007c54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	1ad2      	subs	r2, r2, r3
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c64:	4b0c      	ldr	r3, [pc, #48]	; (8007c98 <prvHeapInit+0xb4>)
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	4a0a      	ldr	r2, [pc, #40]	; (8007c9c <prvHeapInit+0xb8>)
 8007c72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	4a09      	ldr	r2, [pc, #36]	; (8007ca0 <prvHeapInit+0xbc>)
 8007c7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c7c:	4b09      	ldr	r3, [pc, #36]	; (8007ca4 <prvHeapInit+0xc0>)
 8007c7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c82:	601a      	str	r2, [r3, #0]
}
 8007c84:	bf00      	nop
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	2000060c 	.word	0x2000060c
 8007c94:	2000420c 	.word	0x2000420c
 8007c98:	20004214 	.word	0x20004214
 8007c9c:	2000421c 	.word	0x2000421c
 8007ca0:	20004218 	.word	0x20004218
 8007ca4:	20004228 	.word	0x20004228

08007ca8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007cb0:	4b28      	ldr	r3, [pc, #160]	; (8007d54 <prvInsertBlockIntoFreeList+0xac>)
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	e002      	b.n	8007cbc <prvInsertBlockIntoFreeList+0x14>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d8f7      	bhi.n	8007cb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d108      	bne.n	8007cea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	441a      	add	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	441a      	add	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d118      	bne.n	8007d30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	4b15      	ldr	r3, [pc, #84]	; (8007d58 <prvInsertBlockIntoFreeList+0xb0>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d00d      	beq.n	8007d26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	441a      	add	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	e008      	b.n	8007d38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d26:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <prvInsertBlockIntoFreeList+0xb0>)
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	e003      	b.n	8007d38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d002      	beq.n	8007d46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d46:	bf00      	nop
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	2000420c 	.word	0x2000420c
 8007d58:	20004214 	.word	0x20004214

08007d5c <__errno>:
 8007d5c:	4b01      	ldr	r3, [pc, #4]	; (8007d64 <__errno+0x8>)
 8007d5e:	6818      	ldr	r0, [r3, #0]
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	20000020 	.word	0x20000020

08007d68 <__sflush_r>:
 8007d68:	898a      	ldrh	r2, [r1, #12]
 8007d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6e:	4605      	mov	r5, r0
 8007d70:	0710      	lsls	r0, r2, #28
 8007d72:	460c      	mov	r4, r1
 8007d74:	d458      	bmi.n	8007e28 <__sflush_r+0xc0>
 8007d76:	684b      	ldr	r3, [r1, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	dc05      	bgt.n	8007d88 <__sflush_r+0x20>
 8007d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	dc02      	bgt.n	8007d88 <__sflush_r+0x20>
 8007d82:	2000      	movs	r0, #0
 8007d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d8a:	2e00      	cmp	r6, #0
 8007d8c:	d0f9      	beq.n	8007d82 <__sflush_r+0x1a>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d94:	682f      	ldr	r7, [r5, #0]
 8007d96:	602b      	str	r3, [r5, #0]
 8007d98:	d032      	beq.n	8007e00 <__sflush_r+0x98>
 8007d9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	075a      	lsls	r2, r3, #29
 8007da0:	d505      	bpl.n	8007dae <__sflush_r+0x46>
 8007da2:	6863      	ldr	r3, [r4, #4]
 8007da4:	1ac0      	subs	r0, r0, r3
 8007da6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007da8:	b10b      	cbz	r3, 8007dae <__sflush_r+0x46>
 8007daa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dac:	1ac0      	subs	r0, r0, r3
 8007dae:	2300      	movs	r3, #0
 8007db0:	4602      	mov	r2, r0
 8007db2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007db4:	6a21      	ldr	r1, [r4, #32]
 8007db6:	4628      	mov	r0, r5
 8007db8:	47b0      	blx	r6
 8007dba:	1c43      	adds	r3, r0, #1
 8007dbc:	89a3      	ldrh	r3, [r4, #12]
 8007dbe:	d106      	bne.n	8007dce <__sflush_r+0x66>
 8007dc0:	6829      	ldr	r1, [r5, #0]
 8007dc2:	291d      	cmp	r1, #29
 8007dc4:	d82c      	bhi.n	8007e20 <__sflush_r+0xb8>
 8007dc6:	4a2a      	ldr	r2, [pc, #168]	; (8007e70 <__sflush_r+0x108>)
 8007dc8:	40ca      	lsrs	r2, r1
 8007dca:	07d6      	lsls	r6, r2, #31
 8007dcc:	d528      	bpl.n	8007e20 <__sflush_r+0xb8>
 8007dce:	2200      	movs	r2, #0
 8007dd0:	6062      	str	r2, [r4, #4]
 8007dd2:	04d9      	lsls	r1, r3, #19
 8007dd4:	6922      	ldr	r2, [r4, #16]
 8007dd6:	6022      	str	r2, [r4, #0]
 8007dd8:	d504      	bpl.n	8007de4 <__sflush_r+0x7c>
 8007dda:	1c42      	adds	r2, r0, #1
 8007ddc:	d101      	bne.n	8007de2 <__sflush_r+0x7a>
 8007dde:	682b      	ldr	r3, [r5, #0]
 8007de0:	b903      	cbnz	r3, 8007de4 <__sflush_r+0x7c>
 8007de2:	6560      	str	r0, [r4, #84]	; 0x54
 8007de4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007de6:	602f      	str	r7, [r5, #0]
 8007de8:	2900      	cmp	r1, #0
 8007dea:	d0ca      	beq.n	8007d82 <__sflush_r+0x1a>
 8007dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007df0:	4299      	cmp	r1, r3
 8007df2:	d002      	beq.n	8007dfa <__sflush_r+0x92>
 8007df4:	4628      	mov	r0, r5
 8007df6:	f000 fc4f 	bl	8008698 <_free_r>
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	6360      	str	r0, [r4, #52]	; 0x34
 8007dfe:	e7c1      	b.n	8007d84 <__sflush_r+0x1c>
 8007e00:	6a21      	ldr	r1, [r4, #32]
 8007e02:	2301      	movs	r3, #1
 8007e04:	4628      	mov	r0, r5
 8007e06:	47b0      	blx	r6
 8007e08:	1c41      	adds	r1, r0, #1
 8007e0a:	d1c7      	bne.n	8007d9c <__sflush_r+0x34>
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0c4      	beq.n	8007d9c <__sflush_r+0x34>
 8007e12:	2b1d      	cmp	r3, #29
 8007e14:	d001      	beq.n	8007e1a <__sflush_r+0xb2>
 8007e16:	2b16      	cmp	r3, #22
 8007e18:	d101      	bne.n	8007e1e <__sflush_r+0xb6>
 8007e1a:	602f      	str	r7, [r5, #0]
 8007e1c:	e7b1      	b.n	8007d82 <__sflush_r+0x1a>
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e24:	81a3      	strh	r3, [r4, #12]
 8007e26:	e7ad      	b.n	8007d84 <__sflush_r+0x1c>
 8007e28:	690f      	ldr	r7, [r1, #16]
 8007e2a:	2f00      	cmp	r7, #0
 8007e2c:	d0a9      	beq.n	8007d82 <__sflush_r+0x1a>
 8007e2e:	0793      	lsls	r3, r2, #30
 8007e30:	680e      	ldr	r6, [r1, #0]
 8007e32:	bf08      	it	eq
 8007e34:	694b      	ldreq	r3, [r1, #20]
 8007e36:	600f      	str	r7, [r1, #0]
 8007e38:	bf18      	it	ne
 8007e3a:	2300      	movne	r3, #0
 8007e3c:	eba6 0807 	sub.w	r8, r6, r7
 8007e40:	608b      	str	r3, [r1, #8]
 8007e42:	f1b8 0f00 	cmp.w	r8, #0
 8007e46:	dd9c      	ble.n	8007d82 <__sflush_r+0x1a>
 8007e48:	6a21      	ldr	r1, [r4, #32]
 8007e4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e4c:	4643      	mov	r3, r8
 8007e4e:	463a      	mov	r2, r7
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b0      	blx	r6
 8007e54:	2800      	cmp	r0, #0
 8007e56:	dc06      	bgt.n	8007e66 <__sflush_r+0xfe>
 8007e58:	89a3      	ldrh	r3, [r4, #12]
 8007e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e5e:	81a3      	strh	r3, [r4, #12]
 8007e60:	f04f 30ff 	mov.w	r0, #4294967295
 8007e64:	e78e      	b.n	8007d84 <__sflush_r+0x1c>
 8007e66:	4407      	add	r7, r0
 8007e68:	eba8 0800 	sub.w	r8, r8, r0
 8007e6c:	e7e9      	b.n	8007e42 <__sflush_r+0xda>
 8007e6e:	bf00      	nop
 8007e70:	20400001 	.word	0x20400001

08007e74 <_fflush_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	690b      	ldr	r3, [r1, #16]
 8007e78:	4605      	mov	r5, r0
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	b913      	cbnz	r3, 8007e84 <_fflush_r+0x10>
 8007e7e:	2500      	movs	r5, #0
 8007e80:	4628      	mov	r0, r5
 8007e82:	bd38      	pop	{r3, r4, r5, pc}
 8007e84:	b118      	cbz	r0, 8007e8e <_fflush_r+0x1a>
 8007e86:	6983      	ldr	r3, [r0, #24]
 8007e88:	b90b      	cbnz	r3, 8007e8e <_fflush_r+0x1a>
 8007e8a:	f000 f899 	bl	8007fc0 <__sinit>
 8007e8e:	4b14      	ldr	r3, [pc, #80]	; (8007ee0 <_fflush_r+0x6c>)
 8007e90:	429c      	cmp	r4, r3
 8007e92:	d11b      	bne.n	8007ecc <_fflush_r+0x58>
 8007e94:	686c      	ldr	r4, [r5, #4]
 8007e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0ef      	beq.n	8007e7e <_fflush_r+0xa>
 8007e9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ea0:	07d0      	lsls	r0, r2, #31
 8007ea2:	d404      	bmi.n	8007eae <_fflush_r+0x3a>
 8007ea4:	0599      	lsls	r1, r3, #22
 8007ea6:	d402      	bmi.n	8007eae <_fflush_r+0x3a>
 8007ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eaa:	f000 f94d 	bl	8008148 <__retarget_lock_acquire_recursive>
 8007eae:	4628      	mov	r0, r5
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	f7ff ff59 	bl	8007d68 <__sflush_r>
 8007eb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007eb8:	07da      	lsls	r2, r3, #31
 8007eba:	4605      	mov	r5, r0
 8007ebc:	d4e0      	bmi.n	8007e80 <_fflush_r+0xc>
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	059b      	lsls	r3, r3, #22
 8007ec2:	d4dd      	bmi.n	8007e80 <_fflush_r+0xc>
 8007ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ec6:	f000 f941 	bl	800814c <__retarget_lock_release_recursive>
 8007eca:	e7d9      	b.n	8007e80 <_fflush_r+0xc>
 8007ecc:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <_fflush_r+0x70>)
 8007ece:	429c      	cmp	r4, r3
 8007ed0:	d101      	bne.n	8007ed6 <_fflush_r+0x62>
 8007ed2:	68ac      	ldr	r4, [r5, #8]
 8007ed4:	e7df      	b.n	8007e96 <_fflush_r+0x22>
 8007ed6:	4b04      	ldr	r3, [pc, #16]	; (8007ee8 <_fflush_r+0x74>)
 8007ed8:	429c      	cmp	r4, r3
 8007eda:	bf08      	it	eq
 8007edc:	68ec      	ldreq	r4, [r5, #12]
 8007ede:	e7da      	b.n	8007e96 <_fflush_r+0x22>
 8007ee0:	0800de84 	.word	0x0800de84
 8007ee4:	0800dea4 	.word	0x0800dea4
 8007ee8:	0800de64 	.word	0x0800de64

08007eec <fflush>:
 8007eec:	4601      	mov	r1, r0
 8007eee:	b920      	cbnz	r0, 8007efa <fflush+0xe>
 8007ef0:	4b04      	ldr	r3, [pc, #16]	; (8007f04 <fflush+0x18>)
 8007ef2:	4905      	ldr	r1, [pc, #20]	; (8007f08 <fflush+0x1c>)
 8007ef4:	6818      	ldr	r0, [r3, #0]
 8007ef6:	f000 b8e1 	b.w	80080bc <_fwalk_reent>
 8007efa:	4b04      	ldr	r3, [pc, #16]	; (8007f0c <fflush+0x20>)
 8007efc:	6818      	ldr	r0, [r3, #0]
 8007efe:	f7ff bfb9 	b.w	8007e74 <_fflush_r>
 8007f02:	bf00      	nop
 8007f04:	0800dec4 	.word	0x0800dec4
 8007f08:	08007e75 	.word	0x08007e75
 8007f0c:	20000020 	.word	0x20000020

08007f10 <std>:
 8007f10:	2300      	movs	r3, #0
 8007f12:	b510      	push	{r4, lr}
 8007f14:	4604      	mov	r4, r0
 8007f16:	e9c0 3300 	strd	r3, r3, [r0]
 8007f1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f1e:	6083      	str	r3, [r0, #8]
 8007f20:	8181      	strh	r1, [r0, #12]
 8007f22:	6643      	str	r3, [r0, #100]	; 0x64
 8007f24:	81c2      	strh	r2, [r0, #14]
 8007f26:	6183      	str	r3, [r0, #24]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	2208      	movs	r2, #8
 8007f2c:	305c      	adds	r0, #92	; 0x5c
 8007f2e:	f000 f92d 	bl	800818c <memset>
 8007f32:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <std+0x38>)
 8007f34:	6263      	str	r3, [r4, #36]	; 0x24
 8007f36:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <std+0x3c>)
 8007f38:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f3a:	4b05      	ldr	r3, [pc, #20]	; (8007f50 <std+0x40>)
 8007f3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f3e:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <std+0x44>)
 8007f40:	6224      	str	r4, [r4, #32]
 8007f42:	6323      	str	r3, [r4, #48]	; 0x30
 8007f44:	bd10      	pop	{r4, pc}
 8007f46:	bf00      	nop
 8007f48:	080089d1 	.word	0x080089d1
 8007f4c:	080089f7 	.word	0x080089f7
 8007f50:	08008a2f 	.word	0x08008a2f
 8007f54:	08008a53 	.word	0x08008a53

08007f58 <_cleanup_r>:
 8007f58:	4901      	ldr	r1, [pc, #4]	; (8007f60 <_cleanup_r+0x8>)
 8007f5a:	f000 b8af 	b.w	80080bc <_fwalk_reent>
 8007f5e:	bf00      	nop
 8007f60:	08007e75 	.word	0x08007e75

08007f64 <__sfmoreglue>:
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	1e4a      	subs	r2, r1, #1
 8007f68:	2568      	movs	r5, #104	; 0x68
 8007f6a:	4355      	muls	r5, r2
 8007f6c:	460e      	mov	r6, r1
 8007f6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f72:	f000 fbe1 	bl	8008738 <_malloc_r>
 8007f76:	4604      	mov	r4, r0
 8007f78:	b140      	cbz	r0, 8007f8c <__sfmoreglue+0x28>
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	e9c0 1600 	strd	r1, r6, [r0]
 8007f80:	300c      	adds	r0, #12
 8007f82:	60a0      	str	r0, [r4, #8]
 8007f84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f88:	f000 f900 	bl	800818c <memset>
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	bd70      	pop	{r4, r5, r6, pc}

08007f90 <__sfp_lock_acquire>:
 8007f90:	4801      	ldr	r0, [pc, #4]	; (8007f98 <__sfp_lock_acquire+0x8>)
 8007f92:	f000 b8d9 	b.w	8008148 <__retarget_lock_acquire_recursive>
 8007f96:	bf00      	nop
 8007f98:	2000507c 	.word	0x2000507c

08007f9c <__sfp_lock_release>:
 8007f9c:	4801      	ldr	r0, [pc, #4]	; (8007fa4 <__sfp_lock_release+0x8>)
 8007f9e:	f000 b8d5 	b.w	800814c <__retarget_lock_release_recursive>
 8007fa2:	bf00      	nop
 8007fa4:	2000507c 	.word	0x2000507c

08007fa8 <__sinit_lock_acquire>:
 8007fa8:	4801      	ldr	r0, [pc, #4]	; (8007fb0 <__sinit_lock_acquire+0x8>)
 8007faa:	f000 b8cd 	b.w	8008148 <__retarget_lock_acquire_recursive>
 8007fae:	bf00      	nop
 8007fb0:	20005077 	.word	0x20005077

08007fb4 <__sinit_lock_release>:
 8007fb4:	4801      	ldr	r0, [pc, #4]	; (8007fbc <__sinit_lock_release+0x8>)
 8007fb6:	f000 b8c9 	b.w	800814c <__retarget_lock_release_recursive>
 8007fba:	bf00      	nop
 8007fbc:	20005077 	.word	0x20005077

08007fc0 <__sinit>:
 8007fc0:	b510      	push	{r4, lr}
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	f7ff fff0 	bl	8007fa8 <__sinit_lock_acquire>
 8007fc8:	69a3      	ldr	r3, [r4, #24]
 8007fca:	b11b      	cbz	r3, 8007fd4 <__sinit+0x14>
 8007fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fd0:	f7ff bff0 	b.w	8007fb4 <__sinit_lock_release>
 8007fd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007fd8:	6523      	str	r3, [r4, #80]	; 0x50
 8007fda:	4b13      	ldr	r3, [pc, #76]	; (8008028 <__sinit+0x68>)
 8007fdc:	4a13      	ldr	r2, [pc, #76]	; (800802c <__sinit+0x6c>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007fe2:	42a3      	cmp	r3, r4
 8007fe4:	bf04      	itt	eq
 8007fe6:	2301      	moveq	r3, #1
 8007fe8:	61a3      	streq	r3, [r4, #24]
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 f820 	bl	8008030 <__sfp>
 8007ff0:	6060      	str	r0, [r4, #4]
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f000 f81c 	bl	8008030 <__sfp>
 8007ff8:	60a0      	str	r0, [r4, #8]
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f000 f818 	bl	8008030 <__sfp>
 8008000:	2200      	movs	r2, #0
 8008002:	60e0      	str	r0, [r4, #12]
 8008004:	2104      	movs	r1, #4
 8008006:	6860      	ldr	r0, [r4, #4]
 8008008:	f7ff ff82 	bl	8007f10 <std>
 800800c:	68a0      	ldr	r0, [r4, #8]
 800800e:	2201      	movs	r2, #1
 8008010:	2109      	movs	r1, #9
 8008012:	f7ff ff7d 	bl	8007f10 <std>
 8008016:	68e0      	ldr	r0, [r4, #12]
 8008018:	2202      	movs	r2, #2
 800801a:	2112      	movs	r1, #18
 800801c:	f7ff ff78 	bl	8007f10 <std>
 8008020:	2301      	movs	r3, #1
 8008022:	61a3      	str	r3, [r4, #24]
 8008024:	e7d2      	b.n	8007fcc <__sinit+0xc>
 8008026:	bf00      	nop
 8008028:	0800dec4 	.word	0x0800dec4
 800802c:	08007f59 	.word	0x08007f59

08008030 <__sfp>:
 8008030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008032:	4607      	mov	r7, r0
 8008034:	f7ff ffac 	bl	8007f90 <__sfp_lock_acquire>
 8008038:	4b1e      	ldr	r3, [pc, #120]	; (80080b4 <__sfp+0x84>)
 800803a:	681e      	ldr	r6, [r3, #0]
 800803c:	69b3      	ldr	r3, [r6, #24]
 800803e:	b913      	cbnz	r3, 8008046 <__sfp+0x16>
 8008040:	4630      	mov	r0, r6
 8008042:	f7ff ffbd 	bl	8007fc0 <__sinit>
 8008046:	3648      	adds	r6, #72	; 0x48
 8008048:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800804c:	3b01      	subs	r3, #1
 800804e:	d503      	bpl.n	8008058 <__sfp+0x28>
 8008050:	6833      	ldr	r3, [r6, #0]
 8008052:	b30b      	cbz	r3, 8008098 <__sfp+0x68>
 8008054:	6836      	ldr	r6, [r6, #0]
 8008056:	e7f7      	b.n	8008048 <__sfp+0x18>
 8008058:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800805c:	b9d5      	cbnz	r5, 8008094 <__sfp+0x64>
 800805e:	4b16      	ldr	r3, [pc, #88]	; (80080b8 <__sfp+0x88>)
 8008060:	60e3      	str	r3, [r4, #12]
 8008062:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008066:	6665      	str	r5, [r4, #100]	; 0x64
 8008068:	f000 f86c 	bl	8008144 <__retarget_lock_init_recursive>
 800806c:	f7ff ff96 	bl	8007f9c <__sfp_lock_release>
 8008070:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008074:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008078:	6025      	str	r5, [r4, #0]
 800807a:	61a5      	str	r5, [r4, #24]
 800807c:	2208      	movs	r2, #8
 800807e:	4629      	mov	r1, r5
 8008080:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008084:	f000 f882 	bl	800818c <memset>
 8008088:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800808c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008090:	4620      	mov	r0, r4
 8008092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008094:	3468      	adds	r4, #104	; 0x68
 8008096:	e7d9      	b.n	800804c <__sfp+0x1c>
 8008098:	2104      	movs	r1, #4
 800809a:	4638      	mov	r0, r7
 800809c:	f7ff ff62 	bl	8007f64 <__sfmoreglue>
 80080a0:	4604      	mov	r4, r0
 80080a2:	6030      	str	r0, [r6, #0]
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d1d5      	bne.n	8008054 <__sfp+0x24>
 80080a8:	f7ff ff78 	bl	8007f9c <__sfp_lock_release>
 80080ac:	230c      	movs	r3, #12
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	e7ee      	b.n	8008090 <__sfp+0x60>
 80080b2:	bf00      	nop
 80080b4:	0800dec4 	.word	0x0800dec4
 80080b8:	ffff0001 	.word	0xffff0001

080080bc <_fwalk_reent>:
 80080bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080c0:	4606      	mov	r6, r0
 80080c2:	4688      	mov	r8, r1
 80080c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080c8:	2700      	movs	r7, #0
 80080ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080ce:	f1b9 0901 	subs.w	r9, r9, #1
 80080d2:	d505      	bpl.n	80080e0 <_fwalk_reent+0x24>
 80080d4:	6824      	ldr	r4, [r4, #0]
 80080d6:	2c00      	cmp	r4, #0
 80080d8:	d1f7      	bne.n	80080ca <_fwalk_reent+0xe>
 80080da:	4638      	mov	r0, r7
 80080dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e0:	89ab      	ldrh	r3, [r5, #12]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d907      	bls.n	80080f6 <_fwalk_reent+0x3a>
 80080e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080ea:	3301      	adds	r3, #1
 80080ec:	d003      	beq.n	80080f6 <_fwalk_reent+0x3a>
 80080ee:	4629      	mov	r1, r5
 80080f0:	4630      	mov	r0, r6
 80080f2:	47c0      	blx	r8
 80080f4:	4307      	orrs	r7, r0
 80080f6:	3568      	adds	r5, #104	; 0x68
 80080f8:	e7e9      	b.n	80080ce <_fwalk_reent+0x12>
	...

080080fc <__libc_init_array>:
 80080fc:	b570      	push	{r4, r5, r6, lr}
 80080fe:	4d0d      	ldr	r5, [pc, #52]	; (8008134 <__libc_init_array+0x38>)
 8008100:	4c0d      	ldr	r4, [pc, #52]	; (8008138 <__libc_init_array+0x3c>)
 8008102:	1b64      	subs	r4, r4, r5
 8008104:	10a4      	asrs	r4, r4, #2
 8008106:	2600      	movs	r6, #0
 8008108:	42a6      	cmp	r6, r4
 800810a:	d109      	bne.n	8008120 <__libc_init_array+0x24>
 800810c:	4d0b      	ldr	r5, [pc, #44]	; (800813c <__libc_init_array+0x40>)
 800810e:	4c0c      	ldr	r4, [pc, #48]	; (8008140 <__libc_init_array+0x44>)
 8008110:	f005 fcfe 	bl	800db10 <_init>
 8008114:	1b64      	subs	r4, r4, r5
 8008116:	10a4      	asrs	r4, r4, #2
 8008118:	2600      	movs	r6, #0
 800811a:	42a6      	cmp	r6, r4
 800811c:	d105      	bne.n	800812a <__libc_init_array+0x2e>
 800811e:	bd70      	pop	{r4, r5, r6, pc}
 8008120:	f855 3b04 	ldr.w	r3, [r5], #4
 8008124:	4798      	blx	r3
 8008126:	3601      	adds	r6, #1
 8008128:	e7ee      	b.n	8008108 <__libc_init_array+0xc>
 800812a:	f855 3b04 	ldr.w	r3, [r5], #4
 800812e:	4798      	blx	r3
 8008130:	3601      	adds	r6, #1
 8008132:	e7f2      	b.n	800811a <__libc_init_array+0x1e>
 8008134:	0800e578 	.word	0x0800e578
 8008138:	0800e578 	.word	0x0800e578
 800813c:	0800e578 	.word	0x0800e578
 8008140:	0800e57c 	.word	0x0800e57c

08008144 <__retarget_lock_init_recursive>:
 8008144:	4770      	bx	lr

08008146 <__retarget_lock_acquire>:
 8008146:	4770      	bx	lr

08008148 <__retarget_lock_acquire_recursive>:
 8008148:	4770      	bx	lr

0800814a <__retarget_lock_release>:
 800814a:	4770      	bx	lr

0800814c <__retarget_lock_release_recursive>:
 800814c:	4770      	bx	lr
	...

08008150 <malloc>:
 8008150:	4b02      	ldr	r3, [pc, #8]	; (800815c <malloc+0xc>)
 8008152:	4601      	mov	r1, r0
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	f000 baef 	b.w	8008738 <_malloc_r>
 800815a:	bf00      	nop
 800815c:	20000020 	.word	0x20000020

08008160 <free>:
 8008160:	4b02      	ldr	r3, [pc, #8]	; (800816c <free+0xc>)
 8008162:	4601      	mov	r1, r0
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	f000 ba97 	b.w	8008698 <_free_r>
 800816a:	bf00      	nop
 800816c:	20000020 	.word	0x20000020

08008170 <memcpy>:
 8008170:	440a      	add	r2, r1
 8008172:	4291      	cmp	r1, r2
 8008174:	f100 33ff 	add.w	r3, r0, #4294967295
 8008178:	d100      	bne.n	800817c <memcpy+0xc>
 800817a:	4770      	bx	lr
 800817c:	b510      	push	{r4, lr}
 800817e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008182:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008186:	4291      	cmp	r1, r2
 8008188:	d1f9      	bne.n	800817e <memcpy+0xe>
 800818a:	bd10      	pop	{r4, pc}

0800818c <memset>:
 800818c:	4402      	add	r2, r0
 800818e:	4603      	mov	r3, r0
 8008190:	4293      	cmp	r3, r2
 8008192:	d100      	bne.n	8008196 <memset+0xa>
 8008194:	4770      	bx	lr
 8008196:	f803 1b01 	strb.w	r1, [r3], #1
 800819a:	e7f9      	b.n	8008190 <memset+0x4>

0800819c <validate_structure>:
 800819c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800819e:	6801      	ldr	r1, [r0, #0]
 80081a0:	293b      	cmp	r1, #59	; 0x3b
 80081a2:	4604      	mov	r4, r0
 80081a4:	d911      	bls.n	80081ca <validate_structure+0x2e>
 80081a6:	223c      	movs	r2, #60	; 0x3c
 80081a8:	4668      	mov	r0, sp
 80081aa:	f003 f88f 	bl	800b2cc <div>
 80081ae:	9a01      	ldr	r2, [sp, #4]
 80081b0:	6863      	ldr	r3, [r4, #4]
 80081b2:	9900      	ldr	r1, [sp, #0]
 80081b4:	2a00      	cmp	r2, #0
 80081b6:	440b      	add	r3, r1
 80081b8:	6063      	str	r3, [r4, #4]
 80081ba:	bfbb      	ittet	lt
 80081bc:	323c      	addlt	r2, #60	; 0x3c
 80081be:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80081c2:	6022      	strge	r2, [r4, #0]
 80081c4:	6022      	strlt	r2, [r4, #0]
 80081c6:	bfb8      	it	lt
 80081c8:	6063      	strlt	r3, [r4, #4]
 80081ca:	6861      	ldr	r1, [r4, #4]
 80081cc:	293b      	cmp	r1, #59	; 0x3b
 80081ce:	d911      	bls.n	80081f4 <validate_structure+0x58>
 80081d0:	223c      	movs	r2, #60	; 0x3c
 80081d2:	4668      	mov	r0, sp
 80081d4:	f003 f87a 	bl	800b2cc <div>
 80081d8:	9a01      	ldr	r2, [sp, #4]
 80081da:	68a3      	ldr	r3, [r4, #8]
 80081dc:	9900      	ldr	r1, [sp, #0]
 80081de:	2a00      	cmp	r2, #0
 80081e0:	440b      	add	r3, r1
 80081e2:	60a3      	str	r3, [r4, #8]
 80081e4:	bfbb      	ittet	lt
 80081e6:	323c      	addlt	r2, #60	; 0x3c
 80081e8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80081ec:	6062      	strge	r2, [r4, #4]
 80081ee:	6062      	strlt	r2, [r4, #4]
 80081f0:	bfb8      	it	lt
 80081f2:	60a3      	strlt	r3, [r4, #8]
 80081f4:	68a1      	ldr	r1, [r4, #8]
 80081f6:	2917      	cmp	r1, #23
 80081f8:	d911      	bls.n	800821e <validate_structure+0x82>
 80081fa:	2218      	movs	r2, #24
 80081fc:	4668      	mov	r0, sp
 80081fe:	f003 f865 	bl	800b2cc <div>
 8008202:	9a01      	ldr	r2, [sp, #4]
 8008204:	68e3      	ldr	r3, [r4, #12]
 8008206:	9900      	ldr	r1, [sp, #0]
 8008208:	2a00      	cmp	r2, #0
 800820a:	440b      	add	r3, r1
 800820c:	60e3      	str	r3, [r4, #12]
 800820e:	bfbb      	ittet	lt
 8008210:	3218      	addlt	r2, #24
 8008212:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008216:	60a2      	strge	r2, [r4, #8]
 8008218:	60a2      	strlt	r2, [r4, #8]
 800821a:	bfb8      	it	lt
 800821c:	60e3      	strlt	r3, [r4, #12]
 800821e:	6921      	ldr	r1, [r4, #16]
 8008220:	290b      	cmp	r1, #11
 8008222:	d911      	bls.n	8008248 <validate_structure+0xac>
 8008224:	220c      	movs	r2, #12
 8008226:	4668      	mov	r0, sp
 8008228:	f003 f850 	bl	800b2cc <div>
 800822c:	9a01      	ldr	r2, [sp, #4]
 800822e:	6963      	ldr	r3, [r4, #20]
 8008230:	9900      	ldr	r1, [sp, #0]
 8008232:	2a00      	cmp	r2, #0
 8008234:	440b      	add	r3, r1
 8008236:	6163      	str	r3, [r4, #20]
 8008238:	bfbb      	ittet	lt
 800823a:	320c      	addlt	r2, #12
 800823c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008240:	6122      	strge	r2, [r4, #16]
 8008242:	6122      	strlt	r2, [r4, #16]
 8008244:	bfb8      	it	lt
 8008246:	6163      	strlt	r3, [r4, #20]
 8008248:	6963      	ldr	r3, [r4, #20]
 800824a:	0799      	lsls	r1, r3, #30
 800824c:	d120      	bne.n	8008290 <validate_structure+0xf4>
 800824e:	2164      	movs	r1, #100	; 0x64
 8008250:	fb93 f2f1 	sdiv	r2, r3, r1
 8008254:	fb01 3212 	mls	r2, r1, r2, r3
 8008258:	b9e2      	cbnz	r2, 8008294 <validate_structure+0xf8>
 800825a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800825e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008262:	fb93 f2f1 	sdiv	r2, r3, r1
 8008266:	fb01 3312 	mls	r3, r1, r2, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	bf14      	ite	ne
 800826e:	231c      	movne	r3, #28
 8008270:	231d      	moveq	r3, #29
 8008272:	68e2      	ldr	r2, [r4, #12]
 8008274:	2a00      	cmp	r2, #0
 8008276:	dc0f      	bgt.n	8008298 <validate_structure+0xfc>
 8008278:	4f33      	ldr	r7, [pc, #204]	; (8008348 <validate_structure+0x1ac>)
 800827a:	260b      	movs	r6, #11
 800827c:	2064      	movs	r0, #100	; 0x64
 800827e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8008282:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8008286:	f1bc 0f00 	cmp.w	ip, #0
 800828a:	dd31      	ble.n	80082f0 <validate_structure+0x154>
 800828c:	b003      	add	sp, #12
 800828e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008290:	231c      	movs	r3, #28
 8008292:	e7ee      	b.n	8008272 <validate_structure+0xd6>
 8008294:	231d      	movs	r3, #29
 8008296:	e7ec      	b.n	8008272 <validate_structure+0xd6>
 8008298:	4f2b      	ldr	r7, [pc, #172]	; (8008348 <validate_structure+0x1ac>)
 800829a:	f04f 0c00 	mov.w	ip, #0
 800829e:	2564      	movs	r5, #100	; 0x64
 80082a0:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80082a4:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80082a8:	2a01      	cmp	r2, #1
 80082aa:	bf14      	ite	ne
 80082ac:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 80082b0:	4618      	moveq	r0, r3
 80082b2:	4281      	cmp	r1, r0
 80082b4:	ddea      	ble.n	800828c <validate_structure+0xf0>
 80082b6:	3201      	adds	r2, #1
 80082b8:	1a09      	subs	r1, r1, r0
 80082ba:	2a0c      	cmp	r2, #12
 80082bc:	60e1      	str	r1, [r4, #12]
 80082be:	6122      	str	r2, [r4, #16]
 80082c0:	d1f0      	bne.n	80082a4 <validate_structure+0x108>
 80082c2:	6963      	ldr	r3, [r4, #20]
 80082c4:	1c5a      	adds	r2, r3, #1
 80082c6:	0791      	lsls	r1, r2, #30
 80082c8:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80082cc:	d137      	bne.n	800833e <validate_structure+0x1a2>
 80082ce:	fb92 f1f5 	sdiv	r1, r2, r5
 80082d2:	fb05 2211 	mls	r2, r5, r1, r2
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	d133      	bne.n	8008342 <validate_structure+0x1a6>
 80082da:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80082de:	fb93 f2f6 	sdiv	r2, r3, r6
 80082e2:	fb06 3312 	mls	r3, r6, r2, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	bf14      	ite	ne
 80082ea:	231c      	movne	r3, #28
 80082ec:	231d      	moveq	r3, #29
 80082ee:	e7d9      	b.n	80082a4 <validate_structure+0x108>
 80082f0:	6921      	ldr	r1, [r4, #16]
 80082f2:	3901      	subs	r1, #1
 80082f4:	6121      	str	r1, [r4, #16]
 80082f6:	3101      	adds	r1, #1
 80082f8:	d114      	bne.n	8008324 <validate_structure+0x188>
 80082fa:	6963      	ldr	r3, [r4, #20]
 80082fc:	1e59      	subs	r1, r3, #1
 80082fe:	078a      	lsls	r2, r1, #30
 8008300:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8008304:	d117      	bne.n	8008336 <validate_structure+0x19a>
 8008306:	fb91 f2f0 	sdiv	r2, r1, r0
 800830a:	fb00 1112 	mls	r1, r0, r2, r1
 800830e:	b9a1      	cbnz	r1, 800833a <validate_structure+0x19e>
 8008310:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8008314:	fb93 f2f5 	sdiv	r2, r3, r5
 8008318:	fb05 3312 	mls	r3, r5, r2, r3
 800831c:	2b00      	cmp	r3, #0
 800831e:	bf14      	ite	ne
 8008320:	231c      	movne	r3, #28
 8008322:	231d      	moveq	r3, #29
 8008324:	6922      	ldr	r2, [r4, #16]
 8008326:	2a01      	cmp	r2, #1
 8008328:	bf14      	ite	ne
 800832a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800832e:	461a      	moveq	r2, r3
 8008330:	4462      	add	r2, ip
 8008332:	60e2      	str	r2, [r4, #12]
 8008334:	e7a5      	b.n	8008282 <validate_structure+0xe6>
 8008336:	231c      	movs	r3, #28
 8008338:	e7f4      	b.n	8008324 <validate_structure+0x188>
 800833a:	231d      	movs	r3, #29
 800833c:	e7f2      	b.n	8008324 <validate_structure+0x188>
 800833e:	231c      	movs	r3, #28
 8008340:	e7b0      	b.n	80082a4 <validate_structure+0x108>
 8008342:	231d      	movs	r3, #29
 8008344:	e7ae      	b.n	80082a4 <validate_structure+0x108>
 8008346:	bf00      	nop
 8008348:	0800dec8 	.word	0x0800dec8

0800834c <mktime>:
 800834c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008350:	b08b      	sub	sp, #44	; 0x2c
 8008352:	4605      	mov	r5, r0
 8008354:	f003 fb80 	bl	800ba58 <__gettzinfo>
 8008358:	4607      	mov	r7, r0
 800835a:	4628      	mov	r0, r5
 800835c:	f7ff ff1e 	bl	800819c <validate_structure>
 8008360:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008364:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8008368:	68a8      	ldr	r0, [r5, #8]
 800836a:	696e      	ldr	r6, [r5, #20]
 800836c:	fb0a 2303 	mla	r3, sl, r3, r2
 8008370:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 8008374:	fb0a 3a00 	mla	sl, sl, r0, r3
 8008378:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 800837c:	4ac3      	ldr	r2, [pc, #780]	; (800868c <mktime+0x340>)
 800837e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008382:	3c01      	subs	r4, #1
 8008384:	2b01      	cmp	r3, #1
 8008386:	4414      	add	r4, r2
 8008388:	dd11      	ble.n	80083ae <mktime+0x62>
 800838a:	07b1      	lsls	r1, r6, #30
 800838c:	d10f      	bne.n	80083ae <mktime+0x62>
 800838e:	2264      	movs	r2, #100	; 0x64
 8008390:	fb96 f3f2 	sdiv	r3, r6, r2
 8008394:	fb02 6313 	mls	r3, r2, r3, r6
 8008398:	b943      	cbnz	r3, 80083ac <mktime+0x60>
 800839a:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 800839e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80083a2:	fb91 f3f2 	sdiv	r3, r1, r2
 80083a6:	fb02 1313 	mls	r3, r2, r3, r1
 80083aa:	b903      	cbnz	r3, 80083ae <mktime+0x62>
 80083ac:	3401      	adds	r4, #1
 80083ae:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80083b2:	3310      	adds	r3, #16
 80083b4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80083b8:	4293      	cmp	r3, r2
 80083ba:	61ec      	str	r4, [r5, #28]
 80083bc:	f200 8161 	bhi.w	8008682 <mktime+0x336>
 80083c0:	2e46      	cmp	r6, #70	; 0x46
 80083c2:	dd77      	ble.n	80084b4 <mktime+0x168>
 80083c4:	2346      	movs	r3, #70	; 0x46
 80083c6:	f240 1e6d 	movw	lr, #365	; 0x16d
 80083ca:	2164      	movs	r1, #100	; 0x64
 80083cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80083d0:	079a      	lsls	r2, r3, #30
 80083d2:	d169      	bne.n	80084a8 <mktime+0x15c>
 80083d4:	fb93 f2f1 	sdiv	r2, r3, r1
 80083d8:	fb01 3212 	mls	r2, r1, r2, r3
 80083dc:	2a00      	cmp	r2, #0
 80083de:	d166      	bne.n	80084ae <mktime+0x162>
 80083e0:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80083e4:	fb9c f2f0 	sdiv	r2, ip, r0
 80083e8:	fb00 c212 	mls	r2, r0, r2, ip
 80083ec:	2a00      	cmp	r2, #0
 80083ee:	bf14      	ite	ne
 80083f0:	4672      	movne	r2, lr
 80083f2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80083f6:	3301      	adds	r3, #1
 80083f8:	429e      	cmp	r6, r3
 80083fa:	4414      	add	r4, r2
 80083fc:	d1e8      	bne.n	80083d0 <mktime+0x84>
 80083fe:	4ba4      	ldr	r3, [pc, #656]	; (8008690 <mktime+0x344>)
 8008400:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8008404:	fbc3 ab04 	smlal	sl, fp, r3, r4
 8008408:	f002 fcec 	bl	800ade4 <__tz_lock>
 800840c:	f002 fcf6 	bl	800adfc <_tzset_unlocked>
 8008410:	4ba0      	ldr	r3, [pc, #640]	; (8008694 <mktime+0x348>)
 8008412:	f8d3 9000 	ldr.w	r9, [r3]
 8008416:	f1b9 0f00 	cmp.w	r9, #0
 800841a:	d03f      	beq.n	800849c <mktime+0x150>
 800841c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8008420:	6968      	ldr	r0, [r5, #20]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f1b9 0f01 	cmp.w	r9, #1
 8008428:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800842c:	46c8      	mov	r8, r9
 800842e:	bfa8      	it	ge
 8008430:	f04f 0801 	movge.w	r8, #1
 8008434:	4283      	cmp	r3, r0
 8008436:	d17f      	bne.n	8008538 <mktime+0x1ec>
 8008438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800843a:	4619      	mov	r1, r3
 800843c:	17da      	asrs	r2, r3, #31
 800843e:	e9cd 1200 	strd	r1, r2, [sp]
 8008442:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008446:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800844a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800844e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008450:	1a80      	subs	r0, r0, r2
 8008452:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 8008456:	4582      	cmp	sl, r0
 8008458:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800845c:	eb7b 0101 	sbcs.w	r1, fp, r1
 8008460:	da71      	bge.n	8008546 <mktime+0x1fa>
 8008462:	9800      	ldr	r0, [sp, #0]
 8008464:	6a39      	ldr	r1, [r7, #32]
 8008466:	1a09      	subs	r1, r1, r0
 8008468:	9104      	str	r1, [sp, #16]
 800846a:	9801      	ldr	r0, [sp, #4]
 800846c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800846e:	eb61 0100 	sbc.w	r1, r1, r0
 8008472:	9105      	str	r1, [sp, #20]
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	2900      	cmp	r1, #0
 8008478:	d075      	beq.n	8008566 <mktime+0x21a>
 800847a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800847e:	4582      	cmp	sl, r0
 8008480:	eb7b 0101 	sbcs.w	r1, fp, r1
 8008484:	db05      	blt.n	8008492 <mktime+0x146>
 8008486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800848a:	4582      	cmp	sl, r0
 800848c:	eb7b 0101 	sbcs.w	r1, fp, r1
 8008490:	db6f      	blt.n	8008572 <mktime+0x226>
 8008492:	f1b9 0f00 	cmp.w	r9, #0
 8008496:	f04f 0900 	mov.w	r9, #0
 800849a:	da6f      	bge.n	800857c <mktime+0x230>
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	eb1a 0a03 	adds.w	sl, sl, r3
 80084a2:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80084a6:	e0ae      	b.n	8008606 <mktime+0x2ba>
 80084a8:	f240 126d 	movw	r2, #365	; 0x16d
 80084ac:	e7a3      	b.n	80083f6 <mktime+0xaa>
 80084ae:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80084b2:	e7a0      	b.n	80083f6 <mktime+0xaa>
 80084b4:	d0a3      	beq.n	80083fe <mktime+0xb2>
 80084b6:	2345      	movs	r3, #69	; 0x45
 80084b8:	f240 1e6d 	movw	lr, #365	; 0x16d
 80084bc:	2164      	movs	r1, #100	; 0x64
 80084be:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80084c2:	e012      	b.n	80084ea <mktime+0x19e>
 80084c4:	bb62      	cbnz	r2, 8008520 <mktime+0x1d4>
 80084c6:	fb93 f2f1 	sdiv	r2, r3, r1
 80084ca:	fb01 3212 	mls	r2, r1, r2, r3
 80084ce:	bb52      	cbnz	r2, 8008526 <mktime+0x1da>
 80084d0:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80084d4:	fb9c f2f0 	sdiv	r2, ip, r0
 80084d8:	fb00 c212 	mls	r2, r0, r2, ip
 80084dc:	2a00      	cmp	r2, #0
 80084de:	bf14      	ite	ne
 80084e0:	4672      	movne	r2, lr
 80084e2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80084e6:	1aa4      	subs	r4, r4, r2
 80084e8:	3b01      	subs	r3, #1
 80084ea:	429e      	cmp	r6, r3
 80084ec:	f003 0203 	and.w	r2, r3, #3
 80084f0:	dbe8      	blt.n	80084c4 <mktime+0x178>
 80084f2:	b9da      	cbnz	r2, 800852c <mktime+0x1e0>
 80084f4:	2264      	movs	r2, #100	; 0x64
 80084f6:	fb96 f3f2 	sdiv	r3, r6, r2
 80084fa:	fb02 6313 	mls	r3, r2, r3, r6
 80084fe:	b9c3      	cbnz	r3, 8008532 <mktime+0x1e6>
 8008500:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8008504:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008508:	fb91 f3f2 	sdiv	r3, r1, r2
 800850c:	fb02 1313 	mls	r3, r2, r3, r1
 8008510:	2b00      	cmp	r3, #0
 8008512:	f240 136d 	movw	r3, #365	; 0x16d
 8008516:	bf08      	it	eq
 8008518:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800851c:	1ae4      	subs	r4, r4, r3
 800851e:	e76e      	b.n	80083fe <mktime+0xb2>
 8008520:	f240 126d 	movw	r2, #365	; 0x16d
 8008524:	e7df      	b.n	80084e6 <mktime+0x19a>
 8008526:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800852a:	e7dc      	b.n	80084e6 <mktime+0x19a>
 800852c:	f240 136d 	movw	r3, #365	; 0x16d
 8008530:	e7f4      	b.n	800851c <mktime+0x1d0>
 8008532:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8008536:	e7f1      	b.n	800851c <mktime+0x1d0>
 8008538:	f002 fbac 	bl	800ac94 <__tzcalc_limits>
 800853c:	2800      	cmp	r0, #0
 800853e:	f47f af7b 	bne.w	8008438 <mktime+0xec>
 8008542:	46c1      	mov	r9, r8
 8008544:	e054      	b.n	80085f0 <mktime+0x2a4>
 8008546:	9800      	ldr	r0, [sp, #0]
 8008548:	9902      	ldr	r1, [sp, #8]
 800854a:	1a09      	subs	r1, r1, r0
 800854c:	9108      	str	r1, [sp, #32]
 800854e:	9801      	ldr	r0, [sp, #4]
 8008550:	9903      	ldr	r1, [sp, #12]
 8008552:	eb61 0100 	sbc.w	r1, r1, r0
 8008556:	9109      	str	r1, [sp, #36]	; 0x24
 8008558:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800855c:	4582      	cmp	sl, r0
 800855e:	eb7b 0101 	sbcs.w	r1, fp, r1
 8008562:	dbee      	blt.n	8008542 <mktime+0x1f6>
 8008564:	e77d      	b.n	8008462 <mktime+0x116>
 8008566:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800856a:	4582      	cmp	sl, r0
 800856c:	eb7b 0101 	sbcs.w	r1, fp, r1
 8008570:	db89      	blt.n	8008486 <mktime+0x13a>
 8008572:	f1b9 0f00 	cmp.w	r9, #0
 8008576:	db3f      	blt.n	80085f8 <mktime+0x2ac>
 8008578:	f04f 0901 	mov.w	r9, #1
 800857c:	ea88 0809 	eor.w	r8, r8, r9
 8008580:	f1b8 0f01 	cmp.w	r8, #1
 8008584:	d134      	bne.n	80085f0 <mktime+0x2a4>
 8008586:	f1b9 0f00 	cmp.w	r9, #0
 800858a:	d04f      	beq.n	800862c <mktime+0x2e0>
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	682a      	ldr	r2, [r5, #0]
 8008590:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8008594:	441a      	add	r2, r3
 8008596:	eb1a 0a03 	adds.w	sl, sl, r3
 800859a:	602a      	str	r2, [r5, #0]
 800859c:	4628      	mov	r0, r5
 800859e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80085a2:	f7ff fdfb 	bl	800819c <validate_structure>
 80085a6:	68ea      	ldr	r2, [r5, #12]
 80085a8:	ebb2 0208 	subs.w	r2, r2, r8
 80085ac:	d020      	beq.n	80085f0 <mktime+0x2a4>
 80085ae:	2a01      	cmp	r2, #1
 80085b0:	dc3e      	bgt.n	8008630 <mktime+0x2e4>
 80085b2:	1c90      	adds	r0, r2, #2
 80085b4:	bfd8      	it	le
 80085b6:	2201      	movle	r2, #1
 80085b8:	69eb      	ldr	r3, [r5, #28]
 80085ba:	18d3      	adds	r3, r2, r3
 80085bc:	4414      	add	r4, r2
 80085be:	d540      	bpl.n	8008642 <mktime+0x2f6>
 80085c0:	1e72      	subs	r2, r6, #1
 80085c2:	0791      	lsls	r1, r2, #30
 80085c4:	d137      	bne.n	8008636 <mktime+0x2ea>
 80085c6:	2164      	movs	r1, #100	; 0x64
 80085c8:	fb92 f3f1 	sdiv	r3, r2, r1
 80085cc:	fb01 2313 	mls	r3, r1, r3, r2
 80085d0:	bba3      	cbnz	r3, 800863c <mktime+0x2f0>
 80085d2:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80085d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80085da:	fb96 f3f2 	sdiv	r3, r6, r2
 80085de:	fb02 6613 	mls	r6, r2, r3, r6
 80085e2:	2e00      	cmp	r6, #0
 80085e4:	f240 136d 	movw	r3, #365	; 0x16d
 80085e8:	bf18      	it	ne
 80085ea:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80085ee:	61eb      	str	r3, [r5, #28]
 80085f0:	f1b9 0f01 	cmp.w	r9, #1
 80085f4:	f47f af52 	bne.w	800849c <mktime+0x150>
 80085f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085fa:	eb1a 0a03 	adds.w	sl, sl, r3
 80085fe:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8008602:	f04f 0901 	mov.w	r9, #1
 8008606:	f002 fbf3 	bl	800adf0 <__tz_unlock>
 800860a:	3404      	adds	r4, #4
 800860c:	2307      	movs	r3, #7
 800860e:	fb94 f3f3 	sdiv	r3, r4, r3
 8008612:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008616:	1ae4      	subs	r4, r4, r3
 8008618:	bf48      	it	mi
 800861a:	3407      	addmi	r4, #7
 800861c:	f8c5 9020 	str.w	r9, [r5, #32]
 8008620:	61ac      	str	r4, [r5, #24]
 8008622:	4650      	mov	r0, sl
 8008624:	4659      	mov	r1, fp
 8008626:	b00b      	add	sp, #44	; 0x2c
 8008628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862c:	1a9b      	subs	r3, r3, r2
 800862e:	e7ae      	b.n	800858e <mktime+0x242>
 8008630:	f04f 32ff 	mov.w	r2, #4294967295
 8008634:	e7c0      	b.n	80085b8 <mktime+0x26c>
 8008636:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800863a:	e7d8      	b.n	80085ee <mktime+0x2a2>
 800863c:	f240 136d 	movw	r3, #365	; 0x16d
 8008640:	e7d5      	b.n	80085ee <mktime+0x2a2>
 8008642:	07b2      	lsls	r2, r6, #30
 8008644:	d117      	bne.n	8008676 <mktime+0x32a>
 8008646:	2164      	movs	r1, #100	; 0x64
 8008648:	fb96 f2f1 	sdiv	r2, r6, r1
 800864c:	fb01 6212 	mls	r2, r1, r2, r6
 8008650:	b9a2      	cbnz	r2, 800867c <mktime+0x330>
 8008652:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8008656:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800865a:	fb96 f2f1 	sdiv	r2, r6, r1
 800865e:	fb01 6612 	mls	r6, r1, r2, r6
 8008662:	2e00      	cmp	r6, #0
 8008664:	f240 126d 	movw	r2, #365	; 0x16d
 8008668:	bf08      	it	eq
 800866a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800866e:	4293      	cmp	r3, r2
 8008670:	bfa8      	it	ge
 8008672:	1a9b      	subge	r3, r3, r2
 8008674:	e7bb      	b.n	80085ee <mktime+0x2a2>
 8008676:	f240 126d 	movw	r2, #365	; 0x16d
 800867a:	e7f8      	b.n	800866e <mktime+0x322>
 800867c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8008680:	e7f5      	b.n	800866e <mktime+0x322>
 8008682:	f04f 3aff 	mov.w	sl, #4294967295
 8008686:	f04f 3bff 	mov.w	fp, #4294967295
 800868a:	e7ca      	b.n	8008622 <mktime+0x2d6>
 800868c:	0800def8 	.word	0x0800def8
 8008690:	00015180 	.word	0x00015180
 8008694:	20004250 	.word	0x20004250

08008698 <_free_r>:
 8008698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800869a:	2900      	cmp	r1, #0
 800869c:	d048      	beq.n	8008730 <_free_r+0x98>
 800869e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086a2:	9001      	str	r0, [sp, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f1a1 0404 	sub.w	r4, r1, #4
 80086aa:	bfb8      	it	lt
 80086ac:	18e4      	addlt	r4, r4, r3
 80086ae:	f003 fb59 	bl	800bd64 <__malloc_lock>
 80086b2:	4a20      	ldr	r2, [pc, #128]	; (8008734 <_free_r+0x9c>)
 80086b4:	9801      	ldr	r0, [sp, #4]
 80086b6:	6813      	ldr	r3, [r2, #0]
 80086b8:	4615      	mov	r5, r2
 80086ba:	b933      	cbnz	r3, 80086ca <_free_r+0x32>
 80086bc:	6063      	str	r3, [r4, #4]
 80086be:	6014      	str	r4, [r2, #0]
 80086c0:	b003      	add	sp, #12
 80086c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086c6:	f003 bb53 	b.w	800bd70 <__malloc_unlock>
 80086ca:	42a3      	cmp	r3, r4
 80086cc:	d90b      	bls.n	80086e6 <_free_r+0x4e>
 80086ce:	6821      	ldr	r1, [r4, #0]
 80086d0:	1862      	adds	r2, r4, r1
 80086d2:	4293      	cmp	r3, r2
 80086d4:	bf04      	itt	eq
 80086d6:	681a      	ldreq	r2, [r3, #0]
 80086d8:	685b      	ldreq	r3, [r3, #4]
 80086da:	6063      	str	r3, [r4, #4]
 80086dc:	bf04      	itt	eq
 80086de:	1852      	addeq	r2, r2, r1
 80086e0:	6022      	streq	r2, [r4, #0]
 80086e2:	602c      	str	r4, [r5, #0]
 80086e4:	e7ec      	b.n	80086c0 <_free_r+0x28>
 80086e6:	461a      	mov	r2, r3
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	b10b      	cbz	r3, 80086f0 <_free_r+0x58>
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	d9fa      	bls.n	80086e6 <_free_r+0x4e>
 80086f0:	6811      	ldr	r1, [r2, #0]
 80086f2:	1855      	adds	r5, r2, r1
 80086f4:	42a5      	cmp	r5, r4
 80086f6:	d10b      	bne.n	8008710 <_free_r+0x78>
 80086f8:	6824      	ldr	r4, [r4, #0]
 80086fa:	4421      	add	r1, r4
 80086fc:	1854      	adds	r4, r2, r1
 80086fe:	42a3      	cmp	r3, r4
 8008700:	6011      	str	r1, [r2, #0]
 8008702:	d1dd      	bne.n	80086c0 <_free_r+0x28>
 8008704:	681c      	ldr	r4, [r3, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	6053      	str	r3, [r2, #4]
 800870a:	4421      	add	r1, r4
 800870c:	6011      	str	r1, [r2, #0]
 800870e:	e7d7      	b.n	80086c0 <_free_r+0x28>
 8008710:	d902      	bls.n	8008718 <_free_r+0x80>
 8008712:	230c      	movs	r3, #12
 8008714:	6003      	str	r3, [r0, #0]
 8008716:	e7d3      	b.n	80086c0 <_free_r+0x28>
 8008718:	6825      	ldr	r5, [r4, #0]
 800871a:	1961      	adds	r1, r4, r5
 800871c:	428b      	cmp	r3, r1
 800871e:	bf04      	itt	eq
 8008720:	6819      	ldreq	r1, [r3, #0]
 8008722:	685b      	ldreq	r3, [r3, #4]
 8008724:	6063      	str	r3, [r4, #4]
 8008726:	bf04      	itt	eq
 8008728:	1949      	addeq	r1, r1, r5
 800872a:	6021      	streq	r1, [r4, #0]
 800872c:	6054      	str	r4, [r2, #4]
 800872e:	e7c7      	b.n	80086c0 <_free_r+0x28>
 8008730:	b003      	add	sp, #12
 8008732:	bd30      	pop	{r4, r5, pc}
 8008734:	2000422c 	.word	0x2000422c

08008738 <_malloc_r>:
 8008738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873a:	1ccd      	adds	r5, r1, #3
 800873c:	f025 0503 	bic.w	r5, r5, #3
 8008740:	3508      	adds	r5, #8
 8008742:	2d0c      	cmp	r5, #12
 8008744:	bf38      	it	cc
 8008746:	250c      	movcc	r5, #12
 8008748:	2d00      	cmp	r5, #0
 800874a:	4606      	mov	r6, r0
 800874c:	db01      	blt.n	8008752 <_malloc_r+0x1a>
 800874e:	42a9      	cmp	r1, r5
 8008750:	d903      	bls.n	800875a <_malloc_r+0x22>
 8008752:	230c      	movs	r3, #12
 8008754:	6033      	str	r3, [r6, #0]
 8008756:	2000      	movs	r0, #0
 8008758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800875a:	f003 fb03 	bl	800bd64 <__malloc_lock>
 800875e:	4921      	ldr	r1, [pc, #132]	; (80087e4 <_malloc_r+0xac>)
 8008760:	680a      	ldr	r2, [r1, #0]
 8008762:	4614      	mov	r4, r2
 8008764:	b99c      	cbnz	r4, 800878e <_malloc_r+0x56>
 8008766:	4f20      	ldr	r7, [pc, #128]	; (80087e8 <_malloc_r+0xb0>)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	b923      	cbnz	r3, 8008776 <_malloc_r+0x3e>
 800876c:	4621      	mov	r1, r4
 800876e:	4630      	mov	r0, r6
 8008770:	f000 f8d2 	bl	8008918 <_sbrk_r>
 8008774:	6038      	str	r0, [r7, #0]
 8008776:	4629      	mov	r1, r5
 8008778:	4630      	mov	r0, r6
 800877a:	f000 f8cd 	bl	8008918 <_sbrk_r>
 800877e:	1c43      	adds	r3, r0, #1
 8008780:	d123      	bne.n	80087ca <_malloc_r+0x92>
 8008782:	230c      	movs	r3, #12
 8008784:	6033      	str	r3, [r6, #0]
 8008786:	4630      	mov	r0, r6
 8008788:	f003 faf2 	bl	800bd70 <__malloc_unlock>
 800878c:	e7e3      	b.n	8008756 <_malloc_r+0x1e>
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	1b5b      	subs	r3, r3, r5
 8008792:	d417      	bmi.n	80087c4 <_malloc_r+0x8c>
 8008794:	2b0b      	cmp	r3, #11
 8008796:	d903      	bls.n	80087a0 <_malloc_r+0x68>
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	441c      	add	r4, r3
 800879c:	6025      	str	r5, [r4, #0]
 800879e:	e004      	b.n	80087aa <_malloc_r+0x72>
 80087a0:	6863      	ldr	r3, [r4, #4]
 80087a2:	42a2      	cmp	r2, r4
 80087a4:	bf0c      	ite	eq
 80087a6:	600b      	streq	r3, [r1, #0]
 80087a8:	6053      	strne	r3, [r2, #4]
 80087aa:	4630      	mov	r0, r6
 80087ac:	f003 fae0 	bl	800bd70 <__malloc_unlock>
 80087b0:	f104 000b 	add.w	r0, r4, #11
 80087b4:	1d23      	adds	r3, r4, #4
 80087b6:	f020 0007 	bic.w	r0, r0, #7
 80087ba:	1ac2      	subs	r2, r0, r3
 80087bc:	d0cc      	beq.n	8008758 <_malloc_r+0x20>
 80087be:	1a1b      	subs	r3, r3, r0
 80087c0:	50a3      	str	r3, [r4, r2]
 80087c2:	e7c9      	b.n	8008758 <_malloc_r+0x20>
 80087c4:	4622      	mov	r2, r4
 80087c6:	6864      	ldr	r4, [r4, #4]
 80087c8:	e7cc      	b.n	8008764 <_malloc_r+0x2c>
 80087ca:	1cc4      	adds	r4, r0, #3
 80087cc:	f024 0403 	bic.w	r4, r4, #3
 80087d0:	42a0      	cmp	r0, r4
 80087d2:	d0e3      	beq.n	800879c <_malloc_r+0x64>
 80087d4:	1a21      	subs	r1, r4, r0
 80087d6:	4630      	mov	r0, r6
 80087d8:	f000 f89e 	bl	8008918 <_sbrk_r>
 80087dc:	3001      	adds	r0, #1
 80087de:	d1dd      	bne.n	800879c <_malloc_r+0x64>
 80087e0:	e7cf      	b.n	8008782 <_malloc_r+0x4a>
 80087e2:	bf00      	nop
 80087e4:	2000422c 	.word	0x2000422c
 80087e8:	20004230 	.word	0x20004230

080087ec <iprintf>:
 80087ec:	b40f      	push	{r0, r1, r2, r3}
 80087ee:	4b0a      	ldr	r3, [pc, #40]	; (8008818 <iprintf+0x2c>)
 80087f0:	b513      	push	{r0, r1, r4, lr}
 80087f2:	681c      	ldr	r4, [r3, #0]
 80087f4:	b124      	cbz	r4, 8008800 <iprintf+0x14>
 80087f6:	69a3      	ldr	r3, [r4, #24]
 80087f8:	b913      	cbnz	r3, 8008800 <iprintf+0x14>
 80087fa:	4620      	mov	r0, r4
 80087fc:	f7ff fbe0 	bl	8007fc0 <__sinit>
 8008800:	ab05      	add	r3, sp, #20
 8008802:	9a04      	ldr	r2, [sp, #16]
 8008804:	68a1      	ldr	r1, [r4, #8]
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	4620      	mov	r0, r4
 800880a:	f004 faff 	bl	800ce0c <_vfiprintf_r>
 800880e:	b002      	add	sp, #8
 8008810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008814:	b004      	add	sp, #16
 8008816:	4770      	bx	lr
 8008818:	20000020 	.word	0x20000020

0800881c <_puts_r>:
 800881c:	b570      	push	{r4, r5, r6, lr}
 800881e:	460e      	mov	r6, r1
 8008820:	4605      	mov	r5, r0
 8008822:	b118      	cbz	r0, 800882c <_puts_r+0x10>
 8008824:	6983      	ldr	r3, [r0, #24]
 8008826:	b90b      	cbnz	r3, 800882c <_puts_r+0x10>
 8008828:	f7ff fbca 	bl	8007fc0 <__sinit>
 800882c:	69ab      	ldr	r3, [r5, #24]
 800882e:	68ac      	ldr	r4, [r5, #8]
 8008830:	b913      	cbnz	r3, 8008838 <_puts_r+0x1c>
 8008832:	4628      	mov	r0, r5
 8008834:	f7ff fbc4 	bl	8007fc0 <__sinit>
 8008838:	4b2c      	ldr	r3, [pc, #176]	; (80088ec <_puts_r+0xd0>)
 800883a:	429c      	cmp	r4, r3
 800883c:	d120      	bne.n	8008880 <_puts_r+0x64>
 800883e:	686c      	ldr	r4, [r5, #4]
 8008840:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008842:	07db      	lsls	r3, r3, #31
 8008844:	d405      	bmi.n	8008852 <_puts_r+0x36>
 8008846:	89a3      	ldrh	r3, [r4, #12]
 8008848:	0598      	lsls	r0, r3, #22
 800884a:	d402      	bmi.n	8008852 <_puts_r+0x36>
 800884c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800884e:	f7ff fc7b 	bl	8008148 <__retarget_lock_acquire_recursive>
 8008852:	89a3      	ldrh	r3, [r4, #12]
 8008854:	0719      	lsls	r1, r3, #28
 8008856:	d51d      	bpl.n	8008894 <_puts_r+0x78>
 8008858:	6923      	ldr	r3, [r4, #16]
 800885a:	b1db      	cbz	r3, 8008894 <_puts_r+0x78>
 800885c:	3e01      	subs	r6, #1
 800885e:	68a3      	ldr	r3, [r4, #8]
 8008860:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008864:	3b01      	subs	r3, #1
 8008866:	60a3      	str	r3, [r4, #8]
 8008868:	bb39      	cbnz	r1, 80088ba <_puts_r+0x9e>
 800886a:	2b00      	cmp	r3, #0
 800886c:	da38      	bge.n	80088e0 <_puts_r+0xc4>
 800886e:	4622      	mov	r2, r4
 8008870:	210a      	movs	r1, #10
 8008872:	4628      	mov	r0, r5
 8008874:	f002 fc44 	bl	800b100 <__swbuf_r>
 8008878:	3001      	adds	r0, #1
 800887a:	d011      	beq.n	80088a0 <_puts_r+0x84>
 800887c:	250a      	movs	r5, #10
 800887e:	e011      	b.n	80088a4 <_puts_r+0x88>
 8008880:	4b1b      	ldr	r3, [pc, #108]	; (80088f0 <_puts_r+0xd4>)
 8008882:	429c      	cmp	r4, r3
 8008884:	d101      	bne.n	800888a <_puts_r+0x6e>
 8008886:	68ac      	ldr	r4, [r5, #8]
 8008888:	e7da      	b.n	8008840 <_puts_r+0x24>
 800888a:	4b1a      	ldr	r3, [pc, #104]	; (80088f4 <_puts_r+0xd8>)
 800888c:	429c      	cmp	r4, r3
 800888e:	bf08      	it	eq
 8008890:	68ec      	ldreq	r4, [r5, #12]
 8008892:	e7d5      	b.n	8008840 <_puts_r+0x24>
 8008894:	4621      	mov	r1, r4
 8008896:	4628      	mov	r0, r5
 8008898:	f002 fc96 	bl	800b1c8 <__swsetup_r>
 800889c:	2800      	cmp	r0, #0
 800889e:	d0dd      	beq.n	800885c <_puts_r+0x40>
 80088a0:	f04f 35ff 	mov.w	r5, #4294967295
 80088a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088a6:	07da      	lsls	r2, r3, #31
 80088a8:	d405      	bmi.n	80088b6 <_puts_r+0x9a>
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	059b      	lsls	r3, r3, #22
 80088ae:	d402      	bmi.n	80088b6 <_puts_r+0x9a>
 80088b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088b2:	f7ff fc4b 	bl	800814c <__retarget_lock_release_recursive>
 80088b6:	4628      	mov	r0, r5
 80088b8:	bd70      	pop	{r4, r5, r6, pc}
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	da04      	bge.n	80088c8 <_puts_r+0xac>
 80088be:	69a2      	ldr	r2, [r4, #24]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	dc06      	bgt.n	80088d2 <_puts_r+0xb6>
 80088c4:	290a      	cmp	r1, #10
 80088c6:	d004      	beq.n	80088d2 <_puts_r+0xb6>
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	6022      	str	r2, [r4, #0]
 80088ce:	7019      	strb	r1, [r3, #0]
 80088d0:	e7c5      	b.n	800885e <_puts_r+0x42>
 80088d2:	4622      	mov	r2, r4
 80088d4:	4628      	mov	r0, r5
 80088d6:	f002 fc13 	bl	800b100 <__swbuf_r>
 80088da:	3001      	adds	r0, #1
 80088dc:	d1bf      	bne.n	800885e <_puts_r+0x42>
 80088de:	e7df      	b.n	80088a0 <_puts_r+0x84>
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	250a      	movs	r5, #10
 80088e4:	1c5a      	adds	r2, r3, #1
 80088e6:	6022      	str	r2, [r4, #0]
 80088e8:	701d      	strb	r5, [r3, #0]
 80088ea:	e7db      	b.n	80088a4 <_puts_r+0x88>
 80088ec:	0800de84 	.word	0x0800de84
 80088f0:	0800dea4 	.word	0x0800dea4
 80088f4:	0800de64 	.word	0x0800de64

080088f8 <puts>:
 80088f8:	4b02      	ldr	r3, [pc, #8]	; (8008904 <puts+0xc>)
 80088fa:	4601      	mov	r1, r0
 80088fc:	6818      	ldr	r0, [r3, #0]
 80088fe:	f7ff bf8d 	b.w	800881c <_puts_r>
 8008902:	bf00      	nop
 8008904:	20000020 	.word	0x20000020

08008908 <realloc>:
 8008908:	4b02      	ldr	r3, [pc, #8]	; (8008914 <realloc+0xc>)
 800890a:	460a      	mov	r2, r1
 800890c:	4601      	mov	r1, r0
 800890e:	6818      	ldr	r0, [r3, #0]
 8008910:	f003 befe 	b.w	800c710 <_realloc_r>
 8008914:	20000020 	.word	0x20000020

08008918 <_sbrk_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4d06      	ldr	r5, [pc, #24]	; (8008934 <_sbrk_r+0x1c>)
 800891c:	2300      	movs	r3, #0
 800891e:	4604      	mov	r4, r0
 8008920:	4608      	mov	r0, r1
 8008922:	602b      	str	r3, [r5, #0]
 8008924:	f7f9 ff60 	bl	80027e8 <_sbrk>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_sbrk_r+0x1a>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	b103      	cbz	r3, 8008932 <_sbrk_r+0x1a>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	20005080 	.word	0x20005080

08008938 <siprintf>:
 8008938:	b40e      	push	{r1, r2, r3}
 800893a:	b500      	push	{lr}
 800893c:	b09c      	sub	sp, #112	; 0x70
 800893e:	ab1d      	add	r3, sp, #116	; 0x74
 8008940:	9002      	str	r0, [sp, #8]
 8008942:	9006      	str	r0, [sp, #24]
 8008944:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008948:	4809      	ldr	r0, [pc, #36]	; (8008970 <siprintf+0x38>)
 800894a:	9107      	str	r1, [sp, #28]
 800894c:	9104      	str	r1, [sp, #16]
 800894e:	4909      	ldr	r1, [pc, #36]	; (8008974 <siprintf+0x3c>)
 8008950:	f853 2b04 	ldr.w	r2, [r3], #4
 8008954:	9105      	str	r1, [sp, #20]
 8008956:	6800      	ldr	r0, [r0, #0]
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	a902      	add	r1, sp, #8
 800895c:	f003 ff5a 	bl	800c814 <_svfiprintf_r>
 8008960:	9b02      	ldr	r3, [sp, #8]
 8008962:	2200      	movs	r2, #0
 8008964:	701a      	strb	r2, [r3, #0]
 8008966:	b01c      	add	sp, #112	; 0x70
 8008968:	f85d eb04 	ldr.w	lr, [sp], #4
 800896c:	b003      	add	sp, #12
 800896e:	4770      	bx	lr
 8008970:	20000020 	.word	0x20000020
 8008974:	ffff0208 	.word	0xffff0208

08008978 <siscanf>:
 8008978:	b40e      	push	{r1, r2, r3}
 800897a:	b510      	push	{r4, lr}
 800897c:	b09f      	sub	sp, #124	; 0x7c
 800897e:	ac21      	add	r4, sp, #132	; 0x84
 8008980:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008984:	f854 2b04 	ldr.w	r2, [r4], #4
 8008988:	9201      	str	r2, [sp, #4]
 800898a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800898e:	9004      	str	r0, [sp, #16]
 8008990:	9008      	str	r0, [sp, #32]
 8008992:	f7f7 fc2f 	bl	80001f4 <strlen>
 8008996:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <siscanf+0x50>)
 8008998:	9005      	str	r0, [sp, #20]
 800899a:	9009      	str	r0, [sp, #36]	; 0x24
 800899c:	930d      	str	r3, [sp, #52]	; 0x34
 800899e:	480b      	ldr	r0, [pc, #44]	; (80089cc <siscanf+0x54>)
 80089a0:	9a01      	ldr	r2, [sp, #4]
 80089a2:	6800      	ldr	r0, [r0, #0]
 80089a4:	9403      	str	r4, [sp, #12]
 80089a6:	2300      	movs	r3, #0
 80089a8:	9311      	str	r3, [sp, #68]	; 0x44
 80089aa:	9316      	str	r3, [sp, #88]	; 0x58
 80089ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80089b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80089b4:	a904      	add	r1, sp, #16
 80089b6:	4623      	mov	r3, r4
 80089b8:	f004 f886 	bl	800cac8 <__ssvfiscanf_r>
 80089bc:	b01f      	add	sp, #124	; 0x7c
 80089be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089c2:	b003      	add	sp, #12
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	080089f3 	.word	0x080089f3
 80089cc:	20000020 	.word	0x20000020

080089d0 <__sread>:
 80089d0:	b510      	push	{r4, lr}
 80089d2:	460c      	mov	r4, r1
 80089d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d8:	f004 fe28 	bl	800d62c <_read_r>
 80089dc:	2800      	cmp	r0, #0
 80089de:	bfab      	itete	ge
 80089e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089e2:	89a3      	ldrhlt	r3, [r4, #12]
 80089e4:	181b      	addge	r3, r3, r0
 80089e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089ea:	bfac      	ite	ge
 80089ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80089ee:	81a3      	strhlt	r3, [r4, #12]
 80089f0:	bd10      	pop	{r4, pc}

080089f2 <__seofread>:
 80089f2:	2000      	movs	r0, #0
 80089f4:	4770      	bx	lr

080089f6 <__swrite>:
 80089f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089fa:	461f      	mov	r7, r3
 80089fc:	898b      	ldrh	r3, [r1, #12]
 80089fe:	05db      	lsls	r3, r3, #23
 8008a00:	4605      	mov	r5, r0
 8008a02:	460c      	mov	r4, r1
 8008a04:	4616      	mov	r6, r2
 8008a06:	d505      	bpl.n	8008a14 <__swrite+0x1e>
 8008a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f003 f920 	bl	800bc54 <_lseek_r>
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a1e:	81a3      	strh	r3, [r4, #12]
 8008a20:	4632      	mov	r2, r6
 8008a22:	463b      	mov	r3, r7
 8008a24:	4628      	mov	r0, r5
 8008a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a2a:	f002 bbbb 	b.w	800b1a4 <_write_r>

08008a2e <__sseek>:
 8008a2e:	b510      	push	{r4, lr}
 8008a30:	460c      	mov	r4, r1
 8008a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a36:	f003 f90d 	bl	800bc54 <_lseek_r>
 8008a3a:	1c43      	adds	r3, r0, #1
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	bf15      	itete	ne
 8008a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a4a:	81a3      	strheq	r3, [r4, #12]
 8008a4c:	bf18      	it	ne
 8008a4e:	81a3      	strhne	r3, [r4, #12]
 8008a50:	bd10      	pop	{r4, pc}

08008a52 <__sclose>:
 8008a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a56:	f002 bc29 	b.w	800b2ac <_close_r>

08008a5a <strchr>:
 8008a5a:	b2c9      	uxtb	r1, r1
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a62:	b11a      	cbz	r2, 8008a6c <strchr+0x12>
 8008a64:	428a      	cmp	r2, r1
 8008a66:	d1f9      	bne.n	8008a5c <strchr+0x2>
 8008a68:	4618      	mov	r0, r3
 8008a6a:	4770      	bx	lr
 8008a6c:	2900      	cmp	r1, #0
 8008a6e:	bf18      	it	ne
 8008a70:	2300      	movne	r3, #0
 8008a72:	e7f9      	b.n	8008a68 <strchr+0xe>

08008a74 <strcpy>:
 8008a74:	4603      	mov	r3, r0
 8008a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a7a:	f803 2b01 	strb.w	r2, [r3], #1
 8008a7e:	2a00      	cmp	r2, #0
 8008a80:	d1f9      	bne.n	8008a76 <strcpy+0x2>
 8008a82:	4770      	bx	lr

08008a84 <iso_year_adjust>:
 8008a84:	6941      	ldr	r1, [r0, #20]
 8008a86:	2900      	cmp	r1, #0
 8008a88:	f240 736c 	movw	r3, #1900	; 0x76c
 8008a8c:	bfa8      	it	ge
 8008a8e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8008a92:	18ca      	adds	r2, r1, r3
 8008a94:	078b      	lsls	r3, r1, #30
 8008a96:	d105      	bne.n	8008aa4 <iso_year_adjust+0x20>
 8008a98:	2164      	movs	r1, #100	; 0x64
 8008a9a:	fb92 f3f1 	sdiv	r3, r2, r1
 8008a9e:	fb01 2313 	mls	r3, r1, r3, r2
 8008aa2:	b9db      	cbnz	r3, 8008adc <iso_year_adjust+0x58>
 8008aa4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008aa8:	fb92 f3f1 	sdiv	r3, r2, r1
 8008aac:	fb01 2313 	mls	r3, r1, r3, r2
 8008ab0:	fab3 f383 	clz	r3, r3
 8008ab4:	095b      	lsrs	r3, r3, #5
 8008ab6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8008aba:	0040      	lsls	r0, r0, #1
 8008abc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8008ac0:	4418      	add	r0, r3
 8008ac2:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8008ac6:	4298      	cmp	r0, r3
 8008ac8:	d03a      	beq.n	8008b40 <iso_year_adjust+0xbc>
 8008aca:	dc21      	bgt.n	8008b10 <iso_year_adjust+0x8c>
 8008acc:	2801      	cmp	r0, #1
 8008ace:	dc1a      	bgt.n	8008b06 <iso_year_adjust+0x82>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	bfb4      	ite	lt
 8008ad4:	2000      	movlt	r0, #0
 8008ad6:	f04f 30ff 	movge.w	r0, #4294967295
 8008ada:	4770      	bx	lr
 8008adc:	2301      	movs	r3, #1
 8008ade:	e7ea      	b.n	8008ab6 <iso_year_adjust+0x32>
 8008ae0:	2817      	cmp	r0, #23
 8008ae2:	d813      	bhi.n	8008b0c <iso_year_adjust+0x88>
 8008ae4:	e8df f000 	tbb	[pc, r0]
 8008ae8:	0c0c0c0c 	.word	0x0c0c0c0c
 8008aec:	0c0c1212 	.word	0x0c0c1212
 8008af0:	12121212 	.word	0x12121212
 8008af4:	12121212 	.word	0x12121212
 8008af8:	0c0c1212 	.word	0x0c0c1212
 8008afc:	0c0c1212 	.word	0x0c0c1212
 8008b00:	f04f 30ff 	mov.w	r0, #4294967295
 8008b04:	4770      	bx	lr
 8008b06:	380a      	subs	r0, #10
 8008b08:	2817      	cmp	r0, #23
 8008b0a:	d9e9      	bls.n	8008ae0 <iso_year_adjust+0x5c>
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	4770      	bx	lr
 8008b10:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8008b14:	4298      	cmp	r0, r3
 8008b16:	dc06      	bgt.n	8008b26 <iso_year_adjust+0xa2>
 8008b18:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8008b1c:	4298      	cmp	r0, r3
 8008b1e:	bfd4      	ite	le
 8008b20:	2000      	movle	r0, #0
 8008b22:	2001      	movgt	r0, #1
 8008b24:	4770      	bx	lr
 8008b26:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8008b2a:	3802      	subs	r0, #2
 8008b2c:	2815      	cmp	r0, #21
 8008b2e:	d8ed      	bhi.n	8008b0c <iso_year_adjust+0x88>
 8008b30:	2301      	movs	r3, #1
 8008b32:	4083      	lsls	r3, r0
 8008b34:	4803      	ldr	r0, [pc, #12]	; (8008b44 <iso_year_adjust+0xc0>)
 8008b36:	4018      	ands	r0, r3
 8008b38:	3800      	subs	r0, #0
 8008b3a:	bf18      	it	ne
 8008b3c:	2001      	movne	r0, #1
 8008b3e:	4770      	bx	lr
 8008b40:	2001      	movs	r0, #1
 8008b42:	4770      	bx	lr
 8008b44:	002a001f 	.word	0x002a001f

08008b48 <__strftime>:
 8008b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	b091      	sub	sp, #68	; 0x44
 8008b4e:	461d      	mov	r5, r3
 8008b50:	2300      	movs	r3, #0
 8008b52:	4681      	mov	r9, r0
 8008b54:	4688      	mov	r8, r1
 8008b56:	9304      	str	r3, [sp, #16]
 8008b58:	461c      	mov	r4, r3
 8008b5a:	7813      	ldrb	r3, [r2, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 84d1 	beq.w	8009504 <__strftime+0x9bc>
 8008b62:	2b25      	cmp	r3, #37	; 0x25
 8008b64:	d11b      	bne.n	8008b9e <__strftime+0x56>
 8008b66:	7857      	ldrb	r7, [r2, #1]
 8008b68:	2f30      	cmp	r7, #48	; 0x30
 8008b6a:	d024      	beq.n	8008bb6 <__strftime+0x6e>
 8008b6c:	2f2b      	cmp	r7, #43	; 0x2b
 8008b6e:	d022      	beq.n	8008bb6 <__strftime+0x6e>
 8008b70:	f102 0b01 	add.w	fp, r2, #1
 8008b74:	2700      	movs	r7, #0
 8008b76:	f89b 3000 	ldrb.w	r3, [fp]
 8008b7a:	3b31      	subs	r3, #49	; 0x31
 8008b7c:	2b08      	cmp	r3, #8
 8008b7e:	d81d      	bhi.n	8008bbc <__strftime+0x74>
 8008b80:	4658      	mov	r0, fp
 8008b82:	220a      	movs	r2, #10
 8008b84:	a908      	add	r1, sp, #32
 8008b86:	f002 f87b 	bl	800ac80 <strtoul>
 8008b8a:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008b8e:	4606      	mov	r6, r0
 8008b90:	f89b 3000 	ldrb.w	r3, [fp]
 8008b94:	2b45      	cmp	r3, #69	; 0x45
 8008b96:	d113      	bne.n	8008bc0 <__strftime+0x78>
 8008b98:	f10b 0b01 	add.w	fp, fp, #1
 8008b9c:	e012      	b.n	8008bc4 <__strftime+0x7c>
 8008b9e:	f108 31ff 	add.w	r1, r8, #4294967295
 8008ba2:	42a1      	cmp	r1, r4
 8008ba4:	d802      	bhi.n	8008bac <__strftime+0x64>
 8008ba6:	2400      	movs	r4, #0
 8008ba8:	f000 bcb2 	b.w	8009510 <__strftime+0x9c8>
 8008bac:	f809 3004 	strb.w	r3, [r9, r4]
 8008bb0:	3201      	adds	r2, #1
 8008bb2:	3401      	adds	r4, #1
 8008bb4:	e7d1      	b.n	8008b5a <__strftime+0x12>
 8008bb6:	f102 0b02 	add.w	fp, r2, #2
 8008bba:	e7dc      	b.n	8008b76 <__strftime+0x2e>
 8008bbc:	2600      	movs	r6, #0
 8008bbe:	e7e7      	b.n	8008b90 <__strftime+0x48>
 8008bc0:	2b4f      	cmp	r3, #79	; 0x4f
 8008bc2:	d0e9      	beq.n	8008b98 <__strftime+0x50>
 8008bc4:	f89b 0000 	ldrb.w	r0, [fp]
 8008bc8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8008bcc:	2b55      	cmp	r3, #85	; 0x55
 8008bce:	d8ea      	bhi.n	8008ba6 <__strftime+0x5e>
 8008bd0:	a201      	add	r2, pc, #4	; (adr r2, 8008bd8 <__strftime+0x90>)
 8008bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd6:	bf00      	nop
 8008bd8:	080094f7 	.word	0x080094f7
 8008bdc:	08008ba7 	.word	0x08008ba7
 8008be0:	08008ba7 	.word	0x08008ba7
 8008be4:	08008ba7 	.word	0x08008ba7
 8008be8:	08008ba7 	.word	0x08008ba7
 8008bec:	08008ba7 	.word	0x08008ba7
 8008bf0:	08008ba7 	.word	0x08008ba7
 8008bf4:	08008ba7 	.word	0x08008ba7
 8008bf8:	08008ba7 	.word	0x08008ba7
 8008bfc:	08008ba7 	.word	0x08008ba7
 8008c00:	08008ba7 	.word	0x08008ba7
 8008c04:	08008ba7 	.word	0x08008ba7
 8008c08:	08008ba7 	.word	0x08008ba7
 8008c0c:	08008ba7 	.word	0x08008ba7
 8008c10:	08008ba7 	.word	0x08008ba7
 8008c14:	08008ba7 	.word	0x08008ba7
 8008c18:	08008ba7 	.word	0x08008ba7
 8008c1c:	08008ba7 	.word	0x08008ba7
 8008c20:	08008ba7 	.word	0x08008ba7
 8008c24:	08008ba7 	.word	0x08008ba7
 8008c28:	08008ba7 	.word	0x08008ba7
 8008c2c:	08008ba7 	.word	0x08008ba7
 8008c30:	08008ba7 	.word	0x08008ba7
 8008c34:	08008ba7 	.word	0x08008ba7
 8008c38:	08008ba7 	.word	0x08008ba7
 8008c3c:	08008ba7 	.word	0x08008ba7
 8008c40:	08008ba7 	.word	0x08008ba7
 8008c44:	08008ba7 	.word	0x08008ba7
 8008c48:	08008d6f 	.word	0x08008d6f
 8008c4c:	08008dc9 	.word	0x08008dc9
 8008c50:	08008e3f 	.word	0x08008e3f
 8008c54:	08008ed9 	.word	0x08008ed9
 8008c58:	08008ba7 	.word	0x08008ba7
 8008c5c:	08008f25 	.word	0x08008f25
 8008c60:	08009005 	.word	0x08009005
 8008c64:	08009107 	.word	0x08009107
 8008c68:	08009115 	.word	0x08009115
 8008c6c:	08008ba7 	.word	0x08008ba7
 8008c70:	08008ba7 	.word	0x08008ba7
 8008c74:	08008ba7 	.word	0x08008ba7
 8008c78:	08009145 	.word	0x08009145
 8008c7c:	08008ba7 	.word	0x08008ba7
 8008c80:	08008ba7 	.word	0x08008ba7
 8008c84:	0800915d 	.word	0x0800915d
 8008c88:	08008ba7 	.word	0x08008ba7
 8008c8c:	080091ab 	.word	0x080091ab
 8008c90:	080092c1 	.word	0x080092c1
 8008c94:	080092d3 	.word	0x080092d3
 8008c98:	0800932b 	.word	0x0800932b
 8008c9c:	0800933b 	.word	0x0800933b
 8008ca0:	080093b1 	.word	0x080093b1
 8008ca4:	08008e37 	.word	0x08008e37
 8008ca8:	080093e5 	.word	0x080093e5
 8008cac:	080094a3 	.word	0x080094a3
 8008cb0:	08008ba7 	.word	0x08008ba7
 8008cb4:	08008ba7 	.word	0x08008ba7
 8008cb8:	08008ba7 	.word	0x08008ba7
 8008cbc:	08008ba7 	.word	0x08008ba7
 8008cc0:	08008ba7 	.word	0x08008ba7
 8008cc4:	08008ba7 	.word	0x08008ba7
 8008cc8:	08008d31 	.word	0x08008d31
 8008ccc:	08008d9d 	.word	0x08008d9d
 8008cd0:	08008df7 	.word	0x08008df7
 8008cd4:	08008eb1 	.word	0x08008eb1
 8008cd8:	08008eb1 	.word	0x08008eb1
 8008cdc:	08008ba7 	.word	0x08008ba7
 8008ce0:	08008f6d 	.word	0x08008f6d
 8008ce4:	08008d9d 	.word	0x08008d9d
 8008ce8:	08008ba7 	.word	0x08008ba7
 8008cec:	08009137 	.word	0x08009137
 8008cf0:	08009107 	.word	0x08009107
 8008cf4:	08009115 	.word	0x08009115
 8008cf8:	0800913f 	.word	0x0800913f
 8008cfc:	08009149 	.word	0x08009149
 8008d00:	08008ba7 	.word	0x08008ba7
 8008d04:	0800915d 	.word	0x0800915d
 8008d08:	08008ba7 	.word	0x08008ba7
 8008d0c:	08008e27 	.word	0x08008e27
 8008d10:	080091c1 	.word	0x080091c1
 8008d14:	080092c5 	.word	0x080092c5
 8008d18:	0800930d 	.word	0x0800930d
 8008d1c:	08008ba7 	.word	0x08008ba7
 8008d20:	080093a1 	.word	0x080093a1
 8008d24:	08008e2f 	.word	0x08008e2f
 8008d28:	080093c9 	.word	0x080093c9
 8008d2c:	08009435 	.word	0x08009435
 8008d30:	69ab      	ldr	r3, [r5, #24]
 8008d32:	4aa7      	ldr	r2, [pc, #668]	; (8008fd0 <__strftime+0x488>)
 8008d34:	3318      	adds	r3, #24
 8008d36:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f7f7 fa5a 	bl	80001f4 <strlen>
 8008d40:	3e01      	subs	r6, #1
 8008d42:	4420      	add	r0, r4
 8008d44:	f108 33ff 	add.w	r3, r8, #4294967295
 8008d48:	42a0      	cmp	r0, r4
 8008d4a:	d107      	bne.n	8008d5c <__strftime+0x214>
 8008d4c:	f89b 3000 	ldrb.w	r3, [fp]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 83d7 	beq.w	8009504 <__strftime+0x9bc>
 8008d56:	f10b 0201 	add.w	r2, fp, #1
 8008d5a:	e6fe      	b.n	8008b5a <__strftime+0x12>
 8008d5c:	42a3      	cmp	r3, r4
 8008d5e:	f67f af22 	bls.w	8008ba6 <__strftime+0x5e>
 8008d62:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8008d66:	f809 2004 	strb.w	r2, [r9, r4]
 8008d6a:	3401      	adds	r4, #1
 8008d6c:	e7ec      	b.n	8008d48 <__strftime+0x200>
 8008d6e:	69aa      	ldr	r2, [r5, #24]
 8008d70:	4b97      	ldr	r3, [pc, #604]	; (8008fd0 <__strftime+0x488>)
 8008d72:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008d76:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f7f7 fa3b 	bl	80001f4 <strlen>
 8008d7e:	3e01      	subs	r6, #1
 8008d80:	4420      	add	r0, r4
 8008d82:	f108 33ff 	add.w	r3, r8, #4294967295
 8008d86:	42a0      	cmp	r0, r4
 8008d88:	d0e0      	beq.n	8008d4c <__strftime+0x204>
 8008d8a:	42a3      	cmp	r3, r4
 8008d8c:	f67f af0b 	bls.w	8008ba6 <__strftime+0x5e>
 8008d90:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8008d94:	f809 2004 	strb.w	r2, [r9, r4]
 8008d98:	3401      	adds	r4, #1
 8008d9a:	e7f4      	b.n	8008d86 <__strftime+0x23e>
 8008d9c:	4b8c      	ldr	r3, [pc, #560]	; (8008fd0 <__strftime+0x488>)
 8008d9e:	692a      	ldr	r2, [r5, #16]
 8008da0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8008da4:	4630      	mov	r0, r6
 8008da6:	f7f7 fa25 	bl	80001f4 <strlen>
 8008daa:	3e01      	subs	r6, #1
 8008dac:	4420      	add	r0, r4
 8008dae:	f108 33ff 	add.w	r3, r8, #4294967295
 8008db2:	42a0      	cmp	r0, r4
 8008db4:	d0ca      	beq.n	8008d4c <__strftime+0x204>
 8008db6:	42a3      	cmp	r3, r4
 8008db8:	f67f aef5 	bls.w	8008ba6 <__strftime+0x5e>
 8008dbc:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8008dc0:	f809 2004 	strb.w	r2, [r9, r4]
 8008dc4:	3401      	adds	r4, #1
 8008dc6:	e7f4      	b.n	8008db2 <__strftime+0x26a>
 8008dc8:	692b      	ldr	r3, [r5, #16]
 8008dca:	4a81      	ldr	r2, [pc, #516]	; (8008fd0 <__strftime+0x488>)
 8008dcc:	330c      	adds	r3, #12
 8008dce:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f7f7 fa0e 	bl	80001f4 <strlen>
 8008dd8:	3e01      	subs	r6, #1
 8008dda:	4420      	add	r0, r4
 8008ddc:	f108 33ff 	add.w	r3, r8, #4294967295
 8008de0:	42a0      	cmp	r0, r4
 8008de2:	d0b3      	beq.n	8008d4c <__strftime+0x204>
 8008de4:	42a3      	cmp	r3, r4
 8008de6:	f67f aede 	bls.w	8008ba6 <__strftime+0x5e>
 8008dea:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8008dee:	f809 2004 	strb.w	r2, [r9, r4]
 8008df2:	3401      	adds	r4, #1
 8008df4:	e7f4      	b.n	8008de0 <__strftime+0x298>
 8008df6:	4b76      	ldr	r3, [pc, #472]	; (8008fd0 <__strftime+0x488>)
 8008df8:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7f7 f9f9 	bl	80001f4 <strlen>
 8008e02:	7833      	ldrb	r3, [r6, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d0a1      	beq.n	8008d4c <__strftime+0x204>
 8008e08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	462b      	mov	r3, r5
 8008e10:	eba8 0104 	sub.w	r1, r8, r4
 8008e14:	eb09 0004 	add.w	r0, r9, r4
 8008e18:	f7ff fe96 	bl	8008b48 <__strftime>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	f77f aec2 	ble.w	8008ba6 <__strftime+0x5e>
 8008e22:	4404      	add	r4, r0
 8008e24:	e792      	b.n	8008d4c <__strftime+0x204>
 8008e26:	4b6a      	ldr	r3, [pc, #424]	; (8008fd0 <__strftime+0x488>)
 8008e28:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 8008e2c:	e7e6      	b.n	8008dfc <__strftime+0x2b4>
 8008e2e:	4b68      	ldr	r3, [pc, #416]	; (8008fd0 <__strftime+0x488>)
 8008e30:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 8008e34:	e7e2      	b.n	8008dfc <__strftime+0x2b4>
 8008e36:	4b66      	ldr	r3, [pc, #408]	; (8008fd0 <__strftime+0x488>)
 8008e38:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8008e3c:	e7de      	b.n	8008dfc <__strftime+0x2b4>
 8008e3e:	4965      	ldr	r1, [pc, #404]	; (8008fd4 <__strftime+0x48c>)
 8008e40:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8008e44:	458a      	cmp	sl, r1
 8008e46:	bfac      	ite	ge
 8008e48:	2100      	movge	r1, #0
 8008e4a:	2101      	movlt	r1, #1
 8008e4c:	f1ba 0f00 	cmp.w	sl, #0
 8008e50:	db0e      	blt.n	8008e70 <__strftime+0x328>
 8008e52:	2064      	movs	r0, #100	; 0x64
 8008e54:	fb9a f0f0 	sdiv	r0, sl, r0
 8008e58:	3013      	adds	r0, #19
 8008e5a:	b19f      	cbz	r7, 8008e84 <__strftime+0x33c>
 8008e5c:	2863      	cmp	r0, #99	; 0x63
 8008e5e:	dd25      	ble.n	8008eac <__strftime+0x364>
 8008e60:	4a5d      	ldr	r2, [pc, #372]	; (8008fd8 <__strftime+0x490>)
 8008e62:	4b5e      	ldr	r3, [pc, #376]	; (8008fdc <__strftime+0x494>)
 8008e64:	2f2b      	cmp	r7, #43	; 0x2b
 8008e66:	bf14      	ite	ne
 8008e68:	4617      	movne	r7, r2
 8008e6a:	461f      	moveq	r7, r3
 8008e6c:	4a5c      	ldr	r2, [pc, #368]	; (8008fe0 <__strftime+0x498>)
 8008e6e:	e00b      	b.n	8008e88 <__strftime+0x340>
 8008e70:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8008e74:	9105      	str	r1, [sp, #20]
 8008e76:	f002 fa15 	bl	800b2a4 <abs>
 8008e7a:	2364      	movs	r3, #100	; 0x64
 8008e7c:	9905      	ldr	r1, [sp, #20]
 8008e7e:	fb90 f0f3 	sdiv	r0, r0, r3
 8008e82:	e7ea      	b.n	8008e5a <__strftime+0x312>
 8008e84:	4f54      	ldr	r7, [pc, #336]	; (8008fd8 <__strftime+0x490>)
 8008e86:	4a57      	ldr	r2, [pc, #348]	; (8008fe4 <__strftime+0x49c>)
 8008e88:	4b57      	ldr	r3, [pc, #348]	; (8008fe8 <__strftime+0x4a0>)
 8008e8a:	9001      	str	r0, [sp, #4]
 8008e8c:	2e02      	cmp	r6, #2
 8008e8e:	bf2c      	ite	cs
 8008e90:	ebc1 0606 	rsbcs	r6, r1, r6
 8008e94:	f1c1 0602 	rsbcc	r6, r1, #2
 8008e98:	494e      	ldr	r1, [pc, #312]	; (8008fd4 <__strftime+0x48c>)
 8008e9a:	9600      	str	r6, [sp, #0]
 8008e9c:	458a      	cmp	sl, r1
 8008e9e:	bfa8      	it	ge
 8008ea0:	463b      	movge	r3, r7
 8008ea2:	eba8 0104 	sub.w	r1, r8, r4
 8008ea6:	eb09 0004 	add.w	r0, r9, r4
 8008eaa:	e02a      	b.n	8008f02 <__strftime+0x3ba>
 8008eac:	4f4a      	ldr	r7, [pc, #296]	; (8008fd8 <__strftime+0x490>)
 8008eae:	e7dd      	b.n	8008e6c <__strftime+0x324>
 8008eb0:	494e      	ldr	r1, [pc, #312]	; (8008fec <__strftime+0x4a4>)
 8008eb2:	4a4f      	ldr	r2, [pc, #316]	; (8008ff0 <__strftime+0x4a8>)
 8008eb4:	68eb      	ldr	r3, [r5, #12]
 8008eb6:	2864      	cmp	r0, #100	; 0x64
 8008eb8:	bf08      	it	eq
 8008eba:	460a      	moveq	r2, r1
 8008ebc:	eba8 0104 	sub.w	r1, r8, r4
 8008ec0:	eb09 0004 	add.w	r0, r9, r4
 8008ec4:	f004 fc06 	bl	800d6d4 <sniprintf>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	f6ff ae6c 	blt.w	8008ba6 <__strftime+0x5e>
 8008ece:	4404      	add	r4, r0
 8008ed0:	45a0      	cmp	r8, r4
 8008ed2:	f63f af3b 	bhi.w	8008d4c <__strftime+0x204>
 8008ed6:	e666      	b.n	8008ba6 <__strftime+0x5e>
 8008ed8:	6968      	ldr	r0, [r5, #20]
 8008eda:	692b      	ldr	r3, [r5, #16]
 8008edc:	68ef      	ldr	r7, [r5, #12]
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	eb09 0604 	add.w	r6, r9, r4
 8008ee4:	eba8 0104 	sub.w	r1, r8, r4
 8008ee8:	f103 0301 	add.w	r3, r3, #1
 8008eec:	db0c      	blt.n	8008f08 <__strftime+0x3c0>
 8008eee:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8008ef2:	fb90 f2fc 	sdiv	r2, r0, ip
 8008ef6:	fb0c 0212 	mls	r2, ip, r2, r0
 8008efa:	e9cd 7200 	strd	r7, r2, [sp]
 8008efe:	4a3d      	ldr	r2, [pc, #244]	; (8008ff4 <__strftime+0x4ac>)
 8008f00:	4630      	mov	r0, r6
 8008f02:	f004 fbe7 	bl	800d6d4 <sniprintf>
 8008f06:	e7df      	b.n	8008ec8 <__strftime+0x380>
 8008f08:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8008f0c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8008f10:	f002 f9c8 	bl	800b2a4 <abs>
 8008f14:	2264      	movs	r2, #100	; 0x64
 8008f16:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8008f1a:	fb90 fcf2 	sdiv	ip, r0, r2
 8008f1e:	fb0c 0212 	mls	r2, ip, r2, r0
 8008f22:	e7ea      	b.n	8008efa <__strftime+0x3b2>
 8008f24:	2325      	movs	r3, #37	; 0x25
 8008f26:	f88d 3020 	strb.w	r3, [sp, #32]
 8008f2a:	b187      	cbz	r7, 8008f4e <__strftime+0x406>
 8008f2c:	2e06      	cmp	r6, #6
 8008f2e:	bf38      	it	cc
 8008f30:	2606      	movcc	r6, #6
 8008f32:	1fb3      	subs	r3, r6, #6
 8008f34:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8008f38:	d10c      	bne.n	8008f54 <__strftime+0x40c>
 8008f3a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8008f3e:	492e      	ldr	r1, [pc, #184]	; (8008ff8 <__strftime+0x4b0>)
 8008f40:	f7ff fd98 	bl	8008a74 <strcpy>
 8008f44:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	aa08      	add	r2, sp, #32
 8008f4a:	462b      	mov	r3, r5
 8008f4c:	e760      	b.n	8008e10 <__strftime+0x2c8>
 8008f4e:	272b      	movs	r7, #43	; 0x2b
 8008f50:	260a      	movs	r6, #10
 8008f52:	e7ee      	b.n	8008f32 <__strftime+0x3ea>
 8008f54:	4a29      	ldr	r2, [pc, #164]	; (8008ffc <__strftime+0x4b4>)
 8008f56:	211e      	movs	r1, #30
 8008f58:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8008f5c:	f004 fbba 	bl	800d6d4 <sniprintf>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	ddea      	ble.n	8008f3a <__strftime+0x3f2>
 8008f64:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8008f68:	4418      	add	r0, r3
 8008f6a:	e7e8      	b.n	8008f3e <__strftime+0x3f6>
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	f7ff fd89 	bl	8008a84 <iso_year_adjust>
 8008f72:	4606      	mov	r6, r0
 8008f74:	6968      	ldr	r0, [r5, #20]
 8008f76:	2800      	cmp	r0, #0
 8008f78:	db11      	blt.n	8008f9e <__strftime+0x456>
 8008f7a:	2264      	movs	r2, #100	; 0x64
 8008f7c:	fb90 f3f2 	sdiv	r3, r0, r2
 8008f80:	fb02 0313 	mls	r3, r2, r3, r0
 8008f84:	441e      	add	r6, r3
 8008f86:	2364      	movs	r3, #100	; 0x64
 8008f88:	fb96 f0f3 	sdiv	r0, r6, r3
 8008f8c:	fb03 6610 	mls	r6, r3, r0, r6
 8008f90:	441e      	add	r6, r3
 8008f92:	fbb6 f2f3 	udiv	r2, r6, r3
 8008f96:	fb03 6312 	mls	r3, r3, r2, r6
 8008f9a:	4a14      	ldr	r2, [pc, #80]	; (8008fec <__strftime+0x4a4>)
 8008f9c:	e78e      	b.n	8008ebc <__strftime+0x374>
 8008f9e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8008fa2:	f002 f97f 	bl	800b2a4 <abs>
 8008fa6:	2364      	movs	r3, #100	; 0x64
 8008fa8:	2e00      	cmp	r6, #0
 8008faa:	fb90 f2f3 	sdiv	r2, r0, r3
 8008fae:	fb02 0313 	mls	r3, r2, r3, r0
 8008fb2:	da05      	bge.n	8008fc0 <__strftime+0x478>
 8008fb4:	6969      	ldr	r1, [r5, #20]
 8008fb6:	4a12      	ldr	r2, [pc, #72]	; (8009000 <__strftime+0x4b8>)
 8008fb8:	4291      	cmp	r1, r2
 8008fba:	bfb8      	it	lt
 8008fbc:	2601      	movlt	r6, #1
 8008fbe:	e7e1      	b.n	8008f84 <__strftime+0x43c>
 8008fc0:	d0e0      	beq.n	8008f84 <__strftime+0x43c>
 8008fc2:	6969      	ldr	r1, [r5, #20]
 8008fc4:	4a03      	ldr	r2, [pc, #12]	; (8008fd4 <__strftime+0x48c>)
 8008fc6:	4291      	cmp	r1, r2
 8008fc8:	bfb8      	it	lt
 8008fca:	f04f 36ff 	movlt.w	r6, #4294967295
 8008fce:	e7d9      	b.n	8008f84 <__strftime+0x43c>
 8008fd0:	0800e144 	.word	0x0800e144
 8008fd4:	fffff894 	.word	0xfffff894
 8008fd8:	0800e56d 	.word	0x0800e56d
 8008fdc:	0800df37 	.word	0x0800df37
 8008fe0:	0800df2f 	.word	0x0800df2f
 8008fe4:	0800df28 	.word	0x0800df28
 8008fe8:	0800e518 	.word	0x0800e518
 8008fec:	0800df47 	.word	0x0800df47
 8008ff0:	0800df39 	.word	0x0800df39
 8008ff4:	0800df3d 	.word	0x0800df3d
 8008ff8:	0800df83 	.word	0x0800df83
 8008ffc:	0800df4c 	.word	0x0800df4c
 8009000:	fffff895 	.word	0xfffff895
 8009004:	4bb6      	ldr	r3, [pc, #728]	; (80092e0 <__strftime+0x798>)
 8009006:	6969      	ldr	r1, [r5, #20]
 8009008:	4299      	cmp	r1, r3
 800900a:	bfac      	ite	ge
 800900c:	2300      	movge	r3, #0
 800900e:	2301      	movlt	r3, #1
 8009010:	4628      	mov	r0, r5
 8009012:	e9cd 3105 	strd	r3, r1, [sp, #20]
 8009016:	f7ff fd35 	bl	8008a84 <iso_year_adjust>
 800901a:	9906      	ldr	r1, [sp, #24]
 800901c:	2900      	cmp	r1, #0
 800901e:	4682      	mov	sl, r0
 8009020:	db27      	blt.n	8009072 <__strftime+0x52a>
 8009022:	2264      	movs	r2, #100	; 0x64
 8009024:	fb91 f2f2 	sdiv	r2, r1, r2
 8009028:	3213      	adds	r2, #19
 800902a:	6968      	ldr	r0, [r5, #20]
 800902c:	2800      	cmp	r0, #0
 800902e:	db2b      	blt.n	8009088 <__strftime+0x540>
 8009030:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8009034:	fb90 fefc 	sdiv	lr, r0, ip
 8009038:	fb0c 001e 	mls	r0, ip, lr, r0
 800903c:	f1ba 0f00 	cmp.w	sl, #0
 8009040:	da31      	bge.n	80090a6 <__strftime+0x55e>
 8009042:	6969      	ldr	r1, [r5, #20]
 8009044:	4ba7      	ldr	r3, [pc, #668]	; (80092e4 <__strftime+0x79c>)
 8009046:	4299      	cmp	r1, r3
 8009048:	db38      	blt.n	80090bc <__strftime+0x574>
 800904a:	eb0a 0300 	add.w	r3, sl, r0
 800904e:	1c59      	adds	r1, r3, #1
 8009050:	d139      	bne.n	80090c6 <__strftime+0x57e>
 8009052:	3a01      	subs	r2, #1
 8009054:	2363      	movs	r3, #99	; 0x63
 8009056:	2064      	movs	r0, #100	; 0x64
 8009058:	fb00 3202 	mla	r2, r0, r2, r3
 800905c:	9b05      	ldr	r3, [sp, #20]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d036      	beq.n	80090d0 <__strftime+0x588>
 8009062:	232d      	movs	r3, #45	; 0x2d
 8009064:	f88d 3020 	strb.w	r3, [sp, #32]
 8009068:	b106      	cbz	r6, 800906c <__strftime+0x524>
 800906a:	3e01      	subs	r6, #1
 800906c:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8009070:	e038      	b.n	80090e4 <__strftime+0x59c>
 8009072:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8009076:	9106      	str	r1, [sp, #24]
 8009078:	f002 f914 	bl	800b2a4 <abs>
 800907c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8009080:	9906      	ldr	r1, [sp, #24]
 8009082:	fb90 f2fc 	sdiv	r2, r0, ip
 8009086:	e7d0      	b.n	800902a <__strftime+0x4e2>
 8009088:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800908c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8009090:	f002 f908 	bl	800b2a4 <abs>
 8009094:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8009098:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800909c:	fb90 fefc 	sdiv	lr, r0, ip
 80090a0:	fb0e 001c 	mls	r0, lr, ip, r0
 80090a4:	e7ca      	b.n	800903c <__strftime+0x4f4>
 80090a6:	d0d0      	beq.n	800904a <__strftime+0x502>
 80090a8:	4b8d      	ldr	r3, [pc, #564]	; (80092e0 <__strftime+0x798>)
 80090aa:	4299      	cmp	r1, r3
 80090ac:	bfb4      	ite	lt
 80090ae:	2301      	movlt	r3, #1
 80090b0:	2300      	movge	r3, #0
 80090b2:	9305      	str	r3, [sp, #20]
 80090b4:	bfb8      	it	lt
 80090b6:	f04f 3aff 	movlt.w	sl, #4294967295
 80090ba:	e7c6      	b.n	800904a <__strftime+0x502>
 80090bc:	f04f 0a01 	mov.w	sl, #1
 80090c0:	f8cd a014 	str.w	sl, [sp, #20]
 80090c4:	e7c1      	b.n	800904a <__strftime+0x502>
 80090c6:	2b64      	cmp	r3, #100	; 0x64
 80090c8:	bf04      	itt	eq
 80090ca:	3201      	addeq	r2, #1
 80090cc:	2300      	moveq	r3, #0
 80090ce:	e7c2      	b.n	8009056 <__strftime+0x50e>
 80090d0:	2f2b      	cmp	r7, #43	; 0x2b
 80090d2:	d106      	bne.n	80090e2 <__strftime+0x59a>
 80090d4:	f242 730f 	movw	r3, #9999	; 0x270f
 80090d8:	429a      	cmp	r2, r3
 80090da:	d902      	bls.n	80090e2 <__strftime+0x59a>
 80090dc:	f88d 7020 	strb.w	r7, [sp, #32]
 80090e0:	e7c2      	b.n	8009068 <__strftime+0x520>
 80090e2:	ab08      	add	r3, sp, #32
 80090e4:	2125      	movs	r1, #37	; 0x25
 80090e6:	7019      	strb	r1, [r3, #0]
 80090e8:	b94f      	cbnz	r7, 80090fe <__strftime+0x5b6>
 80090ea:	1c58      	adds	r0, r3, #1
 80090ec:	497e      	ldr	r1, [pc, #504]	; (80092e8 <__strftime+0x7a0>)
 80090ee:	9205      	str	r2, [sp, #20]
 80090f0:	f7ff fcc0 	bl	8008a74 <strcpy>
 80090f4:	9a05      	ldr	r2, [sp, #20]
 80090f6:	9200      	str	r2, [sp, #0]
 80090f8:	4633      	mov	r3, r6
 80090fa:	aa08      	add	r2, sp, #32
 80090fc:	e059      	b.n	80091b2 <__strftime+0x66a>
 80090fe:	2130      	movs	r1, #48	; 0x30
 8009100:	1c98      	adds	r0, r3, #2
 8009102:	7059      	strb	r1, [r3, #1]
 8009104:	e7f2      	b.n	80090ec <__strftime+0x5a4>
 8009106:	4979      	ldr	r1, [pc, #484]	; (80092ec <__strftime+0x7a4>)
 8009108:	4a79      	ldr	r2, [pc, #484]	; (80092f0 <__strftime+0x7a8>)
 800910a:	68ab      	ldr	r3, [r5, #8]
 800910c:	286b      	cmp	r0, #107	; 0x6b
 800910e:	bf08      	it	eq
 8009110:	460a      	moveq	r2, r1
 8009112:	e6d3      	b.n	8008ebc <__strftime+0x374>
 8009114:	68ab      	ldr	r3, [r5, #8]
 8009116:	b163      	cbz	r3, 8009132 <__strftime+0x5ea>
 8009118:	2b0c      	cmp	r3, #12
 800911a:	d004      	beq.n	8009126 <__strftime+0x5de>
 800911c:	210c      	movs	r1, #12
 800911e:	fb93 f2f1 	sdiv	r2, r3, r1
 8009122:	fb01 3312 	mls	r3, r1, r2, r3
 8009126:	4972      	ldr	r1, [pc, #456]	; (80092f0 <__strftime+0x7a8>)
 8009128:	4a70      	ldr	r2, [pc, #448]	; (80092ec <__strftime+0x7a4>)
 800912a:	2849      	cmp	r0, #73	; 0x49
 800912c:	bf08      	it	eq
 800912e:	460a      	moveq	r2, r1
 8009130:	e6c4      	b.n	8008ebc <__strftime+0x374>
 8009132:	230c      	movs	r3, #12
 8009134:	e7f7      	b.n	8009126 <__strftime+0x5de>
 8009136:	69eb      	ldr	r3, [r5, #28]
 8009138:	4a6e      	ldr	r2, [pc, #440]	; (80092f4 <__strftime+0x7ac>)
 800913a:	3301      	adds	r3, #1
 800913c:	e6be      	b.n	8008ebc <__strftime+0x374>
 800913e:	692b      	ldr	r3, [r5, #16]
 8009140:	3301      	adds	r3, #1
 8009142:	e72a      	b.n	8008f9a <__strftime+0x452>
 8009144:	686b      	ldr	r3, [r5, #4]
 8009146:	e728      	b.n	8008f9a <__strftime+0x452>
 8009148:	f108 33ff 	add.w	r3, r8, #4294967295
 800914c:	42a3      	cmp	r3, r4
 800914e:	f67f ad2a 	bls.w	8008ba6 <__strftime+0x5e>
 8009152:	230a      	movs	r3, #10
 8009154:	f809 3004 	strb.w	r3, [r9, r4]
 8009158:	3401      	adds	r4, #1
 800915a:	e5f7      	b.n	8008d4c <__strftime+0x204>
 800915c:	68ab      	ldr	r3, [r5, #8]
 800915e:	2b0b      	cmp	r3, #11
 8009160:	bfcc      	ite	gt
 8009162:	22a4      	movgt	r2, #164	; 0xa4
 8009164:	22a0      	movle	r2, #160	; 0xa0
 8009166:	4b64      	ldr	r3, [pc, #400]	; (80092f8 <__strftime+0x7b0>)
 8009168:	4413      	add	r3, r2
 800916a:	685e      	ldr	r6, [r3, #4]
 800916c:	4630      	mov	r0, r6
 800916e:	f7f7 f841 	bl	80001f4 <strlen>
 8009172:	1e72      	subs	r2, r6, #1
 8009174:	4420      	add	r0, r4
 8009176:	f108 36ff 	add.w	r6, r8, #4294967295
 800917a:	42a0      	cmp	r0, r4
 800917c:	f43f ade6 	beq.w	8008d4c <__strftime+0x204>
 8009180:	42a6      	cmp	r6, r4
 8009182:	f67f ad10 	bls.w	8008ba6 <__strftime+0x5e>
 8009186:	f89b 1000 	ldrb.w	r1, [fp]
 800918a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800918e:	2950      	cmp	r1, #80	; 0x50
 8009190:	d107      	bne.n	80091a2 <__strftime+0x65a>
 8009192:	495a      	ldr	r1, [pc, #360]	; (80092fc <__strftime+0x7b4>)
 8009194:	5cc9      	ldrb	r1, [r1, r3]
 8009196:	f001 0103 	and.w	r1, r1, #3
 800919a:	2901      	cmp	r1, #1
 800919c:	bf08      	it	eq
 800919e:	3320      	addeq	r3, #32
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	f809 3004 	strb.w	r3, [r9, r4]
 80091a6:	3401      	adds	r4, #1
 80091a8:	e7e7      	b.n	800917a <__strftime+0x632>
 80091aa:	686b      	ldr	r3, [r5, #4]
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	4a54      	ldr	r2, [pc, #336]	; (8009300 <__strftime+0x7b8>)
 80091b0:	68ab      	ldr	r3, [r5, #8]
 80091b2:	eba8 0104 	sub.w	r1, r8, r4
 80091b6:	eb09 0004 	add.w	r0, r9, r4
 80091ba:	f004 fa8b 	bl	800d6d4 <sniprintf>
 80091be:	e683      	b.n	8008ec8 <__strftime+0x380>
 80091c0:	6a2b      	ldr	r3, [r5, #32]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	db79      	blt.n	80092ba <__strftime+0x772>
 80091c6:	f001 fe0d 	bl	800ade4 <__tz_lock>
 80091ca:	9b04      	ldr	r3, [sp, #16]
 80091cc:	b90b      	cbnz	r3, 80091d2 <__strftime+0x68a>
 80091ce:	f001 fe15 	bl	800adfc <_tzset_unlocked>
 80091d2:	f002 fc41 	bl	800ba58 <__gettzinfo>
 80091d6:	6a2b      	ldr	r3, [r5, #32]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	bfcc      	ite	gt
 80091dc:	2350      	movgt	r3, #80	; 0x50
 80091de:	2328      	movle	r3, #40	; 0x28
 80091e0:	58c3      	ldr	r3, [r0, r3]
 80091e2:	f1c3 0a00 	rsb	sl, r3, #0
 80091e6:	f001 fe03 	bl	800adf0 <__tz_unlock>
 80091ea:	2301      	movs	r3, #1
 80091ec:	9304      	str	r3, [sp, #16]
 80091ee:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80091f2:	4662      	mov	r2, ip
 80091f4:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 80091f8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80091fc:	9602      	str	r6, [sp, #8]
 80091fe:	f143 36ff 	adc.w	r6, r3, #4294967295
 8009202:	9603      	str	r6, [sp, #12]
 8009204:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009208:	2e00      	cmp	r6, #0
 800920a:	f177 0600 	sbcs.w	r6, r7, #0
 800920e:	eba8 0104 	sub.w	r1, r8, r4
 8009212:	eb09 0004 	add.w	r0, r9, r4
 8009216:	da05      	bge.n	8009224 <__strftime+0x6dc>
 8009218:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 800921c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8009220:	9602      	str	r6, [sp, #8]
 8009222:	9303      	str	r3, [sp, #12]
 8009224:	9b02      	ldr	r3, [sp, #8]
 8009226:	089e      	lsrs	r6, r3, #2
 8009228:	9b03      	ldr	r3, [sp, #12]
 800922a:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 800922e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8009232:	109f      	asrs	r7, r3, #2
 8009234:	2364      	movs	r3, #100	; 0x64
 8009236:	fb92 f3f3 	sdiv	r3, r2, r3
 800923a:	1af6      	subs	r6, r6, r3
 800923c:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8009240:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 8009244:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009248:	fb92 f3f3 	sdiv	r3, r2, r3
 800924c:	18f6      	adds	r6, r6, r3
 800924e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8009252:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8009256:	f240 136d 	movw	r3, #365	; 0x16d
 800925a:	fb03 fc0c 	mul.w	ip, r3, ip
 800925e:	69eb      	ldr	r3, [r5, #28]
 8009260:	eb16 060c 	adds.w	r6, r6, ip
 8009264:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8009268:	18f6      	adds	r6, r6, r3
 800926a:	f04f 0c18 	mov.w	ip, #24
 800926e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8009272:	fba6 230c 	umull	r2, r3, r6, ip
 8009276:	68ae      	ldr	r6, [r5, #8]
 8009278:	fb0c 3307 	mla	r3, ip, r7, r3
 800927c:	1992      	adds	r2, r2, r6
 800927e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8009282:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8009286:	fba2 670c 	umull	r6, r7, r2, ip
 800928a:	fb0c 7703 	mla	r7, ip, r3, r7
 800928e:	686b      	ldr	r3, [r5, #4]
 8009290:	18f6      	adds	r6, r6, r3
 8009292:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8009296:	fba6 230c 	umull	r2, r3, r6, ip
 800929a:	682e      	ldr	r6, [r5, #0]
 800929c:	fb0c 3307 	mla	r3, ip, r7, r3
 80092a0:	1992      	adds	r2, r2, r6
 80092a2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 80092a6:	ebb2 020a 	subs.w	r2, r2, sl
 80092aa:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 80092ae:	e9cd 2300 	strd	r2, r3, [sp]
 80092b2:	4a14      	ldr	r2, [pc, #80]	; (8009304 <__strftime+0x7bc>)
 80092b4:	f004 fa0e 	bl	800d6d4 <sniprintf>
 80092b8:	e606      	b.n	8008ec8 <__strftime+0x380>
 80092ba:	f04f 0a00 	mov.w	sl, #0
 80092be:	e796      	b.n	80091ee <__strftime+0x6a6>
 80092c0:	682b      	ldr	r3, [r5, #0]
 80092c2:	e66a      	b.n	8008f9a <__strftime+0x452>
 80092c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80092c8:	42a3      	cmp	r3, r4
 80092ca:	f67f ac6c 	bls.w	8008ba6 <__strftime+0x5e>
 80092ce:	2309      	movs	r3, #9
 80092d0:	e740      	b.n	8009154 <__strftime+0x60c>
 80092d2:	682b      	ldr	r3, [r5, #0]
 80092d4:	9301      	str	r3, [sp, #4]
 80092d6:	686b      	ldr	r3, [r5, #4]
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	4a0b      	ldr	r2, [pc, #44]	; (8009308 <__strftime+0x7c0>)
 80092dc:	68ab      	ldr	r3, [r5, #8]
 80092de:	e5e0      	b.n	8008ea2 <__strftime+0x35a>
 80092e0:	fffff894 	.word	0xfffff894
 80092e4:	fffff895 	.word	0xfffff895
 80092e8:	0800df50 	.word	0x0800df50
 80092ec:	0800df39 	.word	0x0800df39
 80092f0:	0800df47 	.word	0x0800df47
 80092f4:	0800df54 	.word	0x0800df54
 80092f8:	0800e144 	.word	0x0800e144
 80092fc:	0800dd61 	.word	0x0800dd61
 8009300:	0800df63 	.word	0x0800df63
 8009304:	0800df59 	.word	0x0800df59
 8009308:	0800df5e 	.word	0x0800df5e
 800930c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009310:	42a3      	cmp	r3, r4
 8009312:	f67f ac48 	bls.w	8008ba6 <__strftime+0x5e>
 8009316:	69ab      	ldr	r3, [r5, #24]
 8009318:	eb09 0204 	add.w	r2, r9, r4
 800931c:	3401      	adds	r4, #1
 800931e:	b913      	cbnz	r3, 8009326 <__strftime+0x7de>
 8009320:	2337      	movs	r3, #55	; 0x37
 8009322:	7013      	strb	r3, [r2, #0]
 8009324:	e512      	b.n	8008d4c <__strftime+0x204>
 8009326:	3330      	adds	r3, #48	; 0x30
 8009328:	e7fb      	b.n	8009322 <__strftime+0x7da>
 800932a:	69eb      	ldr	r3, [r5, #28]
 800932c:	69aa      	ldr	r2, [r5, #24]
 800932e:	3307      	adds	r3, #7
 8009330:	1a9b      	subs	r3, r3, r2
 8009332:	2207      	movs	r2, #7
 8009334:	fb93 f3f2 	sdiv	r3, r3, r2
 8009338:	e62f      	b.n	8008f9a <__strftime+0x452>
 800933a:	4628      	mov	r0, r5
 800933c:	f7ff fba2 	bl	8008a84 <iso_year_adjust>
 8009340:	69aa      	ldr	r2, [r5, #24]
 8009342:	b132      	cbz	r2, 8009352 <__strftime+0x80a>
 8009344:	3a01      	subs	r2, #1
 8009346:	2800      	cmp	r0, #0
 8009348:	dc28      	bgt.n	800939c <__strftime+0x854>
 800934a:	69eb      	ldr	r3, [r5, #28]
 800934c:	d103      	bne.n	8009356 <__strftime+0x80e>
 800934e:	330a      	adds	r3, #10
 8009350:	e7ee      	b.n	8009330 <__strftime+0x7e8>
 8009352:	2206      	movs	r2, #6
 8009354:	e7f7      	b.n	8009346 <__strftime+0x7fe>
 8009356:	6968      	ldr	r0, [r5, #20]
 8009358:	2800      	cmp	r0, #0
 800935a:	eba2 0303 	sub.w	r3, r2, r3
 800935e:	f240 726b 	movw	r2, #1899	; 0x76b
 8009362:	bfa8      	it	ge
 8009364:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8009368:	4410      	add	r0, r2
 800936a:	0782      	lsls	r2, r0, #30
 800936c:	d105      	bne.n	800937a <__strftime+0x832>
 800936e:	2264      	movs	r2, #100	; 0x64
 8009370:	fb90 f1f2 	sdiv	r1, r0, r2
 8009374:	fb02 0111 	mls	r1, r2, r1, r0
 8009378:	b971      	cbnz	r1, 8009398 <__strftime+0x850>
 800937a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800937e:	fb90 f2f1 	sdiv	r2, r0, r1
 8009382:	fb01 0212 	mls	r2, r1, r2, r0
 8009386:	fab2 f282 	clz	r2, r2
 800938a:	0952      	lsrs	r2, r2, #5
 800938c:	1a9a      	subs	r2, r3, r2
 800938e:	2a05      	cmp	r2, #5
 8009390:	bfb4      	ite	lt
 8009392:	2335      	movlt	r3, #53	; 0x35
 8009394:	2334      	movge	r3, #52	; 0x34
 8009396:	e600      	b.n	8008f9a <__strftime+0x452>
 8009398:	2201      	movs	r2, #1
 800939a:	e7f7      	b.n	800938c <__strftime+0x844>
 800939c:	2301      	movs	r3, #1
 800939e:	e5fc      	b.n	8008f9a <__strftime+0x452>
 80093a0:	f108 33ff 	add.w	r3, r8, #4294967295
 80093a4:	42a3      	cmp	r3, r4
 80093a6:	f67f abfe 	bls.w	8008ba6 <__strftime+0x5e>
 80093aa:	69ab      	ldr	r3, [r5, #24]
 80093ac:	3330      	adds	r3, #48	; 0x30
 80093ae:	e6d1      	b.n	8009154 <__strftime+0x60c>
 80093b0:	69ab      	ldr	r3, [r5, #24]
 80093b2:	b13b      	cbz	r3, 80093c4 <__strftime+0x87c>
 80093b4:	3b01      	subs	r3, #1
 80093b6:	69ea      	ldr	r2, [r5, #28]
 80093b8:	3207      	adds	r2, #7
 80093ba:	1ad2      	subs	r2, r2, r3
 80093bc:	2307      	movs	r3, #7
 80093be:	fb92 f3f3 	sdiv	r3, r2, r3
 80093c2:	e5ea      	b.n	8008f9a <__strftime+0x452>
 80093c4:	2306      	movs	r3, #6
 80093c6:	e7f6      	b.n	80093b6 <__strftime+0x86e>
 80093c8:	6968      	ldr	r0, [r5, #20]
 80093ca:	2800      	cmp	r0, #0
 80093cc:	db05      	blt.n	80093da <__strftime+0x892>
 80093ce:	2264      	movs	r2, #100	; 0x64
 80093d0:	fb90 f3f2 	sdiv	r3, r0, r2
 80093d4:	fb03 0312 	mls	r3, r3, r2, r0
 80093d8:	e5df      	b.n	8008f9a <__strftime+0x452>
 80093da:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80093de:	f001 ff61 	bl	800b2a4 <abs>
 80093e2:	e7f4      	b.n	80093ce <__strftime+0x886>
 80093e4:	696b      	ldr	r3, [r5, #20]
 80093e6:	4a4c      	ldr	r2, [pc, #304]	; (8009518 <__strftime+0x9d0>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	da09      	bge.n	8009400 <__strftime+0x8b8>
 80093ec:	212d      	movs	r1, #45	; 0x2d
 80093ee:	f88d 1020 	strb.w	r1, [sp, #32]
 80093f2:	eba2 0a03 	sub.w	sl, r2, r3
 80093f6:	b106      	cbz	r6, 80093fa <__strftime+0x8b2>
 80093f8:	3e01      	subs	r6, #1
 80093fa:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80093fe:	e00b      	b.n	8009418 <__strftime+0x8d0>
 8009400:	2f2b      	cmp	r7, #43	; 0x2b
 8009402:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8009406:	d106      	bne.n	8009416 <__strftime+0x8ce>
 8009408:	f242 730f 	movw	r3, #9999	; 0x270f
 800940c:	459a      	cmp	sl, r3
 800940e:	d902      	bls.n	8009416 <__strftime+0x8ce>
 8009410:	f88d 7020 	strb.w	r7, [sp, #32]
 8009414:	e7ef      	b.n	80093f6 <__strftime+0x8ae>
 8009416:	ab08      	add	r3, sp, #32
 8009418:	2225      	movs	r2, #37	; 0x25
 800941a:	701a      	strb	r2, [r3, #0]
 800941c:	b937      	cbnz	r7, 800942c <__strftime+0x8e4>
 800941e:	1c58      	adds	r0, r3, #1
 8009420:	493e      	ldr	r1, [pc, #248]	; (800951c <__strftime+0x9d4>)
 8009422:	f7ff fb27 	bl	8008a74 <strcpy>
 8009426:	f8cd a000 	str.w	sl, [sp]
 800942a:	e665      	b.n	80090f8 <__strftime+0x5b0>
 800942c:	2230      	movs	r2, #48	; 0x30
 800942e:	1c98      	adds	r0, r3, #2
 8009430:	705a      	strb	r2, [r3, #1]
 8009432:	e7f5      	b.n	8009420 <__strftime+0x8d8>
 8009434:	6a2b      	ldr	r3, [r5, #32]
 8009436:	2b00      	cmp	r3, #0
 8009438:	f6ff ac88 	blt.w	8008d4c <__strftime+0x204>
 800943c:	f001 fcd2 	bl	800ade4 <__tz_lock>
 8009440:	9b04      	ldr	r3, [sp, #16]
 8009442:	b90b      	cbnz	r3, 8009448 <__strftime+0x900>
 8009444:	f001 fcda 	bl	800adfc <_tzset_unlocked>
 8009448:	f002 fb06 	bl	800ba58 <__gettzinfo>
 800944c:	6a2b      	ldr	r3, [r5, #32]
 800944e:	2b00      	cmp	r3, #0
 8009450:	bfcc      	ite	gt
 8009452:	2350      	movgt	r3, #80	; 0x50
 8009454:	2328      	movle	r3, #40	; 0x28
 8009456:	eb09 0704 	add.w	r7, r9, r4
 800945a:	58c6      	ldr	r6, [r0, r3]
 800945c:	f001 fcc8 	bl	800adf0 <__tz_unlock>
 8009460:	4276      	negs	r6, r6
 8009462:	233c      	movs	r3, #60	; 0x3c
 8009464:	fb96 f0f3 	sdiv	r0, r6, r3
 8009468:	f002 fafa 	bl	800ba60 <labs>
 800946c:	233c      	movs	r3, #60	; 0x3c
 800946e:	eba8 0a04 	sub.w	sl, r8, r4
 8009472:	fb90 f2f3 	sdiv	r2, r0, r3
 8009476:	fb02 0013 	mls	r0, r2, r3, r0
 800947a:	9000      	str	r0, [sp, #0]
 800947c:	4a28      	ldr	r2, [pc, #160]	; (8009520 <__strftime+0x9d8>)
 800947e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009482:	4651      	mov	r1, sl
 8009484:	4638      	mov	r0, r7
 8009486:	fb96 f3f3 	sdiv	r3, r6, r3
 800948a:	f004 f923 	bl	800d6d4 <sniprintf>
 800948e:	2800      	cmp	r0, #0
 8009490:	f6ff ab89 	blt.w	8008ba6 <__strftime+0x5e>
 8009494:	4404      	add	r4, r0
 8009496:	45a0      	cmp	r8, r4
 8009498:	f67f ab85 	bls.w	8008ba6 <__strftime+0x5e>
 800949c:	2301      	movs	r3, #1
 800949e:	9304      	str	r3, [sp, #16]
 80094a0:	e454      	b.n	8008d4c <__strftime+0x204>
 80094a2:	6a2b      	ldr	r3, [r5, #32]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f6ff ac51 	blt.w	8008d4c <__strftime+0x204>
 80094aa:	f001 fc9b 	bl	800ade4 <__tz_lock>
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	b90b      	cbnz	r3, 80094b6 <__strftime+0x96e>
 80094b2:	f001 fca3 	bl	800adfc <_tzset_unlocked>
 80094b6:	6a2b      	ldr	r3, [r5, #32]
 80094b8:	4a1a      	ldr	r2, [pc, #104]	; (8009524 <__strftime+0x9dc>)
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	bfd4      	ite	le
 80094be:	2300      	movle	r3, #0
 80094c0:	2301      	movgt	r3, #1
 80094c2:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80094c6:	4630      	mov	r0, r6
 80094c8:	f7f6 fe94 	bl	80001f4 <strlen>
 80094cc:	3e01      	subs	r6, #1
 80094ce:	4420      	add	r0, r4
 80094d0:	f108 33ff 	add.w	r3, r8, #4294967295
 80094d4:	42a0      	cmp	r0, r4
 80094d6:	d102      	bne.n	80094de <__strftime+0x996>
 80094d8:	f001 fc8a 	bl	800adf0 <__tz_unlock>
 80094dc:	e7de      	b.n	800949c <__strftime+0x954>
 80094de:	42a3      	cmp	r3, r4
 80094e0:	d905      	bls.n	80094ee <__strftime+0x9a6>
 80094e2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80094e6:	f809 2004 	strb.w	r2, [r9, r4]
 80094ea:	3401      	adds	r4, #1
 80094ec:	e7f2      	b.n	80094d4 <__strftime+0x98c>
 80094ee:	f001 fc7f 	bl	800adf0 <__tz_unlock>
 80094f2:	f7ff bb58 	b.w	8008ba6 <__strftime+0x5e>
 80094f6:	f108 33ff 	add.w	r3, r8, #4294967295
 80094fa:	42a3      	cmp	r3, r4
 80094fc:	f67f ab53 	bls.w	8008ba6 <__strftime+0x5e>
 8009500:	2325      	movs	r3, #37	; 0x25
 8009502:	e627      	b.n	8009154 <__strftime+0x60c>
 8009504:	f1b8 0f00 	cmp.w	r8, #0
 8009508:	d002      	beq.n	8009510 <__strftime+0x9c8>
 800950a:	2300      	movs	r3, #0
 800950c:	f809 3004 	strb.w	r3, [r9, r4]
 8009510:	4620      	mov	r0, r4
 8009512:	b011      	add	sp, #68	; 0x44
 8009514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009518:	fffff894 	.word	0xfffff894
 800951c:	0800df50 	.word	0x0800df50
 8009520:	0800df6d 	.word	0x0800df6d
 8009524:	20000084 	.word	0x20000084

08009528 <strftime>:
 8009528:	b513      	push	{r0, r1, r4, lr}
 800952a:	4c03      	ldr	r4, [pc, #12]	; (8009538 <strftime+0x10>)
 800952c:	9400      	str	r4, [sp, #0]
 800952e:	f7ff fb0b 	bl	8008b48 <__strftime>
 8009532:	b002      	add	sp, #8
 8009534:	bd10      	pop	{r4, pc}
 8009536:	bf00      	nop
 8009538:	200000ec 	.word	0x200000ec

0800953c <strncmp>:
 800953c:	b510      	push	{r4, lr}
 800953e:	b16a      	cbz	r2, 800955c <strncmp+0x20>
 8009540:	3901      	subs	r1, #1
 8009542:	1884      	adds	r4, r0, r2
 8009544:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009548:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800954c:	4293      	cmp	r3, r2
 800954e:	d103      	bne.n	8009558 <strncmp+0x1c>
 8009550:	42a0      	cmp	r0, r4
 8009552:	d001      	beq.n	8009558 <strncmp+0x1c>
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1f5      	bne.n	8009544 <strncmp+0x8>
 8009558:	1a98      	subs	r0, r3, r2
 800955a:	bd10      	pop	{r4, pc}
 800955c:	4610      	mov	r0, r2
 800955e:	e7fc      	b.n	800955a <strncmp+0x1e>

08009560 <is_leap_year>:
 8009560:	0783      	lsls	r3, r0, #30
 8009562:	d10f      	bne.n	8009584 <is_leap_year+0x24>
 8009564:	2264      	movs	r2, #100	; 0x64
 8009566:	fb90 f3f2 	sdiv	r3, r0, r2
 800956a:	fb02 0313 	mls	r3, r2, r3, r0
 800956e:	b95b      	cbnz	r3, 8009588 <is_leap_year+0x28>
 8009570:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009574:	fb90 f3f2 	sdiv	r3, r0, r2
 8009578:	fb02 0013 	mls	r0, r2, r3, r0
 800957c:	fab0 f080 	clz	r0, r0
 8009580:	0940      	lsrs	r0, r0, #5
 8009582:	4770      	bx	lr
 8009584:	2000      	movs	r0, #0
 8009586:	4770      	bx	lr
 8009588:	2001      	movs	r0, #1
 800958a:	4770      	bx	lr

0800958c <first_day>:
 800958c:	b570      	push	{r4, r5, r6, lr}
 800958e:	2104      	movs	r1, #4
 8009590:	4604      	mov	r4, r0
 8009592:	f240 75b1 	movw	r5, #1969	; 0x7b1
 8009596:	2607      	movs	r6, #7
 8009598:	3c01      	subs	r4, #1
 800959a:	42ac      	cmp	r4, r5
 800959c:	dc01      	bgt.n	80095a2 <first_day+0x16>
 800959e:	4608      	mov	r0, r1
 80095a0:	bd70      	pop	{r4, r5, r6, pc}
 80095a2:	4620      	mov	r0, r4
 80095a4:	f7ff ffdc 	bl	8009560 <is_leap_year>
 80095a8:	f201 136d 	addw	r3, r1, #365	; 0x16d
 80095ac:	1819      	adds	r1, r3, r0
 80095ae:	fb91 f0f6 	sdiv	r0, r1, r6
 80095b2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80095b6:	1a09      	subs	r1, r1, r0
 80095b8:	e7ee      	b.n	8009598 <first_day+0xc>

080095ba <match_string>:
 80095ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095be:	4605      	mov	r5, r0
 80095c0:	460e      	mov	r6, r1
 80095c2:	4690      	mov	r8, r2
 80095c4:	2400      	movs	r4, #0
 80095c6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80095ca:	b910      	cbnz	r0, 80095d2 <match_string+0x18>
 80095cc:	f04f 34ff 	mov.w	r4, #4294967295
 80095d0:	e00d      	b.n	80095ee <match_string+0x34>
 80095d2:	f7f6 fe0f 	bl	80001f4 <strlen>
 80095d6:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80095da:	4607      	mov	r7, r0
 80095dc:	4602      	mov	r2, r0
 80095de:	4643      	mov	r3, r8
 80095e0:	6828      	ldr	r0, [r5, #0]
 80095e2:	f004 f8ab 	bl	800d73c <strncasecmp_l>
 80095e6:	b928      	cbnz	r0, 80095f4 <match_string+0x3a>
 80095e8:	6828      	ldr	r0, [r5, #0]
 80095ea:	4438      	add	r0, r7
 80095ec:	6028      	str	r0, [r5, #0]
 80095ee:	4620      	mov	r0, r4
 80095f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f4:	3401      	adds	r4, #1
 80095f6:	e7e6      	b.n	80095c6 <match_string+0xc>

080095f8 <strptime_l>:
 80095f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	b087      	sub	sp, #28
 80095fe:	4fc6      	ldr	r7, [pc, #792]	; (8009918 <strptime_l+0x320>)
 8009600:	4ec6      	ldr	r6, [pc, #792]	; (800991c <strptime_l+0x324>)
 8009602:	9001      	str	r0, [sp, #4]
 8009604:	460d      	mov	r5, r1
 8009606:	4614      	mov	r4, r2
 8009608:	469a      	mov	sl, r3
 800960a:	f04f 0800 	mov.w	r8, #0
 800960e:	782a      	ldrb	r2, [r5, #0]
 8009610:	bb7a      	cbnz	r2, 8009672 <strptime_l+0x7a>
 8009612:	f008 0307 	and.w	r3, r8, #7
 8009616:	2b07      	cmp	r3, #7
 8009618:	f040 830c 	bne.w	8009c34 <strptime_l+0x63c>
 800961c:	f018 0f10 	tst.w	r8, #16
 8009620:	d112      	bne.n	8009648 <strptime_l+0x50>
 8009622:	4bbf      	ldr	r3, [pc, #764]	; (8009920 <strptime_l+0x328>)
 8009624:	6925      	ldr	r5, [r4, #16]
 8009626:	6960      	ldr	r0, [r4, #20]
 8009628:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 800962c:	68e3      	ldr	r3, [r4, #12]
 800962e:	4419      	add	r1, r3
 8009630:	61e1      	str	r1, [r4, #28]
 8009632:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009636:	f7ff ff93 	bl	8009560 <is_leap_year>
 800963a:	b108      	cbz	r0, 8009640 <strptime_l+0x48>
 800963c:	2d01      	cmp	r5, #1
 800963e:	dc01      	bgt.n	8009644 <strptime_l+0x4c>
 8009640:	3901      	subs	r1, #1
 8009642:	61e1      	str	r1, [r4, #28]
 8009644:	f048 0810 	orr.w	r8, r8, #16
 8009648:	f008 081c 	and.w	r8, r8, #28
 800964c:	f1b8 0f14 	cmp.w	r8, #20
 8009650:	d10d      	bne.n	800966e <strptime_l+0x76>
 8009652:	6960      	ldr	r0, [r4, #20]
 8009654:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009658:	f7ff ff98 	bl	800958c <first_day>
 800965c:	69e3      	ldr	r3, [r4, #28]
 800965e:	4418      	add	r0, r3
 8009660:	2307      	movs	r3, #7
 8009662:	fb90 f3f3 	sdiv	r3, r0, r3
 8009666:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800966a:	1ac0      	subs	r0, r0, r3
 800966c:	61a0      	str	r0, [r4, #24]
 800966e:	9801      	ldr	r0, [sp, #4]
 8009670:	e222      	b.n	8009ab8 <strptime_l+0x4c0>
 8009672:	5dd3      	ldrb	r3, [r2, r7]
 8009674:	0719      	lsls	r1, r3, #28
 8009676:	d509      	bpl.n	800968c <strptime_l+0x94>
 8009678:	9b01      	ldr	r3, [sp, #4]
 800967a:	781a      	ldrb	r2, [r3, #0]
 800967c:	5cba      	ldrb	r2, [r7, r2]
 800967e:	0712      	lsls	r2, r2, #28
 8009680:	d401      	bmi.n	8009686 <strptime_l+0x8e>
 8009682:	3501      	adds	r5, #1
 8009684:	e7c3      	b.n	800960e <strptime_l+0x16>
 8009686:	3301      	adds	r3, #1
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	e7f5      	b.n	8009678 <strptime_l+0x80>
 800968c:	2a25      	cmp	r2, #37	; 0x25
 800968e:	f040 82cd 	bne.w	8009c2c <strptime_l+0x634>
 8009692:	786b      	ldrb	r3, [r5, #1]
 8009694:	2b00      	cmp	r3, #0
 8009696:	f000 82c9 	beq.w	8009c2c <strptime_l+0x634>
 800969a:	2b45      	cmp	r3, #69	; 0x45
 800969c:	f000 80ba 	beq.w	8009814 <strptime_l+0x21c>
 80096a0:	2b4f      	cmp	r3, #79	; 0x4f
 80096a2:	f000 80b7 	beq.w	8009814 <strptime_l+0x21c>
 80096a6:	3501      	adds	r5, #1
 80096a8:	f1a3 0225 	sub.w	r2, r3, #37	; 0x25
 80096ac:	b2d1      	uxtb	r1, r2
 80096ae:	2954      	cmp	r1, #84	; 0x54
 80096b0:	f200 82af 	bhi.w	8009c12 <strptime_l+0x61a>
 80096b4:	2a54      	cmp	r2, #84	; 0x54
 80096b6:	f200 82ac 	bhi.w	8009c12 <strptime_l+0x61a>
 80096ba:	a101      	add	r1, pc, #4	; (adr r1, 80096c0 <strptime_l+0xc8>)
 80096bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80096c0:	08009c0b 	.word	0x08009c0b
 80096c4:	08009c13 	.word	0x08009c13
 80096c8:	08009c13 	.word	0x08009c13
 80096cc:	08009c13 	.word	0x08009c13
 80096d0:	08009c13 	.word	0x08009c13
 80096d4:	08009c13 	.word	0x08009c13
 80096d8:	08009c13 	.word	0x08009c13
 80096dc:	08009c13 	.word	0x08009c13
 80096e0:	08009c13 	.word	0x08009c13
 80096e4:	08009c13 	.word	0x08009c13
 80096e8:	08009c13 	.word	0x08009c13
 80096ec:	08009c13 	.word	0x08009c13
 80096f0:	08009c13 	.word	0x08009c13
 80096f4:	08009c13 	.word	0x08009c13
 80096f8:	08009c13 	.word	0x08009c13
 80096fc:	08009c13 	.word	0x08009c13
 8009700:	08009c13 	.word	0x08009c13
 8009704:	08009c13 	.word	0x08009c13
 8009708:	08009c13 	.word	0x08009c13
 800970c:	08009c13 	.word	0x08009c13
 8009710:	08009c13 	.word	0x08009c13
 8009714:	08009c13 	.word	0x08009c13
 8009718:	08009c13 	.word	0x08009c13
 800971c:	08009c13 	.word	0x08009c13
 8009720:	08009c13 	.word	0x08009c13
 8009724:	08009c13 	.word	0x08009c13
 8009728:	08009c13 	.word	0x08009c13
 800972c:	08009c13 	.word	0x08009c13
 8009730:	08009823 	.word	0x08009823
 8009734:	08009841 	.word	0x08009841
 8009738:	0800985f 	.word	0x0800985f
 800973c:	080098a5 	.word	0x080098a5
 8009740:	08009c13 	.word	0x08009c13
 8009744:	080098d7 	.word	0x080098d7
 8009748:	08009c13 	.word	0x08009c13
 800974c:	080098fb 	.word	0x080098fb
 8009750:	08009939 	.word	0x08009939
 8009754:	08009c13 	.word	0x08009c13
 8009758:	08009c13 	.word	0x08009c13
 800975c:	08009c13 	.word	0x08009c13
 8009760:	08009997 	.word	0x08009997
 8009764:	08009c13 	.word	0x08009c13
 8009768:	08009c13 	.word	0x08009c13
 800976c:	08009c13 	.word	0x08009c13
 8009770:	08009c13 	.word	0x08009c13
 8009774:	080099f7 	.word	0x080099f7
 8009778:	08009a5f 	.word	0x08009a5f
 800977c:	08009a7f 	.word	0x08009a7f
 8009780:	08009abf 	.word	0x08009abf
 8009784:	08009afd 	.word	0x08009afd
 8009788:	08009b4f 	.word	0x08009b4f
 800978c:	08009bc1 	.word	0x08009bc1
 8009790:	08009bed 	.word	0x08009bed
 8009794:	08009683 	.word	0x08009683
 8009798:	08009c13 	.word	0x08009c13
 800979c:	08009c13 	.word	0x08009c13
 80097a0:	08009c13 	.word	0x08009c13
 80097a4:	08009c13 	.word	0x08009c13
 80097a8:	08009c13 	.word	0x08009c13
 80097ac:	08009c13 	.word	0x08009c13
 80097b0:	0800983b 	.word	0x0800983b
 80097b4:	08009859 	.word	0x08009859
 80097b8:	08009887 	.word	0x08009887
 80097bc:	080098b7 	.word	0x080098b7
 80097c0:	080098b7 	.word	0x080098b7
 80097c4:	08009c13 	.word	0x08009c13
 80097c8:	08009c13 	.word	0x08009c13
 80097cc:	08009859 	.word	0x08009859
 80097d0:	08009c13 	.word	0x08009c13
 80097d4:	08009957 	.word	0x08009957
 80097d8:	080098fb 	.word	0x080098fb
 80097dc:	08009939 	.word	0x08009939
 80097e0:	08009979 	.word	0x08009979
 80097e4:	080099b1 	.word	0x080099b1
 80097e8:	08009c13 	.word	0x08009c13
 80097ec:	080099bd 	.word	0x080099bd
 80097f0:	08009c13 	.word	0x08009c13
 80097f4:	080099df 	.word	0x080099df
 80097f8:	080099ff 	.word	0x080099ff
 80097fc:	08009a77 	.word	0x08009a77
 8009800:	08009a87 	.word	0x08009a87
 8009804:	08009c13 	.word	0x08009c13
 8009808:	08009aa3 	.word	0x08009aa3
 800980c:	08009bb7 	.word	0x08009bb7
 8009810:	08009bcb 	.word	0x08009bcb
 8009814:	78ab      	ldrb	r3, [r5, #2]
 8009816:	1caa      	adds	r2, r5, #2
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 81f5 	beq.w	8009c08 <strptime_l+0x610>
 800981e:	4615      	mov	r5, r2
 8009820:	e742      	b.n	80096a8 <strptime_l+0xb0>
 8009822:	4940      	ldr	r1, [pc, #256]	; (8009924 <strptime_l+0x32c>)
 8009824:	4652      	mov	r2, sl
 8009826:	a801      	add	r0, sp, #4
 8009828:	f7ff fec7 	bl	80095ba <match_string>
 800982c:	2800      	cmp	r0, #0
 800982e:	f2c0 8142 	blt.w	8009ab6 <strptime_l+0x4be>
 8009832:	61a0      	str	r0, [r4, #24]
 8009834:	f048 0808 	orr.w	r8, r8, #8
 8009838:	e723      	b.n	8009682 <strptime_l+0x8a>
 800983a:	493b      	ldr	r1, [pc, #236]	; (8009928 <strptime_l+0x330>)
 800983c:	4652      	mov	r2, sl
 800983e:	e7f2      	b.n	8009826 <strptime_l+0x22e>
 8009840:	493a      	ldr	r1, [pc, #232]	; (800992c <strptime_l+0x334>)
 8009842:	4652      	mov	r2, sl
 8009844:	a801      	add	r0, sp, #4
 8009846:	f7ff feb8 	bl	80095ba <match_string>
 800984a:	2800      	cmp	r0, #0
 800984c:	f2c0 8133 	blt.w	8009ab6 <strptime_l+0x4be>
 8009850:	6120      	str	r0, [r4, #16]
 8009852:	f048 0802 	orr.w	r8, r8, #2
 8009856:	e714      	b.n	8009682 <strptime_l+0x8a>
 8009858:	4652      	mov	r2, sl
 800985a:	4631      	mov	r1, r6
 800985c:	e7f2      	b.n	8009844 <strptime_l+0x24c>
 800985e:	4653      	mov	r3, sl
 8009860:	220a      	movs	r2, #10
 8009862:	9801      	ldr	r0, [sp, #4]
 8009864:	a903      	add	r1, sp, #12
 8009866:	f001 f8e3 	bl	800aa30 <strtol_l>
 800986a:	9a03      	ldr	r2, [sp, #12]
 800986c:	9b01      	ldr	r3, [sp, #4]
 800986e:	429a      	cmp	r2, r3
 8009870:	f000 8121 	beq.w	8009ab6 <strptime_l+0x4be>
 8009874:	2364      	movs	r3, #100	; 0x64
 8009876:	4358      	muls	r0, r3
 8009878:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 800987c:	6160      	str	r0, [r4, #20]
 800987e:	9201      	str	r2, [sp, #4]
 8009880:	f048 0804 	orr.w	r8, r8, #4
 8009884:	e6fd      	b.n	8009682 <strptime_l+0x8a>
 8009886:	f8d6 10a0 	ldr.w	r1, [r6, #160]	; 0xa0
 800988a:	9801      	ldr	r0, [sp, #4]
 800988c:	4653      	mov	r3, sl
 800988e:	4622      	mov	r2, r4
 8009890:	f7ff feb2 	bl	80095f8 <strptime_l>
 8009894:	9003      	str	r0, [sp, #12]
 8009896:	2800      	cmp	r0, #0
 8009898:	f000 810d 	beq.w	8009ab6 <strptime_l+0x4be>
 800989c:	9001      	str	r0, [sp, #4]
 800989e:	f048 080f 	orr.w	r8, r8, #15
 80098a2:	e6ee      	b.n	8009682 <strptime_l+0x8a>
 80098a4:	4922      	ldr	r1, [pc, #136]	; (8009930 <strptime_l+0x338>)
 80098a6:	4653      	mov	r3, sl
 80098a8:	4622      	mov	r2, r4
 80098aa:	9801      	ldr	r0, [sp, #4]
 80098ac:	f7ff fea4 	bl	80095f8 <strptime_l>
 80098b0:	9003      	str	r0, [sp, #12]
 80098b2:	b9f0      	cbnz	r0, 80098f2 <strptime_l+0x2fa>
 80098b4:	e0ff      	b.n	8009ab6 <strptime_l+0x4be>
 80098b6:	4653      	mov	r3, sl
 80098b8:	220a      	movs	r2, #10
 80098ba:	9801      	ldr	r0, [sp, #4]
 80098bc:	a903      	add	r1, sp, #12
 80098be:	f001 f8b7 	bl	800aa30 <strtol_l>
 80098c2:	9b03      	ldr	r3, [sp, #12]
 80098c4:	9a01      	ldr	r2, [sp, #4]
 80098c6:	4293      	cmp	r3, r2
 80098c8:	f000 80f5 	beq.w	8009ab6 <strptime_l+0x4be>
 80098cc:	60e0      	str	r0, [r4, #12]
 80098ce:	9301      	str	r3, [sp, #4]
 80098d0:	f048 0801 	orr.w	r8, r8, #1
 80098d4:	e6d5      	b.n	8009682 <strptime_l+0x8a>
 80098d6:	4917      	ldr	r1, [pc, #92]	; (8009934 <strptime_l+0x33c>)
 80098d8:	9801      	ldr	r0, [sp, #4]
 80098da:	4653      	mov	r3, sl
 80098dc:	4622      	mov	r2, r4
 80098de:	f7ff fe8b 	bl	80095f8 <strptime_l>
 80098e2:	9003      	str	r0, [sp, #12]
 80098e4:	2800      	cmp	r0, #0
 80098e6:	f000 80e6 	beq.w	8009ab6 <strptime_l+0x4be>
 80098ea:	9b01      	ldr	r3, [sp, #4]
 80098ec:	4298      	cmp	r0, r3
 80098ee:	f000 80e2 	beq.w	8009ab6 <strptime_l+0x4be>
 80098f2:	9001      	str	r0, [sp, #4]
 80098f4:	f048 0807 	orr.w	r8, r8, #7
 80098f8:	e6c3      	b.n	8009682 <strptime_l+0x8a>
 80098fa:	4653      	mov	r3, sl
 80098fc:	220a      	movs	r2, #10
 80098fe:	9801      	ldr	r0, [sp, #4]
 8009900:	a903      	add	r1, sp, #12
 8009902:	f001 f895 	bl	800aa30 <strtol_l>
 8009906:	9b03      	ldr	r3, [sp, #12]
 8009908:	9a01      	ldr	r2, [sp, #4]
 800990a:	4293      	cmp	r3, r2
 800990c:	f000 80d3 	beq.w	8009ab6 <strptime_l+0x4be>
 8009910:	60a0      	str	r0, [r4, #8]
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	e6b5      	b.n	8009682 <strptime_l+0x8a>
 8009916:	bf00      	nop
 8009918:	0800dd61 	.word	0x0800dd61
 800991c:	0800e144 	.word	0x0800e144
 8009920:	0800df9c 	.word	0x0800df9c
 8009924:	0800e1c0 	.word	0x0800e1c0
 8009928:	0800e1a4 	.word	0x0800e1a4
 800992c:	0800e174 	.word	0x0800e174
 8009930:	0800df79 	.word	0x0800df79
 8009934:	0800df82 	.word	0x0800df82
 8009938:	4653      	mov	r3, sl
 800993a:	220a      	movs	r2, #10
 800993c:	9801      	ldr	r0, [sp, #4]
 800993e:	a903      	add	r1, sp, #12
 8009940:	f001 f876 	bl	800aa30 <strtol_l>
 8009944:	9b03      	ldr	r3, [sp, #12]
 8009946:	9a01      	ldr	r2, [sp, #4]
 8009948:	4293      	cmp	r3, r2
 800994a:	f000 80b4 	beq.w	8009ab6 <strptime_l+0x4be>
 800994e:	280c      	cmp	r0, #12
 8009950:	bf08      	it	eq
 8009952:	2000      	moveq	r0, #0
 8009954:	e7dc      	b.n	8009910 <strptime_l+0x318>
 8009956:	4653      	mov	r3, sl
 8009958:	220a      	movs	r2, #10
 800995a:	9801      	ldr	r0, [sp, #4]
 800995c:	a903      	add	r1, sp, #12
 800995e:	f001 f867 	bl	800aa30 <strtol_l>
 8009962:	9b03      	ldr	r3, [sp, #12]
 8009964:	9a01      	ldr	r2, [sp, #4]
 8009966:	4293      	cmp	r3, r2
 8009968:	f000 80a5 	beq.w	8009ab6 <strptime_l+0x4be>
 800996c:	3801      	subs	r0, #1
 800996e:	61e0      	str	r0, [r4, #28]
 8009970:	9301      	str	r3, [sp, #4]
 8009972:	f048 0810 	orr.w	r8, r8, #16
 8009976:	e684      	b.n	8009682 <strptime_l+0x8a>
 8009978:	4653      	mov	r3, sl
 800997a:	220a      	movs	r2, #10
 800997c:	9801      	ldr	r0, [sp, #4]
 800997e:	a903      	add	r1, sp, #12
 8009980:	f001 f856 	bl	800aa30 <strtol_l>
 8009984:	9b03      	ldr	r3, [sp, #12]
 8009986:	9a01      	ldr	r2, [sp, #4]
 8009988:	4293      	cmp	r3, r2
 800998a:	f000 8094 	beq.w	8009ab6 <strptime_l+0x4be>
 800998e:	3801      	subs	r0, #1
 8009990:	6120      	str	r0, [r4, #16]
 8009992:	9301      	str	r3, [sp, #4]
 8009994:	e75d      	b.n	8009852 <strptime_l+0x25a>
 8009996:	4653      	mov	r3, sl
 8009998:	220a      	movs	r2, #10
 800999a:	9801      	ldr	r0, [sp, #4]
 800999c:	a903      	add	r1, sp, #12
 800999e:	f001 f847 	bl	800aa30 <strtol_l>
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	9a01      	ldr	r2, [sp, #4]
 80099a6:	4293      	cmp	r3, r2
 80099a8:	f000 8085 	beq.w	8009ab6 <strptime_l+0x4be>
 80099ac:	6060      	str	r0, [r4, #4]
 80099ae:	e7b0      	b.n	8009912 <strptime_l+0x31a>
 80099b0:	9b01      	ldr	r3, [sp, #4]
 80099b2:	781a      	ldrb	r2, [r3, #0]
 80099b4:	2a0a      	cmp	r2, #10
 80099b6:	f000 8131 	beq.w	8009c1c <strptime_l+0x624>
 80099ba:	e07c      	b.n	8009ab6 <strptime_l+0x4be>
 80099bc:	49af      	ldr	r1, [pc, #700]	; (8009c7c <strptime_l+0x684>)
 80099be:	4652      	mov	r2, sl
 80099c0:	a801      	add	r0, sp, #4
 80099c2:	f7ff fdfa 	bl	80095ba <match_string>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	db75      	blt.n	8009ab6 <strptime_l+0x4be>
 80099ca:	68a3      	ldr	r3, [r4, #8]
 80099cc:	b92b      	cbnz	r3, 80099da <strptime_l+0x3e2>
 80099ce:	2801      	cmp	r0, #1
 80099d0:	f47f ae57 	bne.w	8009682 <strptime_l+0x8a>
 80099d4:	230c      	movs	r3, #12
 80099d6:	60a3      	str	r3, [r4, #8]
 80099d8:	e653      	b.n	8009682 <strptime_l+0x8a>
 80099da:	330c      	adds	r3, #12
 80099dc:	e7fb      	b.n	80099d6 <strptime_l+0x3de>
 80099de:	f8d6 10e4 	ldr.w	r1, [r6, #228]	; 0xe4
 80099e2:	4653      	mov	r3, sl
 80099e4:	4622      	mov	r2, r4
 80099e6:	9801      	ldr	r0, [sp, #4]
 80099e8:	f7ff fe06 	bl	80095f8 <strptime_l>
 80099ec:	9003      	str	r0, [sp, #12]
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d061      	beq.n	8009ab6 <strptime_l+0x4be>
 80099f2:	9001      	str	r0, [sp, #4]
 80099f4:	e645      	b.n	8009682 <strptime_l+0x8a>
 80099f6:	49a2      	ldr	r1, [pc, #648]	; (8009c80 <strptime_l+0x688>)
 80099f8:	4653      	mov	r3, sl
 80099fa:	4622      	mov	r2, r4
 80099fc:	e7f3      	b.n	80099e6 <strptime_l+0x3ee>
 80099fe:	f7fe f9ad 	bl	8007d5c <__errno>
 8009a02:	f8d0 b000 	ldr.w	fp, [r0]
 8009a06:	f7fe f9a9 	bl	8007d5c <__errno>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	6003      	str	r3, [r0, #0]
 8009a0e:	220a      	movs	r2, #10
 8009a10:	9801      	ldr	r0, [sp, #4]
 8009a12:	4653      	mov	r3, sl
 8009a14:	a903      	add	r1, sp, #12
 8009a16:	f001 f8ab 	bl	800ab70 <strtoll_l>
 8009a1a:	9a01      	ldr	r2, [sp, #4]
 8009a1c:	4689      	mov	r9, r1
 8009a1e:	9903      	ldr	r1, [sp, #12]
 8009a20:	4680      	mov	r8, r0
 8009a22:	4291      	cmp	r1, r2
 8009a24:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8009a28:	d045      	beq.n	8009ab6 <strptime_l+0x4be>
 8009a2a:	f7fe f997 	bl	8007d5c <__errno>
 8009a2e:	6803      	ldr	r3, [r0, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d140      	bne.n	8009ab6 <strptime_l+0x4be>
 8009a34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a38:	454b      	cmp	r3, r9
 8009a3a:	bf08      	it	eq
 8009a3c:	4542      	cmpeq	r2, r8
 8009a3e:	d13a      	bne.n	8009ab6 <strptime_l+0x4be>
 8009a40:	4621      	mov	r1, r4
 8009a42:	a804      	add	r0, sp, #16
 8009a44:	f002 f810 	bl	800ba68 <localtime_r>
 8009a48:	4284      	cmp	r4, r0
 8009a4a:	d134      	bne.n	8009ab6 <strptime_l+0x4be>
 8009a4c:	f7fe f986 	bl	8007d5c <__errno>
 8009a50:	9b03      	ldr	r3, [sp, #12]
 8009a52:	f8c0 b000 	str.w	fp, [r0]
 8009a56:	f04f 081f 	mov.w	r8, #31
 8009a5a:	9301      	str	r3, [sp, #4]
 8009a5c:	e611      	b.n	8009682 <strptime_l+0x8a>
 8009a5e:	4653      	mov	r3, sl
 8009a60:	220a      	movs	r2, #10
 8009a62:	9801      	ldr	r0, [sp, #4]
 8009a64:	a903      	add	r1, sp, #12
 8009a66:	f000 ffe3 	bl	800aa30 <strtol_l>
 8009a6a:	9b03      	ldr	r3, [sp, #12]
 8009a6c:	9a01      	ldr	r2, [sp, #4]
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d021      	beq.n	8009ab6 <strptime_l+0x4be>
 8009a72:	6020      	str	r0, [r4, #0]
 8009a74:	e74d      	b.n	8009912 <strptime_l+0x31a>
 8009a76:	9b01      	ldr	r3, [sp, #4]
 8009a78:	781a      	ldrb	r2, [r3, #0]
 8009a7a:	2a09      	cmp	r2, #9
 8009a7c:	e79b      	b.n	80099b6 <strptime_l+0x3be>
 8009a7e:	4981      	ldr	r1, [pc, #516]	; (8009c84 <strptime_l+0x68c>)
 8009a80:	4653      	mov	r3, sl
 8009a82:	4622      	mov	r2, r4
 8009a84:	e7af      	b.n	80099e6 <strptime_l+0x3ee>
 8009a86:	4653      	mov	r3, sl
 8009a88:	220a      	movs	r2, #10
 8009a8a:	9801      	ldr	r0, [sp, #4]
 8009a8c:	a903      	add	r1, sp, #12
 8009a8e:	f000 ffcf 	bl	800aa30 <strtol_l>
 8009a92:	9b03      	ldr	r3, [sp, #12]
 8009a94:	9a01      	ldr	r2, [sp, #4]
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d00d      	beq.n	8009ab6 <strptime_l+0x4be>
 8009a9a:	3801      	subs	r0, #1
 8009a9c:	61a0      	str	r0, [r4, #24]
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	e6c8      	b.n	8009834 <strptime_l+0x23c>
 8009aa2:	4653      	mov	r3, sl
 8009aa4:	220a      	movs	r2, #10
 8009aa6:	9801      	ldr	r0, [sp, #4]
 8009aa8:	a903      	add	r1, sp, #12
 8009aaa:	f000 ffc1 	bl	800aa30 <strtol_l>
 8009aae:	9b03      	ldr	r3, [sp, #12]
 8009ab0:	9a01      	ldr	r2, [sp, #4]
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d1f2      	bne.n	8009a9c <strptime_l+0x4a4>
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	b007      	add	sp, #28
 8009aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009abe:	4653      	mov	r3, sl
 8009ac0:	9801      	ldr	r0, [sp, #4]
 8009ac2:	220a      	movs	r2, #10
 8009ac4:	a903      	add	r1, sp, #12
 8009ac6:	f000 ffb3 	bl	800aa30 <strtol_l>
 8009aca:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009ace:	9b01      	ldr	r3, [sp, #4]
 8009ad0:	459b      	cmp	fp, r3
 8009ad2:	4681      	mov	r9, r0
 8009ad4:	d0ef      	beq.n	8009ab6 <strptime_l+0x4be>
 8009ad6:	6960      	ldr	r0, [r4, #20]
 8009ad8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009adc:	f7ff fd56 	bl	800958c <first_day>
 8009ae0:	69a3      	ldr	r3, [r4, #24]
 8009ae2:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8009ae6:	444b      	add	r3, r9
 8009ae8:	1a1b      	subs	r3, r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	61e3      	str	r3, [r4, #28]
 8009aee:	da02      	bge.n	8009af6 <strptime_l+0x4fe>
 8009af0:	61a0      	str	r0, [r4, #24]
 8009af2:	2300      	movs	r3, #0
 8009af4:	61e3      	str	r3, [r4, #28]
 8009af6:	f8cd b004 	str.w	fp, [sp, #4]
 8009afa:	e73a      	b.n	8009972 <strptime_l+0x37a>
 8009afc:	4653      	mov	r3, sl
 8009afe:	9801      	ldr	r0, [sp, #4]
 8009b00:	220a      	movs	r2, #10
 8009b02:	a903      	add	r1, sp, #12
 8009b04:	f000 ff94 	bl	800aa30 <strtol_l>
 8009b08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009b0c:	9b01      	ldr	r3, [sp, #4]
 8009b0e:	459b      	cmp	fp, r3
 8009b10:	4681      	mov	r9, r0
 8009b12:	d0d0      	beq.n	8009ab6 <strptime_l+0x4be>
 8009b14:	6960      	ldr	r0, [r4, #20]
 8009b16:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009b1a:	f7ff fd37 	bl	800958c <first_day>
 8009b1e:	2307      	movs	r3, #7
 8009b20:	3006      	adds	r0, #6
 8009b22:	fb90 f3f3 	sdiv	r3, r0, r3
 8009b26:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009b2a:	1ac2      	subs	r2, r0, r3
 8009b2c:	2a03      	cmp	r2, #3
 8009b2e:	f109 30ff 	add.w	r0, r9, #4294967295
 8009b32:	bfcc      	ite	gt
 8009b34:	2300      	movgt	r3, #0
 8009b36:	2307      	movle	r3, #7
 8009b38:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8009b3c:	4403      	add	r3, r0
 8009b3e:	69a0      	ldr	r0, [r4, #24]
 8009b40:	4403      	add	r3, r0
 8009b42:	1a9b      	subs	r3, r3, r2
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	61e3      	str	r3, [r4, #28]
 8009b48:	dad5      	bge.n	8009af6 <strptime_l+0x4fe>
 8009b4a:	61a2      	str	r2, [r4, #24]
 8009b4c:	e7d1      	b.n	8009af2 <strptime_l+0x4fa>
 8009b4e:	4653      	mov	r3, sl
 8009b50:	9801      	ldr	r0, [sp, #4]
 8009b52:	220a      	movs	r2, #10
 8009b54:	a903      	add	r1, sp, #12
 8009b56:	f000 ff6b 	bl	800aa30 <strtol_l>
 8009b5a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009b5e:	9b01      	ldr	r3, [sp, #4]
 8009b60:	4599      	cmp	r9, r3
 8009b62:	4683      	mov	fp, r0
 8009b64:	d0a7      	beq.n	8009ab6 <strptime_l+0x4be>
 8009b66:	6960      	ldr	r0, [r4, #20]
 8009b68:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009b6c:	f7ff fd0e 	bl	800958c <first_day>
 8009b70:	69a1      	ldr	r1, [r4, #24]
 8009b72:	3006      	adds	r0, #6
 8009b74:	f04f 0c07 	mov.w	ip, #7
 8009b78:	fb90 f2fc 	sdiv	r2, r0, ip
 8009b7c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009b80:	1a83      	subs	r3, r0, r2
 8009b82:	3106      	adds	r1, #6
 8009b84:	fb91 f2fc 	sdiv	r2, r1, ip
 8009b88:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009b8c:	1a89      	subs	r1, r1, r2
 8009b8e:	ebcb 02cb 	rsb	r2, fp, fp, lsl #3
 8009b92:	440a      	add	r2, r1
 8009b94:	1ad2      	subs	r2, r2, r3
 8009b96:	2a00      	cmp	r2, #0
 8009b98:	61e2      	str	r2, [r4, #28]
 8009b9a:	da09      	bge.n	8009bb0 <strptime_l+0x5b8>
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	fb93 fcfc 	sdiv	ip, r3, ip
 8009ba2:	ebcc 0ccc 	rsb	ip, ip, ip, lsl #3
 8009ba6:	eba3 030c 	sub.w	r3, r3, ip
 8009baa:	61a3      	str	r3, [r4, #24]
 8009bac:	2300      	movs	r3, #0
 8009bae:	61e3      	str	r3, [r4, #28]
 8009bb0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009bb4:	e6dd      	b.n	8009972 <strptime_l+0x37a>
 8009bb6:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
 8009bba:	4653      	mov	r3, sl
 8009bbc:	4622      	mov	r2, r4
 8009bbe:	e674      	b.n	80098aa <strptime_l+0x2b2>
 8009bc0:	f8d6 1098 	ldr.w	r1, [r6, #152]	; 0x98
 8009bc4:	4653      	mov	r3, sl
 8009bc6:	4622      	mov	r2, r4
 8009bc8:	e70d      	b.n	80099e6 <strptime_l+0x3ee>
 8009bca:	4653      	mov	r3, sl
 8009bcc:	220a      	movs	r2, #10
 8009bce:	9801      	ldr	r0, [sp, #4]
 8009bd0:	a903      	add	r1, sp, #12
 8009bd2:	f000 ff2d 	bl	800aa30 <strtol_l>
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	9a01      	ldr	r2, [sp, #4]
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	f43f af6b 	beq.w	8009ab6 <strptime_l+0x4be>
 8009be0:	2845      	cmp	r0, #69	; 0x45
 8009be2:	dc00      	bgt.n	8009be6 <strptime_l+0x5ee>
 8009be4:	3064      	adds	r0, #100	; 0x64
 8009be6:	6160      	str	r0, [r4, #20]
 8009be8:	9301      	str	r3, [sp, #4]
 8009bea:	e649      	b.n	8009880 <strptime_l+0x288>
 8009bec:	4653      	mov	r3, sl
 8009bee:	220a      	movs	r2, #10
 8009bf0:	9801      	ldr	r0, [sp, #4]
 8009bf2:	a903      	add	r1, sp, #12
 8009bf4:	f000 ff1c 	bl	800aa30 <strtol_l>
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	9a01      	ldr	r2, [sp, #4]
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	f43f af5a 	beq.w	8009ab6 <strptime_l+0x4be>
 8009c02:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 8009c06:	e7ee      	b.n	8009be6 <strptime_l+0x5ee>
 8009c08:	3501      	adds	r5, #1
 8009c0a:	9b01      	ldr	r3, [sp, #4]
 8009c0c:	781a      	ldrb	r2, [r3, #0]
 8009c0e:	2a25      	cmp	r2, #37	; 0x25
 8009c10:	e6d1      	b.n	80099b6 <strptime_l+0x3be>
 8009c12:	9a01      	ldr	r2, [sp, #4]
 8009c14:	7811      	ldrb	r1, [r2, #0]
 8009c16:	2925      	cmp	r1, #37	; 0x25
 8009c18:	d102      	bne.n	8009c20 <strptime_l+0x628>
 8009c1a:	9b01      	ldr	r3, [sp, #4]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	e678      	b.n	8009912 <strptime_l+0x31a>
 8009c20:	1c51      	adds	r1, r2, #1
 8009c22:	9101      	str	r1, [sp, #4]
 8009c24:	7852      	ldrb	r2, [r2, #1]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d0f7      	beq.n	8009c1a <strptime_l+0x622>
 8009c2a:	e744      	b.n	8009ab6 <strptime_l+0x4be>
 8009c2c:	9b01      	ldr	r3, [sp, #4]
 8009c2e:	7819      	ldrb	r1, [r3, #0]
 8009c30:	4291      	cmp	r1, r2
 8009c32:	e6c0      	b.n	80099b6 <strptime_l+0x3be>
 8009c34:	f008 0314 	and.w	r3, r8, #20
 8009c38:	2b14      	cmp	r3, #20
 8009c3a:	f47f ad05 	bne.w	8009648 <strptime_l+0x50>
 8009c3e:	f018 0302 	ands.w	r3, r8, #2
 8009c42:	d103      	bne.n	8009c4c <strptime_l+0x654>
 8009c44:	69e1      	ldr	r1, [r4, #28]
 8009c46:	291e      	cmp	r1, #30
 8009c48:	dc20      	bgt.n	8009c8c <strptime_l+0x694>
 8009c4a:	6123      	str	r3, [r4, #16]
 8009c4c:	f018 0f01 	tst.w	r8, #1
 8009c50:	f47f acfa 	bne.w	8009648 <strptime_l+0x50>
 8009c54:	6925      	ldr	r5, [r4, #16]
 8009c56:	4b0c      	ldr	r3, [pc, #48]	; (8009c88 <strptime_l+0x690>)
 8009c58:	69e1      	ldr	r1, [r4, #28]
 8009c5a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009c5e:	6960      	ldr	r0, [r4, #20]
 8009c60:	1ac9      	subs	r1, r1, r3
 8009c62:	60e1      	str	r1, [r4, #12]
 8009c64:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009c68:	f7ff fc7a 	bl	8009560 <is_leap_year>
 8009c6c:	b110      	cbz	r0, 8009c74 <strptime_l+0x67c>
 8009c6e:	2d01      	cmp	r5, #1
 8009c70:	f73f acea 	bgt.w	8009648 <strptime_l+0x50>
 8009c74:	3101      	adds	r1, #1
 8009c76:	60e1      	str	r1, [r4, #12]
 8009c78:	e4e6      	b.n	8009648 <strptime_l+0x50>
 8009c7a:	bf00      	nop
 8009c7c:	0800e1e8 	.word	0x0800e1e8
 8009c80:	0800df8b 	.word	0x0800df8b
 8009c84:	0800df91 	.word	0x0800df91
 8009c88:	0800df9c 	.word	0x0800df9c
 8009c8c:	6960      	ldr	r0, [r4, #20]
 8009c8e:	4d08      	ldr	r5, [pc, #32]	; (8009cb0 <strptime_l+0x6b8>)
 8009c90:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009c94:	f7ff fc64 	bl	8009560 <is_leap_year>
 8009c98:	2302      	movs	r3, #2
 8009c9a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8009c9e:	4402      	add	r2, r0
 8009ca0:	4291      	cmp	r1, r2
 8009ca2:	db02      	blt.n	8009caa <strptime_l+0x6b2>
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	2b0c      	cmp	r3, #12
 8009ca8:	d1f7      	bne.n	8009c9a <strptime_l+0x6a2>
 8009caa:	3b01      	subs	r3, #1
 8009cac:	e7cd      	b.n	8009c4a <strptime_l+0x652>
 8009cae:	bf00      	nop
 8009cb0:	0800df9c 	.word	0x0800df9c

08009cb4 <strptime>:
 8009cb4:	4b01      	ldr	r3, [pc, #4]	; (8009cbc <strptime+0x8>)
 8009cb6:	f7ff bc9f 	b.w	80095f8 <strptime_l>
 8009cba:	bf00      	nop
 8009cbc:	200000ec 	.word	0x200000ec

08009cc0 <sulp>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	460d      	mov	r5, r1
 8009cc6:	ec45 4b10 	vmov	d0, r4, r5
 8009cca:	4616      	mov	r6, r2
 8009ccc:	f002 fbc2 	bl	800c454 <__ulp>
 8009cd0:	ec51 0b10 	vmov	r0, r1, d0
 8009cd4:	b17e      	cbz	r6, 8009cf6 <sulp+0x36>
 8009cd6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009cda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	dd09      	ble.n	8009cf6 <sulp+0x36>
 8009ce2:	051b      	lsls	r3, r3, #20
 8009ce4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009ce8:	2400      	movs	r4, #0
 8009cea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009cee:	4622      	mov	r2, r4
 8009cf0:	462b      	mov	r3, r5
 8009cf2:	f7f6 fc99 	bl	8000628 <__aeabi_dmul>
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}

08009cf8 <_strtod_l>:
 8009cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfc:	b0a3      	sub	sp, #140	; 0x8c
 8009cfe:	461f      	mov	r7, r3
 8009d00:	2300      	movs	r3, #0
 8009d02:	931e      	str	r3, [sp, #120]	; 0x78
 8009d04:	4ba4      	ldr	r3, [pc, #656]	; (8009f98 <_strtod_l+0x2a0>)
 8009d06:	9219      	str	r2, [sp, #100]	; 0x64
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	9307      	str	r3, [sp, #28]
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	4618      	mov	r0, r3
 8009d10:	4688      	mov	r8, r1
 8009d12:	f7f6 fa6f 	bl	80001f4 <strlen>
 8009d16:	f04f 0a00 	mov.w	sl, #0
 8009d1a:	4605      	mov	r5, r0
 8009d1c:	f04f 0b00 	mov.w	fp, #0
 8009d20:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009d24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d26:	781a      	ldrb	r2, [r3, #0]
 8009d28:	2a2b      	cmp	r2, #43	; 0x2b
 8009d2a:	d04c      	beq.n	8009dc6 <_strtod_l+0xce>
 8009d2c:	d839      	bhi.n	8009da2 <_strtod_l+0xaa>
 8009d2e:	2a0d      	cmp	r2, #13
 8009d30:	d832      	bhi.n	8009d98 <_strtod_l+0xa0>
 8009d32:	2a08      	cmp	r2, #8
 8009d34:	d832      	bhi.n	8009d9c <_strtod_l+0xa4>
 8009d36:	2a00      	cmp	r2, #0
 8009d38:	d03c      	beq.n	8009db4 <_strtod_l+0xbc>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	930e      	str	r3, [sp, #56]	; 0x38
 8009d3e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009d40:	7833      	ldrb	r3, [r6, #0]
 8009d42:	2b30      	cmp	r3, #48	; 0x30
 8009d44:	f040 80b4 	bne.w	8009eb0 <_strtod_l+0x1b8>
 8009d48:	7873      	ldrb	r3, [r6, #1]
 8009d4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d4e:	2b58      	cmp	r3, #88	; 0x58
 8009d50:	d16c      	bne.n	8009e2c <_strtod_l+0x134>
 8009d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	ab1e      	add	r3, sp, #120	; 0x78
 8009d58:	9702      	str	r7, [sp, #8]
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	4a8f      	ldr	r2, [pc, #572]	; (8009f9c <_strtod_l+0x2a4>)
 8009d5e:	ab1f      	add	r3, sp, #124	; 0x7c
 8009d60:	a91d      	add	r1, sp, #116	; 0x74
 8009d62:	4620      	mov	r0, r4
 8009d64:	f001 fb2e 	bl	800b3c4 <__gethex>
 8009d68:	f010 0707 	ands.w	r7, r0, #7
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	d005      	beq.n	8009d7c <_strtod_l+0x84>
 8009d70:	2f06      	cmp	r7, #6
 8009d72:	d12a      	bne.n	8009dca <_strtod_l+0xd2>
 8009d74:	3601      	adds	r6, #1
 8009d76:	2300      	movs	r3, #0
 8009d78:	961d      	str	r6, [sp, #116]	; 0x74
 8009d7a:	930e      	str	r3, [sp, #56]	; 0x38
 8009d7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f040 8596 	bne.w	800a8b0 <_strtod_l+0xbb8>
 8009d84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d86:	b1db      	cbz	r3, 8009dc0 <_strtod_l+0xc8>
 8009d88:	4652      	mov	r2, sl
 8009d8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009d8e:	ec43 2b10 	vmov	d0, r2, r3
 8009d92:	b023      	add	sp, #140	; 0x8c
 8009d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d98:	2a20      	cmp	r2, #32
 8009d9a:	d1ce      	bne.n	8009d3a <_strtod_l+0x42>
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	931d      	str	r3, [sp, #116]	; 0x74
 8009da0:	e7c0      	b.n	8009d24 <_strtod_l+0x2c>
 8009da2:	2a2d      	cmp	r2, #45	; 0x2d
 8009da4:	d1c9      	bne.n	8009d3a <_strtod_l+0x42>
 8009da6:	2201      	movs	r2, #1
 8009da8:	920e      	str	r2, [sp, #56]	; 0x38
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	921d      	str	r2, [sp, #116]	; 0x74
 8009dae:	785b      	ldrb	r3, [r3, #1]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1c4      	bne.n	8009d3e <_strtod_l+0x46>
 8009db4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009db6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f040 8576 	bne.w	800a8ac <_strtod_l+0xbb4>
 8009dc0:	4652      	mov	r2, sl
 8009dc2:	465b      	mov	r3, fp
 8009dc4:	e7e3      	b.n	8009d8e <_strtod_l+0x96>
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	e7ee      	b.n	8009da8 <_strtod_l+0xb0>
 8009dca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009dcc:	b13a      	cbz	r2, 8009dde <_strtod_l+0xe6>
 8009dce:	2135      	movs	r1, #53	; 0x35
 8009dd0:	a820      	add	r0, sp, #128	; 0x80
 8009dd2:	f002 fc4a 	bl	800c66a <__copybits>
 8009dd6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f002 f80f 	bl	800bdfc <_Bfree>
 8009dde:	3f01      	subs	r7, #1
 8009de0:	2f05      	cmp	r7, #5
 8009de2:	d807      	bhi.n	8009df4 <_strtod_l+0xfc>
 8009de4:	e8df f007 	tbb	[pc, r7]
 8009de8:	1d180b0e 	.word	0x1d180b0e
 8009dec:	030e      	.short	0x030e
 8009dee:	f04f 0b00 	mov.w	fp, #0
 8009df2:	46da      	mov	sl, fp
 8009df4:	0728      	lsls	r0, r5, #28
 8009df6:	d5c1      	bpl.n	8009d7c <_strtod_l+0x84>
 8009df8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009dfc:	e7be      	b.n	8009d7c <_strtod_l+0x84>
 8009dfe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009e02:	e7f7      	b.n	8009df4 <_strtod_l+0xfc>
 8009e04:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009e08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009e0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009e0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009e12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009e16:	e7ed      	b.n	8009df4 <_strtod_l+0xfc>
 8009e18:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009fa0 <_strtod_l+0x2a8>
 8009e1c:	f04f 0a00 	mov.w	sl, #0
 8009e20:	e7e8      	b.n	8009df4 <_strtod_l+0xfc>
 8009e22:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009e26:	f04f 3aff 	mov.w	sl, #4294967295
 8009e2a:	e7e3      	b.n	8009df4 <_strtod_l+0xfc>
 8009e2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	921d      	str	r2, [sp, #116]	; 0x74
 8009e32:	785b      	ldrb	r3, [r3, #1]
 8009e34:	2b30      	cmp	r3, #48	; 0x30
 8009e36:	d0f9      	beq.n	8009e2c <_strtod_l+0x134>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d09f      	beq.n	8009d7c <_strtod_l+0x84>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	f04f 0900 	mov.w	r9, #0
 8009e42:	9304      	str	r3, [sp, #16]
 8009e44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e46:	930a      	str	r3, [sp, #40]	; 0x28
 8009e48:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009e4c:	464f      	mov	r7, r9
 8009e4e:	220a      	movs	r2, #10
 8009e50:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009e52:	7806      	ldrb	r6, [r0, #0]
 8009e54:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009e58:	b2d9      	uxtb	r1, r3
 8009e5a:	2909      	cmp	r1, #9
 8009e5c:	d92a      	bls.n	8009eb4 <_strtod_l+0x1bc>
 8009e5e:	9907      	ldr	r1, [sp, #28]
 8009e60:	462a      	mov	r2, r5
 8009e62:	f7ff fb6b 	bl	800953c <strncmp>
 8009e66:	b398      	cbz	r0, 8009ed0 <_strtod_l+0x1d8>
 8009e68:	2000      	movs	r0, #0
 8009e6a:	4633      	mov	r3, r6
 8009e6c:	463d      	mov	r5, r7
 8009e6e:	9007      	str	r0, [sp, #28]
 8009e70:	4602      	mov	r2, r0
 8009e72:	2b65      	cmp	r3, #101	; 0x65
 8009e74:	d001      	beq.n	8009e7a <_strtod_l+0x182>
 8009e76:	2b45      	cmp	r3, #69	; 0x45
 8009e78:	d118      	bne.n	8009eac <_strtod_l+0x1b4>
 8009e7a:	b91d      	cbnz	r5, 8009e84 <_strtod_l+0x18c>
 8009e7c:	9b04      	ldr	r3, [sp, #16]
 8009e7e:	4303      	orrs	r3, r0
 8009e80:	d098      	beq.n	8009db4 <_strtod_l+0xbc>
 8009e82:	2500      	movs	r5, #0
 8009e84:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009e88:	f108 0301 	add.w	r3, r8, #1
 8009e8c:	931d      	str	r3, [sp, #116]	; 0x74
 8009e8e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009e92:	2b2b      	cmp	r3, #43	; 0x2b
 8009e94:	d075      	beq.n	8009f82 <_strtod_l+0x28a>
 8009e96:	2b2d      	cmp	r3, #45	; 0x2d
 8009e98:	d07b      	beq.n	8009f92 <_strtod_l+0x29a>
 8009e9a:	f04f 0c00 	mov.w	ip, #0
 8009e9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009ea2:	2909      	cmp	r1, #9
 8009ea4:	f240 8082 	bls.w	8009fac <_strtod_l+0x2b4>
 8009ea8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009eac:	2600      	movs	r6, #0
 8009eae:	e09d      	b.n	8009fec <_strtod_l+0x2f4>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	e7c4      	b.n	8009e3e <_strtod_l+0x146>
 8009eb4:	2f08      	cmp	r7, #8
 8009eb6:	bfd8      	it	le
 8009eb8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009eba:	f100 0001 	add.w	r0, r0, #1
 8009ebe:	bfda      	itte	le
 8009ec0:	fb02 3301 	mlale	r3, r2, r1, r3
 8009ec4:	9309      	strle	r3, [sp, #36]	; 0x24
 8009ec6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009eca:	3701      	adds	r7, #1
 8009ecc:	901d      	str	r0, [sp, #116]	; 0x74
 8009ece:	e7bf      	b.n	8009e50 <_strtod_l+0x158>
 8009ed0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ed2:	195a      	adds	r2, r3, r5
 8009ed4:	921d      	str	r2, [sp, #116]	; 0x74
 8009ed6:	5d5b      	ldrb	r3, [r3, r5]
 8009ed8:	2f00      	cmp	r7, #0
 8009eda:	d037      	beq.n	8009f4c <_strtod_l+0x254>
 8009edc:	9007      	str	r0, [sp, #28]
 8009ede:	463d      	mov	r5, r7
 8009ee0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009ee4:	2a09      	cmp	r2, #9
 8009ee6:	d912      	bls.n	8009f0e <_strtod_l+0x216>
 8009ee8:	2201      	movs	r2, #1
 8009eea:	e7c2      	b.n	8009e72 <_strtod_l+0x17a>
 8009eec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009eee:	1c5a      	adds	r2, r3, #1
 8009ef0:	921d      	str	r2, [sp, #116]	; 0x74
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	2b30      	cmp	r3, #48	; 0x30
 8009ef8:	d0f8      	beq.n	8009eec <_strtod_l+0x1f4>
 8009efa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009efe:	2a08      	cmp	r2, #8
 8009f00:	f200 84db 	bhi.w	800a8ba <_strtod_l+0xbc2>
 8009f04:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009f06:	9007      	str	r0, [sp, #28]
 8009f08:	2000      	movs	r0, #0
 8009f0a:	920a      	str	r2, [sp, #40]	; 0x28
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	3b30      	subs	r3, #48	; 0x30
 8009f10:	f100 0201 	add.w	r2, r0, #1
 8009f14:	d014      	beq.n	8009f40 <_strtod_l+0x248>
 8009f16:	9907      	ldr	r1, [sp, #28]
 8009f18:	4411      	add	r1, r2
 8009f1a:	9107      	str	r1, [sp, #28]
 8009f1c:	462a      	mov	r2, r5
 8009f1e:	eb00 0e05 	add.w	lr, r0, r5
 8009f22:	210a      	movs	r1, #10
 8009f24:	4572      	cmp	r2, lr
 8009f26:	d113      	bne.n	8009f50 <_strtod_l+0x258>
 8009f28:	182a      	adds	r2, r5, r0
 8009f2a:	2a08      	cmp	r2, #8
 8009f2c:	f105 0501 	add.w	r5, r5, #1
 8009f30:	4405      	add	r5, r0
 8009f32:	dc1c      	bgt.n	8009f6e <_strtod_l+0x276>
 8009f34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f36:	220a      	movs	r2, #10
 8009f38:	fb02 3301 	mla	r3, r2, r1, r3
 8009f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f3e:	2200      	movs	r2, #0
 8009f40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f42:	1c59      	adds	r1, r3, #1
 8009f44:	911d      	str	r1, [sp, #116]	; 0x74
 8009f46:	785b      	ldrb	r3, [r3, #1]
 8009f48:	4610      	mov	r0, r2
 8009f4a:	e7c9      	b.n	8009ee0 <_strtod_l+0x1e8>
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	e7d2      	b.n	8009ef6 <_strtod_l+0x1fe>
 8009f50:	2a08      	cmp	r2, #8
 8009f52:	dc04      	bgt.n	8009f5e <_strtod_l+0x266>
 8009f54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009f56:	434e      	muls	r6, r1
 8009f58:	9609      	str	r6, [sp, #36]	; 0x24
 8009f5a:	3201      	adds	r2, #1
 8009f5c:	e7e2      	b.n	8009f24 <_strtod_l+0x22c>
 8009f5e:	f102 0c01 	add.w	ip, r2, #1
 8009f62:	f1bc 0f10 	cmp.w	ip, #16
 8009f66:	bfd8      	it	le
 8009f68:	fb01 f909 	mulle.w	r9, r1, r9
 8009f6c:	e7f5      	b.n	8009f5a <_strtod_l+0x262>
 8009f6e:	2d10      	cmp	r5, #16
 8009f70:	bfdc      	itt	le
 8009f72:	220a      	movle	r2, #10
 8009f74:	fb02 3909 	mlale	r9, r2, r9, r3
 8009f78:	e7e1      	b.n	8009f3e <_strtod_l+0x246>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	9307      	str	r3, [sp, #28]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	e77c      	b.n	8009e7c <_strtod_l+0x184>
 8009f82:	f04f 0c00 	mov.w	ip, #0
 8009f86:	f108 0302 	add.w	r3, r8, #2
 8009f8a:	931d      	str	r3, [sp, #116]	; 0x74
 8009f8c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009f90:	e785      	b.n	8009e9e <_strtod_l+0x1a6>
 8009f92:	f04f 0c01 	mov.w	ip, #1
 8009f96:	e7f6      	b.n	8009f86 <_strtod_l+0x28e>
 8009f98:	0800e2f8 	.word	0x0800e2f8
 8009f9c:	0800dfd8 	.word	0x0800dfd8
 8009fa0:	7ff00000 	.word	0x7ff00000
 8009fa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fa6:	1c59      	adds	r1, r3, #1
 8009fa8:	911d      	str	r1, [sp, #116]	; 0x74
 8009faa:	785b      	ldrb	r3, [r3, #1]
 8009fac:	2b30      	cmp	r3, #48	; 0x30
 8009fae:	d0f9      	beq.n	8009fa4 <_strtod_l+0x2ac>
 8009fb0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009fb4:	2908      	cmp	r1, #8
 8009fb6:	f63f af79 	bhi.w	8009eac <_strtod_l+0x1b4>
 8009fba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009fbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fc0:	9308      	str	r3, [sp, #32]
 8009fc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fc4:	1c59      	adds	r1, r3, #1
 8009fc6:	911d      	str	r1, [sp, #116]	; 0x74
 8009fc8:	785b      	ldrb	r3, [r3, #1]
 8009fca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009fce:	2e09      	cmp	r6, #9
 8009fd0:	d937      	bls.n	800a042 <_strtod_l+0x34a>
 8009fd2:	9e08      	ldr	r6, [sp, #32]
 8009fd4:	1b89      	subs	r1, r1, r6
 8009fd6:	2908      	cmp	r1, #8
 8009fd8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009fdc:	dc02      	bgt.n	8009fe4 <_strtod_l+0x2ec>
 8009fde:	4576      	cmp	r6, lr
 8009fe0:	bfa8      	it	ge
 8009fe2:	4676      	movge	r6, lr
 8009fe4:	f1bc 0f00 	cmp.w	ip, #0
 8009fe8:	d000      	beq.n	8009fec <_strtod_l+0x2f4>
 8009fea:	4276      	negs	r6, r6
 8009fec:	2d00      	cmp	r5, #0
 8009fee:	d14f      	bne.n	800a090 <_strtod_l+0x398>
 8009ff0:	9904      	ldr	r1, [sp, #16]
 8009ff2:	4301      	orrs	r1, r0
 8009ff4:	f47f aec2 	bne.w	8009d7c <_strtod_l+0x84>
 8009ff8:	2a00      	cmp	r2, #0
 8009ffa:	f47f aedb 	bne.w	8009db4 <_strtod_l+0xbc>
 8009ffe:	2b69      	cmp	r3, #105	; 0x69
 800a000:	d027      	beq.n	800a052 <_strtod_l+0x35a>
 800a002:	dc24      	bgt.n	800a04e <_strtod_l+0x356>
 800a004:	2b49      	cmp	r3, #73	; 0x49
 800a006:	d024      	beq.n	800a052 <_strtod_l+0x35a>
 800a008:	2b4e      	cmp	r3, #78	; 0x4e
 800a00a:	f47f aed3 	bne.w	8009db4 <_strtod_l+0xbc>
 800a00e:	499e      	ldr	r1, [pc, #632]	; (800a288 <_strtod_l+0x590>)
 800a010:	a81d      	add	r0, sp, #116	; 0x74
 800a012:	f001 fc2f 	bl	800b874 <__match>
 800a016:	2800      	cmp	r0, #0
 800a018:	f43f aecc 	beq.w	8009db4 <_strtod_l+0xbc>
 800a01c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	2b28      	cmp	r3, #40	; 0x28
 800a022:	d12d      	bne.n	800a080 <_strtod_l+0x388>
 800a024:	4999      	ldr	r1, [pc, #612]	; (800a28c <_strtod_l+0x594>)
 800a026:	aa20      	add	r2, sp, #128	; 0x80
 800a028:	a81d      	add	r0, sp, #116	; 0x74
 800a02a:	f001 fc37 	bl	800b89c <__hexnan>
 800a02e:	2805      	cmp	r0, #5
 800a030:	d126      	bne.n	800a080 <_strtod_l+0x388>
 800a032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a034:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a038:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a03c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a040:	e69c      	b.n	8009d7c <_strtod_l+0x84>
 800a042:	210a      	movs	r1, #10
 800a044:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a048:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a04c:	e7b9      	b.n	8009fc2 <_strtod_l+0x2ca>
 800a04e:	2b6e      	cmp	r3, #110	; 0x6e
 800a050:	e7db      	b.n	800a00a <_strtod_l+0x312>
 800a052:	498f      	ldr	r1, [pc, #572]	; (800a290 <_strtod_l+0x598>)
 800a054:	a81d      	add	r0, sp, #116	; 0x74
 800a056:	f001 fc0d 	bl	800b874 <__match>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	f43f aeaa 	beq.w	8009db4 <_strtod_l+0xbc>
 800a060:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a062:	498c      	ldr	r1, [pc, #560]	; (800a294 <_strtod_l+0x59c>)
 800a064:	3b01      	subs	r3, #1
 800a066:	a81d      	add	r0, sp, #116	; 0x74
 800a068:	931d      	str	r3, [sp, #116]	; 0x74
 800a06a:	f001 fc03 	bl	800b874 <__match>
 800a06e:	b910      	cbnz	r0, 800a076 <_strtod_l+0x37e>
 800a070:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a072:	3301      	adds	r3, #1
 800a074:	931d      	str	r3, [sp, #116]	; 0x74
 800a076:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800a2a4 <_strtod_l+0x5ac>
 800a07a:	f04f 0a00 	mov.w	sl, #0
 800a07e:	e67d      	b.n	8009d7c <_strtod_l+0x84>
 800a080:	4885      	ldr	r0, [pc, #532]	; (800a298 <_strtod_l+0x5a0>)
 800a082:	f003 fae5 	bl	800d650 <nan>
 800a086:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a08a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a08e:	e675      	b.n	8009d7c <_strtod_l+0x84>
 800a090:	9b07      	ldr	r3, [sp, #28]
 800a092:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a094:	1af3      	subs	r3, r6, r3
 800a096:	2f00      	cmp	r7, #0
 800a098:	bf08      	it	eq
 800a09a:	462f      	moveq	r7, r5
 800a09c:	2d10      	cmp	r5, #16
 800a09e:	9308      	str	r3, [sp, #32]
 800a0a0:	46a8      	mov	r8, r5
 800a0a2:	bfa8      	it	ge
 800a0a4:	f04f 0810 	movge.w	r8, #16
 800a0a8:	f7f6 fa44 	bl	8000534 <__aeabi_ui2d>
 800a0ac:	2d09      	cmp	r5, #9
 800a0ae:	4682      	mov	sl, r0
 800a0b0:	468b      	mov	fp, r1
 800a0b2:	dd13      	ble.n	800a0dc <_strtod_l+0x3e4>
 800a0b4:	4b79      	ldr	r3, [pc, #484]	; (800a29c <_strtod_l+0x5a4>)
 800a0b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a0ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a0be:	f7f6 fab3 	bl	8000628 <__aeabi_dmul>
 800a0c2:	4682      	mov	sl, r0
 800a0c4:	4648      	mov	r0, r9
 800a0c6:	468b      	mov	fp, r1
 800a0c8:	f7f6 fa34 	bl	8000534 <__aeabi_ui2d>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4650      	mov	r0, sl
 800a0d2:	4659      	mov	r1, fp
 800a0d4:	f7f6 f8f2 	bl	80002bc <__adddf3>
 800a0d8:	4682      	mov	sl, r0
 800a0da:	468b      	mov	fp, r1
 800a0dc:	2d0f      	cmp	r5, #15
 800a0de:	dc38      	bgt.n	800a152 <_strtod_l+0x45a>
 800a0e0:	9b08      	ldr	r3, [sp, #32]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f43f ae4a 	beq.w	8009d7c <_strtod_l+0x84>
 800a0e8:	dd24      	ble.n	800a134 <_strtod_l+0x43c>
 800a0ea:	2b16      	cmp	r3, #22
 800a0ec:	dc0b      	bgt.n	800a106 <_strtod_l+0x40e>
 800a0ee:	4d6b      	ldr	r5, [pc, #428]	; (800a29c <_strtod_l+0x5a4>)
 800a0f0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a0f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a0f8:	4652      	mov	r2, sl
 800a0fa:	465b      	mov	r3, fp
 800a0fc:	f7f6 fa94 	bl	8000628 <__aeabi_dmul>
 800a100:	4682      	mov	sl, r0
 800a102:	468b      	mov	fp, r1
 800a104:	e63a      	b.n	8009d7c <_strtod_l+0x84>
 800a106:	9a08      	ldr	r2, [sp, #32]
 800a108:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a10c:	4293      	cmp	r3, r2
 800a10e:	db20      	blt.n	800a152 <_strtod_l+0x45a>
 800a110:	4c62      	ldr	r4, [pc, #392]	; (800a29c <_strtod_l+0x5a4>)
 800a112:	f1c5 050f 	rsb	r5, r5, #15
 800a116:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a11a:	4652      	mov	r2, sl
 800a11c:	465b      	mov	r3, fp
 800a11e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a122:	f7f6 fa81 	bl	8000628 <__aeabi_dmul>
 800a126:	9b08      	ldr	r3, [sp, #32]
 800a128:	1b5d      	subs	r5, r3, r5
 800a12a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a12e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a132:	e7e3      	b.n	800a0fc <_strtod_l+0x404>
 800a134:	9b08      	ldr	r3, [sp, #32]
 800a136:	3316      	adds	r3, #22
 800a138:	db0b      	blt.n	800a152 <_strtod_l+0x45a>
 800a13a:	9b07      	ldr	r3, [sp, #28]
 800a13c:	4a57      	ldr	r2, [pc, #348]	; (800a29c <_strtod_l+0x5a4>)
 800a13e:	1b9e      	subs	r6, r3, r6
 800a140:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a144:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a148:	4650      	mov	r0, sl
 800a14a:	4659      	mov	r1, fp
 800a14c:	f7f6 fb96 	bl	800087c <__aeabi_ddiv>
 800a150:	e7d6      	b.n	800a100 <_strtod_l+0x408>
 800a152:	9b08      	ldr	r3, [sp, #32]
 800a154:	eba5 0808 	sub.w	r8, r5, r8
 800a158:	4498      	add	r8, r3
 800a15a:	f1b8 0f00 	cmp.w	r8, #0
 800a15e:	dd71      	ble.n	800a244 <_strtod_l+0x54c>
 800a160:	f018 030f 	ands.w	r3, r8, #15
 800a164:	d00a      	beq.n	800a17c <_strtod_l+0x484>
 800a166:	494d      	ldr	r1, [pc, #308]	; (800a29c <_strtod_l+0x5a4>)
 800a168:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a16c:	4652      	mov	r2, sl
 800a16e:	465b      	mov	r3, fp
 800a170:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a174:	f7f6 fa58 	bl	8000628 <__aeabi_dmul>
 800a178:	4682      	mov	sl, r0
 800a17a:	468b      	mov	fp, r1
 800a17c:	f038 080f 	bics.w	r8, r8, #15
 800a180:	d04d      	beq.n	800a21e <_strtod_l+0x526>
 800a182:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a186:	dd22      	ble.n	800a1ce <_strtod_l+0x4d6>
 800a188:	2500      	movs	r5, #0
 800a18a:	462e      	mov	r6, r5
 800a18c:	9509      	str	r5, [sp, #36]	; 0x24
 800a18e:	9507      	str	r5, [sp, #28]
 800a190:	2322      	movs	r3, #34	; 0x22
 800a192:	f8df b110 	ldr.w	fp, [pc, #272]	; 800a2a4 <_strtod_l+0x5ac>
 800a196:	6023      	str	r3, [r4, #0]
 800a198:	f04f 0a00 	mov.w	sl, #0
 800a19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f43f adec 	beq.w	8009d7c <_strtod_l+0x84>
 800a1a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f001 fe28 	bl	800bdfc <_Bfree>
 800a1ac:	9907      	ldr	r1, [sp, #28]
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f001 fe24 	bl	800bdfc <_Bfree>
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f001 fe20 	bl	800bdfc <_Bfree>
 800a1bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f001 fe1c 	bl	800bdfc <_Bfree>
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f001 fe18 	bl	800bdfc <_Bfree>
 800a1cc:	e5d6      	b.n	8009d7c <_strtod_l+0x84>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a1d4:	4650      	mov	r0, sl
 800a1d6:	4659      	mov	r1, fp
 800a1d8:	4699      	mov	r9, r3
 800a1da:	f1b8 0f01 	cmp.w	r8, #1
 800a1de:	dc21      	bgt.n	800a224 <_strtod_l+0x52c>
 800a1e0:	b10b      	cbz	r3, 800a1e6 <_strtod_l+0x4ee>
 800a1e2:	4682      	mov	sl, r0
 800a1e4:	468b      	mov	fp, r1
 800a1e6:	4b2e      	ldr	r3, [pc, #184]	; (800a2a0 <_strtod_l+0x5a8>)
 800a1e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a1ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a1f0:	4652      	mov	r2, sl
 800a1f2:	465b      	mov	r3, fp
 800a1f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a1f8:	f7f6 fa16 	bl	8000628 <__aeabi_dmul>
 800a1fc:	4b29      	ldr	r3, [pc, #164]	; (800a2a4 <_strtod_l+0x5ac>)
 800a1fe:	460a      	mov	r2, r1
 800a200:	400b      	ands	r3, r1
 800a202:	4929      	ldr	r1, [pc, #164]	; (800a2a8 <_strtod_l+0x5b0>)
 800a204:	428b      	cmp	r3, r1
 800a206:	4682      	mov	sl, r0
 800a208:	d8be      	bhi.n	800a188 <_strtod_l+0x490>
 800a20a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a20e:	428b      	cmp	r3, r1
 800a210:	bf86      	itte	hi
 800a212:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a2ac <_strtod_l+0x5b4>
 800a216:	f04f 3aff 	movhi.w	sl, #4294967295
 800a21a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a21e:	2300      	movs	r3, #0
 800a220:	9304      	str	r3, [sp, #16]
 800a222:	e081      	b.n	800a328 <_strtod_l+0x630>
 800a224:	f018 0f01 	tst.w	r8, #1
 800a228:	d007      	beq.n	800a23a <_strtod_l+0x542>
 800a22a:	4b1d      	ldr	r3, [pc, #116]	; (800a2a0 <_strtod_l+0x5a8>)
 800a22c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a234:	f7f6 f9f8 	bl	8000628 <__aeabi_dmul>
 800a238:	2301      	movs	r3, #1
 800a23a:	f109 0901 	add.w	r9, r9, #1
 800a23e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a242:	e7ca      	b.n	800a1da <_strtod_l+0x4e2>
 800a244:	d0eb      	beq.n	800a21e <_strtod_l+0x526>
 800a246:	f1c8 0800 	rsb	r8, r8, #0
 800a24a:	f018 020f 	ands.w	r2, r8, #15
 800a24e:	d00a      	beq.n	800a266 <_strtod_l+0x56e>
 800a250:	4b12      	ldr	r3, [pc, #72]	; (800a29c <_strtod_l+0x5a4>)
 800a252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a256:	4650      	mov	r0, sl
 800a258:	4659      	mov	r1, fp
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	f7f6 fb0d 	bl	800087c <__aeabi_ddiv>
 800a262:	4682      	mov	sl, r0
 800a264:	468b      	mov	fp, r1
 800a266:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a26a:	d0d8      	beq.n	800a21e <_strtod_l+0x526>
 800a26c:	f1b8 0f1f 	cmp.w	r8, #31
 800a270:	dd1e      	ble.n	800a2b0 <_strtod_l+0x5b8>
 800a272:	2500      	movs	r5, #0
 800a274:	462e      	mov	r6, r5
 800a276:	9509      	str	r5, [sp, #36]	; 0x24
 800a278:	9507      	str	r5, [sp, #28]
 800a27a:	2322      	movs	r3, #34	; 0x22
 800a27c:	f04f 0a00 	mov.w	sl, #0
 800a280:	f04f 0b00 	mov.w	fp, #0
 800a284:	6023      	str	r3, [r4, #0]
 800a286:	e789      	b.n	800a19c <_strtod_l+0x4a4>
 800a288:	0800e029 	.word	0x0800e029
 800a28c:	0800dfec 	.word	0x0800dfec
 800a290:	0800dfcc 	.word	0x0800dfcc
 800a294:	0800dfcf 	.word	0x0800dfcf
 800a298:	0800e56d 	.word	0x0800e56d
 800a29c:	0800e410 	.word	0x0800e410
 800a2a0:	0800e3e8 	.word	0x0800e3e8
 800a2a4:	7ff00000 	.word	0x7ff00000
 800a2a8:	7ca00000 	.word	0x7ca00000
 800a2ac:	7fefffff 	.word	0x7fefffff
 800a2b0:	f018 0310 	ands.w	r3, r8, #16
 800a2b4:	bf18      	it	ne
 800a2b6:	236a      	movne	r3, #106	; 0x6a
 800a2b8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a670 <_strtod_l+0x978>
 800a2bc:	9304      	str	r3, [sp, #16]
 800a2be:	4650      	mov	r0, sl
 800a2c0:	4659      	mov	r1, fp
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	f018 0f01 	tst.w	r8, #1
 800a2c8:	d004      	beq.n	800a2d4 <_strtod_l+0x5dc>
 800a2ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a2ce:	f7f6 f9ab 	bl	8000628 <__aeabi_dmul>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a2d8:	f109 0908 	add.w	r9, r9, #8
 800a2dc:	d1f2      	bne.n	800a2c4 <_strtod_l+0x5cc>
 800a2de:	b10b      	cbz	r3, 800a2e4 <_strtod_l+0x5ec>
 800a2e0:	4682      	mov	sl, r0
 800a2e2:	468b      	mov	fp, r1
 800a2e4:	9b04      	ldr	r3, [sp, #16]
 800a2e6:	b1bb      	cbz	r3, 800a318 <_strtod_l+0x620>
 800a2e8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a2ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	4659      	mov	r1, fp
 800a2f4:	dd10      	ble.n	800a318 <_strtod_l+0x620>
 800a2f6:	2b1f      	cmp	r3, #31
 800a2f8:	f340 8128 	ble.w	800a54c <_strtod_l+0x854>
 800a2fc:	2b34      	cmp	r3, #52	; 0x34
 800a2fe:	bfde      	ittt	le
 800a300:	3b20      	suble	r3, #32
 800a302:	f04f 32ff 	movle.w	r2, #4294967295
 800a306:	fa02 f303 	lslle.w	r3, r2, r3
 800a30a:	f04f 0a00 	mov.w	sl, #0
 800a30e:	bfcc      	ite	gt
 800a310:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a314:	ea03 0b01 	andle.w	fp, r3, r1
 800a318:	2200      	movs	r2, #0
 800a31a:	2300      	movs	r3, #0
 800a31c:	4650      	mov	r0, sl
 800a31e:	4659      	mov	r1, fp
 800a320:	f7f6 fbea 	bl	8000af8 <__aeabi_dcmpeq>
 800a324:	2800      	cmp	r0, #0
 800a326:	d1a4      	bne.n	800a272 <_strtod_l+0x57a>
 800a328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a32e:	462b      	mov	r3, r5
 800a330:	463a      	mov	r2, r7
 800a332:	4620      	mov	r0, r4
 800a334:	f001 fdce 	bl	800bed4 <__s2b>
 800a338:	9009      	str	r0, [sp, #36]	; 0x24
 800a33a:	2800      	cmp	r0, #0
 800a33c:	f43f af24 	beq.w	800a188 <_strtod_l+0x490>
 800a340:	9b07      	ldr	r3, [sp, #28]
 800a342:	1b9e      	subs	r6, r3, r6
 800a344:	9b08      	ldr	r3, [sp, #32]
 800a346:	2b00      	cmp	r3, #0
 800a348:	bfb4      	ite	lt
 800a34a:	4633      	movlt	r3, r6
 800a34c:	2300      	movge	r3, #0
 800a34e:	9310      	str	r3, [sp, #64]	; 0x40
 800a350:	9b08      	ldr	r3, [sp, #32]
 800a352:	2500      	movs	r5, #0
 800a354:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a358:	9318      	str	r3, [sp, #96]	; 0x60
 800a35a:	462e      	mov	r6, r5
 800a35c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a35e:	4620      	mov	r0, r4
 800a360:	6859      	ldr	r1, [r3, #4]
 800a362:	f001 fd0b 	bl	800bd7c <_Balloc>
 800a366:	9007      	str	r0, [sp, #28]
 800a368:	2800      	cmp	r0, #0
 800a36a:	f43f af11 	beq.w	800a190 <_strtod_l+0x498>
 800a36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a370:	691a      	ldr	r2, [r3, #16]
 800a372:	3202      	adds	r2, #2
 800a374:	f103 010c 	add.w	r1, r3, #12
 800a378:	0092      	lsls	r2, r2, #2
 800a37a:	300c      	adds	r0, #12
 800a37c:	f7fd fef8 	bl	8008170 <memcpy>
 800a380:	ec4b ab10 	vmov	d0, sl, fp
 800a384:	aa20      	add	r2, sp, #128	; 0x80
 800a386:	a91f      	add	r1, sp, #124	; 0x7c
 800a388:	4620      	mov	r0, r4
 800a38a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a38e:	f002 f8dd 	bl	800c54c <__d2b>
 800a392:	901e      	str	r0, [sp, #120]	; 0x78
 800a394:	2800      	cmp	r0, #0
 800a396:	f43f aefb 	beq.w	800a190 <_strtod_l+0x498>
 800a39a:	2101      	movs	r1, #1
 800a39c:	4620      	mov	r0, r4
 800a39e:	f001 fe33 	bl	800c008 <__i2b>
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	f43f aef3 	beq.w	800a190 <_strtod_l+0x498>
 800a3aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a3ac:	9904      	ldr	r1, [sp, #16]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	bfab      	itete	ge
 800a3b2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800a3b4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800a3b6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800a3b8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800a3bc:	bfac      	ite	ge
 800a3be:	eb03 0902 	addge.w	r9, r3, r2
 800a3c2:	1ad7      	sublt	r7, r2, r3
 800a3c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a3c6:	eba3 0801 	sub.w	r8, r3, r1
 800a3ca:	4490      	add	r8, r2
 800a3cc:	4ba3      	ldr	r3, [pc, #652]	; (800a65c <_strtod_l+0x964>)
 800a3ce:	f108 38ff 	add.w	r8, r8, #4294967295
 800a3d2:	4598      	cmp	r8, r3
 800a3d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a3d8:	f280 80cc 	bge.w	800a574 <_strtod_l+0x87c>
 800a3dc:	eba3 0308 	sub.w	r3, r3, r8
 800a3e0:	2b1f      	cmp	r3, #31
 800a3e2:	eba2 0203 	sub.w	r2, r2, r3
 800a3e6:	f04f 0101 	mov.w	r1, #1
 800a3ea:	f300 80b6 	bgt.w	800a55a <_strtod_l+0x862>
 800a3ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a3f2:	9311      	str	r3, [sp, #68]	; 0x44
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	930c      	str	r3, [sp, #48]	; 0x30
 800a3f8:	eb09 0802 	add.w	r8, r9, r2
 800a3fc:	9b04      	ldr	r3, [sp, #16]
 800a3fe:	45c1      	cmp	r9, r8
 800a400:	4417      	add	r7, r2
 800a402:	441f      	add	r7, r3
 800a404:	464b      	mov	r3, r9
 800a406:	bfa8      	it	ge
 800a408:	4643      	movge	r3, r8
 800a40a:	42bb      	cmp	r3, r7
 800a40c:	bfa8      	it	ge
 800a40e:	463b      	movge	r3, r7
 800a410:	2b00      	cmp	r3, #0
 800a412:	bfc2      	ittt	gt
 800a414:	eba8 0803 	subgt.w	r8, r8, r3
 800a418:	1aff      	subgt	r7, r7, r3
 800a41a:	eba9 0903 	subgt.w	r9, r9, r3
 800a41e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a420:	2b00      	cmp	r3, #0
 800a422:	dd17      	ble.n	800a454 <_strtod_l+0x75c>
 800a424:	4631      	mov	r1, r6
 800a426:	461a      	mov	r2, r3
 800a428:	4620      	mov	r0, r4
 800a42a:	f001 fea9 	bl	800c180 <__pow5mult>
 800a42e:	4606      	mov	r6, r0
 800a430:	2800      	cmp	r0, #0
 800a432:	f43f aead 	beq.w	800a190 <_strtod_l+0x498>
 800a436:	4601      	mov	r1, r0
 800a438:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a43a:	4620      	mov	r0, r4
 800a43c:	f001 fdfa 	bl	800c034 <__multiply>
 800a440:	900f      	str	r0, [sp, #60]	; 0x3c
 800a442:	2800      	cmp	r0, #0
 800a444:	f43f aea4 	beq.w	800a190 <_strtod_l+0x498>
 800a448:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a44a:	4620      	mov	r0, r4
 800a44c:	f001 fcd6 	bl	800bdfc <_Bfree>
 800a450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a452:	931e      	str	r3, [sp, #120]	; 0x78
 800a454:	f1b8 0f00 	cmp.w	r8, #0
 800a458:	f300 8091 	bgt.w	800a57e <_strtod_l+0x886>
 800a45c:	9b08      	ldr	r3, [sp, #32]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	dd08      	ble.n	800a474 <_strtod_l+0x77c>
 800a462:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a464:	9907      	ldr	r1, [sp, #28]
 800a466:	4620      	mov	r0, r4
 800a468:	f001 fe8a 	bl	800c180 <__pow5mult>
 800a46c:	9007      	str	r0, [sp, #28]
 800a46e:	2800      	cmp	r0, #0
 800a470:	f43f ae8e 	beq.w	800a190 <_strtod_l+0x498>
 800a474:	2f00      	cmp	r7, #0
 800a476:	dd08      	ble.n	800a48a <_strtod_l+0x792>
 800a478:	9907      	ldr	r1, [sp, #28]
 800a47a:	463a      	mov	r2, r7
 800a47c:	4620      	mov	r0, r4
 800a47e:	f001 fed9 	bl	800c234 <__lshift>
 800a482:	9007      	str	r0, [sp, #28]
 800a484:	2800      	cmp	r0, #0
 800a486:	f43f ae83 	beq.w	800a190 <_strtod_l+0x498>
 800a48a:	f1b9 0f00 	cmp.w	r9, #0
 800a48e:	dd08      	ble.n	800a4a2 <_strtod_l+0x7aa>
 800a490:	4631      	mov	r1, r6
 800a492:	464a      	mov	r2, r9
 800a494:	4620      	mov	r0, r4
 800a496:	f001 fecd 	bl	800c234 <__lshift>
 800a49a:	4606      	mov	r6, r0
 800a49c:	2800      	cmp	r0, #0
 800a49e:	f43f ae77 	beq.w	800a190 <_strtod_l+0x498>
 800a4a2:	9a07      	ldr	r2, [sp, #28]
 800a4a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f001 ff4c 	bl	800c344 <__mdiff>
 800a4ac:	4605      	mov	r5, r0
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	f43f ae6e 	beq.w	800a190 <_strtod_l+0x498>
 800a4b4:	68c3      	ldr	r3, [r0, #12]
 800a4b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	60c3      	str	r3, [r0, #12]
 800a4bc:	4631      	mov	r1, r6
 800a4be:	f001 ff25 	bl	800c30c <__mcmp>
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	da65      	bge.n	800a592 <_strtod_l+0x89a>
 800a4c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4c8:	ea53 030a 	orrs.w	r3, r3, sl
 800a4cc:	f040 8087 	bne.w	800a5de <_strtod_l+0x8e6>
 800a4d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f040 8082 	bne.w	800a5de <_strtod_l+0x8e6>
 800a4da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a4de:	0d1b      	lsrs	r3, r3, #20
 800a4e0:	051b      	lsls	r3, r3, #20
 800a4e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a4e6:	d97a      	bls.n	800a5de <_strtod_l+0x8e6>
 800a4e8:	696b      	ldr	r3, [r5, #20]
 800a4ea:	b913      	cbnz	r3, 800a4f2 <_strtod_l+0x7fa>
 800a4ec:	692b      	ldr	r3, [r5, #16]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	dd75      	ble.n	800a5de <_strtod_l+0x8e6>
 800a4f2:	4629      	mov	r1, r5
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f001 fe9c 	bl	800c234 <__lshift>
 800a4fc:	4631      	mov	r1, r6
 800a4fe:	4605      	mov	r5, r0
 800a500:	f001 ff04 	bl	800c30c <__mcmp>
 800a504:	2800      	cmp	r0, #0
 800a506:	dd6a      	ble.n	800a5de <_strtod_l+0x8e6>
 800a508:	9904      	ldr	r1, [sp, #16]
 800a50a:	4a55      	ldr	r2, [pc, #340]	; (800a660 <_strtod_l+0x968>)
 800a50c:	465b      	mov	r3, fp
 800a50e:	2900      	cmp	r1, #0
 800a510:	f000 8085 	beq.w	800a61e <_strtod_l+0x926>
 800a514:	ea02 010b 	and.w	r1, r2, fp
 800a518:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a51c:	dc7f      	bgt.n	800a61e <_strtod_l+0x926>
 800a51e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a522:	f77f aeaa 	ble.w	800a27a <_strtod_l+0x582>
 800a526:	4a4f      	ldr	r2, [pc, #316]	; (800a664 <_strtod_l+0x96c>)
 800a528:	2300      	movs	r3, #0
 800a52a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a52e:	4650      	mov	r0, sl
 800a530:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a534:	4659      	mov	r1, fp
 800a536:	f7f6 f877 	bl	8000628 <__aeabi_dmul>
 800a53a:	460b      	mov	r3, r1
 800a53c:	4303      	orrs	r3, r0
 800a53e:	bf08      	it	eq
 800a540:	2322      	moveq	r3, #34	; 0x22
 800a542:	4682      	mov	sl, r0
 800a544:	468b      	mov	fp, r1
 800a546:	bf08      	it	eq
 800a548:	6023      	streq	r3, [r4, #0]
 800a54a:	e62b      	b.n	800a1a4 <_strtod_l+0x4ac>
 800a54c:	f04f 32ff 	mov.w	r2, #4294967295
 800a550:	fa02 f303 	lsl.w	r3, r2, r3
 800a554:	ea03 0a0a 	and.w	sl, r3, sl
 800a558:	e6de      	b.n	800a318 <_strtod_l+0x620>
 800a55a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a55e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a562:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a566:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a56a:	fa01 f308 	lsl.w	r3, r1, r8
 800a56e:	930c      	str	r3, [sp, #48]	; 0x30
 800a570:	9111      	str	r1, [sp, #68]	; 0x44
 800a572:	e741      	b.n	800a3f8 <_strtod_l+0x700>
 800a574:	2300      	movs	r3, #0
 800a576:	930c      	str	r3, [sp, #48]	; 0x30
 800a578:	2301      	movs	r3, #1
 800a57a:	9311      	str	r3, [sp, #68]	; 0x44
 800a57c:	e73c      	b.n	800a3f8 <_strtod_l+0x700>
 800a57e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a580:	4642      	mov	r2, r8
 800a582:	4620      	mov	r0, r4
 800a584:	f001 fe56 	bl	800c234 <__lshift>
 800a588:	901e      	str	r0, [sp, #120]	; 0x78
 800a58a:	2800      	cmp	r0, #0
 800a58c:	f47f af66 	bne.w	800a45c <_strtod_l+0x764>
 800a590:	e5fe      	b.n	800a190 <_strtod_l+0x498>
 800a592:	465f      	mov	r7, fp
 800a594:	d16e      	bne.n	800a674 <_strtod_l+0x97c>
 800a596:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a598:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a59c:	b342      	cbz	r2, 800a5f0 <_strtod_l+0x8f8>
 800a59e:	4a32      	ldr	r2, [pc, #200]	; (800a668 <_strtod_l+0x970>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d128      	bne.n	800a5f6 <_strtod_l+0x8fe>
 800a5a4:	9b04      	ldr	r3, [sp, #16]
 800a5a6:	4650      	mov	r0, sl
 800a5a8:	b1eb      	cbz	r3, 800a5e6 <_strtod_l+0x8ee>
 800a5aa:	4a2d      	ldr	r2, [pc, #180]	; (800a660 <_strtod_l+0x968>)
 800a5ac:	403a      	ands	r2, r7
 800a5ae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a5b2:	f04f 31ff 	mov.w	r1, #4294967295
 800a5b6:	d819      	bhi.n	800a5ec <_strtod_l+0x8f4>
 800a5b8:	0d12      	lsrs	r2, r2, #20
 800a5ba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a5be:	fa01 f303 	lsl.w	r3, r1, r3
 800a5c2:	4298      	cmp	r0, r3
 800a5c4:	d117      	bne.n	800a5f6 <_strtod_l+0x8fe>
 800a5c6:	4b29      	ldr	r3, [pc, #164]	; (800a66c <_strtod_l+0x974>)
 800a5c8:	429f      	cmp	r7, r3
 800a5ca:	d102      	bne.n	800a5d2 <_strtod_l+0x8da>
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	f43f addf 	beq.w	800a190 <_strtod_l+0x498>
 800a5d2:	4b23      	ldr	r3, [pc, #140]	; (800a660 <_strtod_l+0x968>)
 800a5d4:	403b      	ands	r3, r7
 800a5d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a5da:	f04f 0a00 	mov.w	sl, #0
 800a5de:	9b04      	ldr	r3, [sp, #16]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1a0      	bne.n	800a526 <_strtod_l+0x82e>
 800a5e4:	e5de      	b.n	800a1a4 <_strtod_l+0x4ac>
 800a5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ea:	e7ea      	b.n	800a5c2 <_strtod_l+0x8ca>
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	e7e8      	b.n	800a5c2 <_strtod_l+0x8ca>
 800a5f0:	ea53 030a 	orrs.w	r3, r3, sl
 800a5f4:	d088      	beq.n	800a508 <_strtod_l+0x810>
 800a5f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5f8:	b1db      	cbz	r3, 800a632 <_strtod_l+0x93a>
 800a5fa:	423b      	tst	r3, r7
 800a5fc:	d0ef      	beq.n	800a5de <_strtod_l+0x8e6>
 800a5fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a600:	9a04      	ldr	r2, [sp, #16]
 800a602:	4650      	mov	r0, sl
 800a604:	4659      	mov	r1, fp
 800a606:	b1c3      	cbz	r3, 800a63a <_strtod_l+0x942>
 800a608:	f7ff fb5a 	bl	8009cc0 <sulp>
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a614:	f7f5 fe52 	bl	80002bc <__adddf3>
 800a618:	4682      	mov	sl, r0
 800a61a:	468b      	mov	fp, r1
 800a61c:	e7df      	b.n	800a5de <_strtod_l+0x8e6>
 800a61e:	4013      	ands	r3, r2
 800a620:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a624:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a628:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a62c:	f04f 3aff 	mov.w	sl, #4294967295
 800a630:	e7d5      	b.n	800a5de <_strtod_l+0x8e6>
 800a632:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a634:	ea13 0f0a 	tst.w	r3, sl
 800a638:	e7e0      	b.n	800a5fc <_strtod_l+0x904>
 800a63a:	f7ff fb41 	bl	8009cc0 <sulp>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a646:	f7f5 fe37 	bl	80002b8 <__aeabi_dsub>
 800a64a:	2200      	movs	r2, #0
 800a64c:	2300      	movs	r3, #0
 800a64e:	4682      	mov	sl, r0
 800a650:	468b      	mov	fp, r1
 800a652:	f7f6 fa51 	bl	8000af8 <__aeabi_dcmpeq>
 800a656:	2800      	cmp	r0, #0
 800a658:	d0c1      	beq.n	800a5de <_strtod_l+0x8e6>
 800a65a:	e60e      	b.n	800a27a <_strtod_l+0x582>
 800a65c:	fffffc02 	.word	0xfffffc02
 800a660:	7ff00000 	.word	0x7ff00000
 800a664:	39500000 	.word	0x39500000
 800a668:	000fffff 	.word	0x000fffff
 800a66c:	7fefffff 	.word	0x7fefffff
 800a670:	0800e000 	.word	0x0800e000
 800a674:	4631      	mov	r1, r6
 800a676:	4628      	mov	r0, r5
 800a678:	f001 ffc4 	bl	800c604 <__ratio>
 800a67c:	ec59 8b10 	vmov	r8, r9, d0
 800a680:	ee10 0a10 	vmov	r0, s0
 800a684:	2200      	movs	r2, #0
 800a686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a68a:	4649      	mov	r1, r9
 800a68c:	f7f6 fa48 	bl	8000b20 <__aeabi_dcmple>
 800a690:	2800      	cmp	r0, #0
 800a692:	d07c      	beq.n	800a78e <_strtod_l+0xa96>
 800a694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a696:	2b00      	cmp	r3, #0
 800a698:	d04c      	beq.n	800a734 <_strtod_l+0xa3c>
 800a69a:	4b95      	ldr	r3, [pc, #596]	; (800a8f0 <_strtod_l+0xbf8>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a6a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a8f0 <_strtod_l+0xbf8>
 800a6a6:	f04f 0800 	mov.w	r8, #0
 800a6aa:	4b92      	ldr	r3, [pc, #584]	; (800a8f4 <_strtod_l+0xbfc>)
 800a6ac:	403b      	ands	r3, r7
 800a6ae:	9311      	str	r3, [sp, #68]	; 0x44
 800a6b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a6b2:	4b91      	ldr	r3, [pc, #580]	; (800a8f8 <_strtod_l+0xc00>)
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	f040 80b2 	bne.w	800a81e <_strtod_l+0xb26>
 800a6ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a6be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6c2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a6c6:	ec4b ab10 	vmov	d0, sl, fp
 800a6ca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a6ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a6d2:	f001 febf 	bl	800c454 <__ulp>
 800a6d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6da:	ec53 2b10 	vmov	r2, r3, d0
 800a6de:	f7f5 ffa3 	bl	8000628 <__aeabi_dmul>
 800a6e2:	4652      	mov	r2, sl
 800a6e4:	465b      	mov	r3, fp
 800a6e6:	f7f5 fde9 	bl	80002bc <__adddf3>
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	4981      	ldr	r1, [pc, #516]	; (800a8f4 <_strtod_l+0xbfc>)
 800a6ee:	4a83      	ldr	r2, [pc, #524]	; (800a8fc <_strtod_l+0xc04>)
 800a6f0:	4019      	ands	r1, r3
 800a6f2:	4291      	cmp	r1, r2
 800a6f4:	4682      	mov	sl, r0
 800a6f6:	d95e      	bls.n	800a7b6 <_strtod_l+0xabe>
 800a6f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6fa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d103      	bne.n	800a70a <_strtod_l+0xa12>
 800a702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a704:	3301      	adds	r3, #1
 800a706:	f43f ad43 	beq.w	800a190 <_strtod_l+0x498>
 800a70a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a908 <_strtod_l+0xc10>
 800a70e:	f04f 3aff 	mov.w	sl, #4294967295
 800a712:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a714:	4620      	mov	r0, r4
 800a716:	f001 fb71 	bl	800bdfc <_Bfree>
 800a71a:	9907      	ldr	r1, [sp, #28]
 800a71c:	4620      	mov	r0, r4
 800a71e:	f001 fb6d 	bl	800bdfc <_Bfree>
 800a722:	4631      	mov	r1, r6
 800a724:	4620      	mov	r0, r4
 800a726:	f001 fb69 	bl	800bdfc <_Bfree>
 800a72a:	4629      	mov	r1, r5
 800a72c:	4620      	mov	r0, r4
 800a72e:	f001 fb65 	bl	800bdfc <_Bfree>
 800a732:	e613      	b.n	800a35c <_strtod_l+0x664>
 800a734:	f1ba 0f00 	cmp.w	sl, #0
 800a738:	d11b      	bne.n	800a772 <_strtod_l+0xa7a>
 800a73a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a73e:	b9f3      	cbnz	r3, 800a77e <_strtod_l+0xa86>
 800a740:	4b6b      	ldr	r3, [pc, #428]	; (800a8f0 <_strtod_l+0xbf8>)
 800a742:	2200      	movs	r2, #0
 800a744:	4640      	mov	r0, r8
 800a746:	4649      	mov	r1, r9
 800a748:	f7f6 f9e0 	bl	8000b0c <__aeabi_dcmplt>
 800a74c:	b9d0      	cbnz	r0, 800a784 <_strtod_l+0xa8c>
 800a74e:	4640      	mov	r0, r8
 800a750:	4649      	mov	r1, r9
 800a752:	4b6b      	ldr	r3, [pc, #428]	; (800a900 <_strtod_l+0xc08>)
 800a754:	2200      	movs	r2, #0
 800a756:	f7f5 ff67 	bl	8000628 <__aeabi_dmul>
 800a75a:	4680      	mov	r8, r0
 800a75c:	4689      	mov	r9, r1
 800a75e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a762:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a766:	931b      	str	r3, [sp, #108]	; 0x6c
 800a768:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a76c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a770:	e79b      	b.n	800a6aa <_strtod_l+0x9b2>
 800a772:	f1ba 0f01 	cmp.w	sl, #1
 800a776:	d102      	bne.n	800a77e <_strtod_l+0xa86>
 800a778:	2f00      	cmp	r7, #0
 800a77a:	f43f ad7e 	beq.w	800a27a <_strtod_l+0x582>
 800a77e:	4b61      	ldr	r3, [pc, #388]	; (800a904 <_strtod_l+0xc0c>)
 800a780:	2200      	movs	r2, #0
 800a782:	e78c      	b.n	800a69e <_strtod_l+0x9a6>
 800a784:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a900 <_strtod_l+0xc08>
 800a788:	f04f 0800 	mov.w	r8, #0
 800a78c:	e7e7      	b.n	800a75e <_strtod_l+0xa66>
 800a78e:	4b5c      	ldr	r3, [pc, #368]	; (800a900 <_strtod_l+0xc08>)
 800a790:	4640      	mov	r0, r8
 800a792:	4649      	mov	r1, r9
 800a794:	2200      	movs	r2, #0
 800a796:	f7f5 ff47 	bl	8000628 <__aeabi_dmul>
 800a79a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a79c:	4680      	mov	r8, r0
 800a79e:	4689      	mov	r9, r1
 800a7a0:	b933      	cbnz	r3, 800a7b0 <_strtod_l+0xab8>
 800a7a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7a6:	9012      	str	r0, [sp, #72]	; 0x48
 800a7a8:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a7ae:	e7dd      	b.n	800a76c <_strtod_l+0xa74>
 800a7b0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a7b4:	e7f9      	b.n	800a7aa <_strtod_l+0xab2>
 800a7b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a7ba:	9b04      	ldr	r3, [sp, #16]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1a8      	bne.n	800a712 <_strtod_l+0xa1a>
 800a7c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a7c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a7c6:	0d1b      	lsrs	r3, r3, #20
 800a7c8:	051b      	lsls	r3, r3, #20
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d1a1      	bne.n	800a712 <_strtod_l+0xa1a>
 800a7ce:	4640      	mov	r0, r8
 800a7d0:	4649      	mov	r1, r9
 800a7d2:	f7f6 fa73 	bl	8000cbc <__aeabi_d2lz>
 800a7d6:	f7f5 fef9 	bl	80005cc <__aeabi_l2d>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	460b      	mov	r3, r1
 800a7de:	4640      	mov	r0, r8
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	f7f5 fd69 	bl	80002b8 <__aeabi_dsub>
 800a7e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7ec:	ea43 030a 	orr.w	r3, r3, sl
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	4680      	mov	r8, r0
 800a7f4:	4689      	mov	r9, r1
 800a7f6:	d053      	beq.n	800a8a0 <_strtod_l+0xba8>
 800a7f8:	a335      	add	r3, pc, #212	; (adr r3, 800a8d0 <_strtod_l+0xbd8>)
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	f7f6 f985 	bl	8000b0c <__aeabi_dcmplt>
 800a802:	2800      	cmp	r0, #0
 800a804:	f47f acce 	bne.w	800a1a4 <_strtod_l+0x4ac>
 800a808:	a333      	add	r3, pc, #204	; (adr r3, 800a8d8 <_strtod_l+0xbe0>)
 800a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80e:	4640      	mov	r0, r8
 800a810:	4649      	mov	r1, r9
 800a812:	f7f6 f999 	bl	8000b48 <__aeabi_dcmpgt>
 800a816:	2800      	cmp	r0, #0
 800a818:	f43f af7b 	beq.w	800a712 <_strtod_l+0xa1a>
 800a81c:	e4c2      	b.n	800a1a4 <_strtod_l+0x4ac>
 800a81e:	9b04      	ldr	r3, [sp, #16]
 800a820:	b333      	cbz	r3, 800a870 <_strtod_l+0xb78>
 800a822:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a824:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a828:	d822      	bhi.n	800a870 <_strtod_l+0xb78>
 800a82a:	a32d      	add	r3, pc, #180	; (adr r3, 800a8e0 <_strtod_l+0xbe8>)
 800a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a830:	4640      	mov	r0, r8
 800a832:	4649      	mov	r1, r9
 800a834:	f7f6 f974 	bl	8000b20 <__aeabi_dcmple>
 800a838:	b1a0      	cbz	r0, 800a864 <_strtod_l+0xb6c>
 800a83a:	4649      	mov	r1, r9
 800a83c:	4640      	mov	r0, r8
 800a83e:	f7f6 f9b5 	bl	8000bac <__aeabi_d2uiz>
 800a842:	2801      	cmp	r0, #1
 800a844:	bf38      	it	cc
 800a846:	2001      	movcc	r0, #1
 800a848:	f7f5 fe74 	bl	8000534 <__aeabi_ui2d>
 800a84c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a84e:	4680      	mov	r8, r0
 800a850:	4689      	mov	r9, r1
 800a852:	bb13      	cbnz	r3, 800a89a <_strtod_l+0xba2>
 800a854:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a858:	9014      	str	r0, [sp, #80]	; 0x50
 800a85a:	9315      	str	r3, [sp, #84]	; 0x54
 800a85c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a860:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a866:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a868:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a86c:	1a9b      	subs	r3, r3, r2
 800a86e:	930d      	str	r3, [sp, #52]	; 0x34
 800a870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a874:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a878:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a87c:	f001 fdea 	bl	800c454 <__ulp>
 800a880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a884:	ec53 2b10 	vmov	r2, r3, d0
 800a888:	f7f5 fece 	bl	8000628 <__aeabi_dmul>
 800a88c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a890:	f7f5 fd14 	bl	80002bc <__adddf3>
 800a894:	4682      	mov	sl, r0
 800a896:	468b      	mov	fp, r1
 800a898:	e78f      	b.n	800a7ba <_strtod_l+0xac2>
 800a89a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a89e:	e7dd      	b.n	800a85c <_strtod_l+0xb64>
 800a8a0:	a311      	add	r3, pc, #68	; (adr r3, 800a8e8 <_strtod_l+0xbf0>)
 800a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a6:	f7f6 f931 	bl	8000b0c <__aeabi_dcmplt>
 800a8aa:	e7b4      	b.n	800a816 <_strtod_l+0xb1e>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	930e      	str	r3, [sp, #56]	; 0x38
 800a8b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a8b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	f7ff ba65 	b.w	8009d84 <_strtod_l+0x8c>
 800a8ba:	2b65      	cmp	r3, #101	; 0x65
 800a8bc:	f43f ab5d 	beq.w	8009f7a <_strtod_l+0x282>
 800a8c0:	2b45      	cmp	r3, #69	; 0x45
 800a8c2:	f43f ab5a 	beq.w	8009f7a <_strtod_l+0x282>
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f7ff bb92 	b.w	8009ff0 <_strtod_l+0x2f8>
 800a8cc:	f3af 8000 	nop.w
 800a8d0:	94a03595 	.word	0x94a03595
 800a8d4:	3fdfffff 	.word	0x3fdfffff
 800a8d8:	35afe535 	.word	0x35afe535
 800a8dc:	3fe00000 	.word	0x3fe00000
 800a8e0:	ffc00000 	.word	0xffc00000
 800a8e4:	41dfffff 	.word	0x41dfffff
 800a8e8:	94a03595 	.word	0x94a03595
 800a8ec:	3fcfffff 	.word	0x3fcfffff
 800a8f0:	3ff00000 	.word	0x3ff00000
 800a8f4:	7ff00000 	.word	0x7ff00000
 800a8f8:	7fe00000 	.word	0x7fe00000
 800a8fc:	7c9fffff 	.word	0x7c9fffff
 800a900:	3fe00000 	.word	0x3fe00000
 800a904:	bff00000 	.word	0xbff00000
 800a908:	7fefffff 	.word	0x7fefffff

0800a90c <strtod>:
 800a90c:	460a      	mov	r2, r1
 800a90e:	4601      	mov	r1, r0
 800a910:	4802      	ldr	r0, [pc, #8]	; (800a91c <strtod+0x10>)
 800a912:	4b03      	ldr	r3, [pc, #12]	; (800a920 <strtod+0x14>)
 800a914:	6800      	ldr	r0, [r0, #0]
 800a916:	f7ff b9ef 	b.w	8009cf8 <_strtod_l>
 800a91a:	bf00      	nop
 800a91c:	20000020 	.word	0x20000020
 800a920:	200000ec 	.word	0x200000ec

0800a924 <_strtol_l.isra.0>:
 800a924:	2b01      	cmp	r3, #1
 800a926:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a92a:	d001      	beq.n	800a930 <_strtol_l.isra.0+0xc>
 800a92c:	2b24      	cmp	r3, #36	; 0x24
 800a92e:	d906      	bls.n	800a93e <_strtol_l.isra.0+0x1a>
 800a930:	f7fd fa14 	bl	8007d5c <__errno>
 800a934:	2316      	movs	r3, #22
 800a936:	6003      	str	r3, [r0, #0]
 800a938:	2000      	movs	r0, #0
 800a93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a93e:	4f3a      	ldr	r7, [pc, #232]	; (800aa28 <_strtol_l.isra.0+0x104>)
 800a940:	468e      	mov	lr, r1
 800a942:	4676      	mov	r6, lr
 800a944:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a948:	5de5      	ldrb	r5, [r4, r7]
 800a94a:	f015 0508 	ands.w	r5, r5, #8
 800a94e:	d1f8      	bne.n	800a942 <_strtol_l.isra.0+0x1e>
 800a950:	2c2d      	cmp	r4, #45	; 0x2d
 800a952:	d134      	bne.n	800a9be <_strtol_l.isra.0+0x9a>
 800a954:	f89e 4000 	ldrb.w	r4, [lr]
 800a958:	f04f 0801 	mov.w	r8, #1
 800a95c:	f106 0e02 	add.w	lr, r6, #2
 800a960:	2b00      	cmp	r3, #0
 800a962:	d05c      	beq.n	800aa1e <_strtol_l.isra.0+0xfa>
 800a964:	2b10      	cmp	r3, #16
 800a966:	d10c      	bne.n	800a982 <_strtol_l.isra.0+0x5e>
 800a968:	2c30      	cmp	r4, #48	; 0x30
 800a96a:	d10a      	bne.n	800a982 <_strtol_l.isra.0+0x5e>
 800a96c:	f89e 4000 	ldrb.w	r4, [lr]
 800a970:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a974:	2c58      	cmp	r4, #88	; 0x58
 800a976:	d14d      	bne.n	800aa14 <_strtol_l.isra.0+0xf0>
 800a978:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a97c:	2310      	movs	r3, #16
 800a97e:	f10e 0e02 	add.w	lr, lr, #2
 800a982:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a986:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a98a:	2600      	movs	r6, #0
 800a98c:	fbbc f9f3 	udiv	r9, ip, r3
 800a990:	4635      	mov	r5, r6
 800a992:	fb03 ca19 	mls	sl, r3, r9, ip
 800a996:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a99a:	2f09      	cmp	r7, #9
 800a99c:	d818      	bhi.n	800a9d0 <_strtol_l.isra.0+0xac>
 800a99e:	463c      	mov	r4, r7
 800a9a0:	42a3      	cmp	r3, r4
 800a9a2:	dd24      	ble.n	800a9ee <_strtol_l.isra.0+0xca>
 800a9a4:	2e00      	cmp	r6, #0
 800a9a6:	db1f      	blt.n	800a9e8 <_strtol_l.isra.0+0xc4>
 800a9a8:	45a9      	cmp	r9, r5
 800a9aa:	d31d      	bcc.n	800a9e8 <_strtol_l.isra.0+0xc4>
 800a9ac:	d101      	bne.n	800a9b2 <_strtol_l.isra.0+0x8e>
 800a9ae:	45a2      	cmp	sl, r4
 800a9b0:	db1a      	blt.n	800a9e8 <_strtol_l.isra.0+0xc4>
 800a9b2:	fb05 4503 	mla	r5, r5, r3, r4
 800a9b6:	2601      	movs	r6, #1
 800a9b8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a9bc:	e7eb      	b.n	800a996 <_strtol_l.isra.0+0x72>
 800a9be:	2c2b      	cmp	r4, #43	; 0x2b
 800a9c0:	bf08      	it	eq
 800a9c2:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a9c6:	46a8      	mov	r8, r5
 800a9c8:	bf08      	it	eq
 800a9ca:	f106 0e02 	addeq.w	lr, r6, #2
 800a9ce:	e7c7      	b.n	800a960 <_strtol_l.isra.0+0x3c>
 800a9d0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a9d4:	2f19      	cmp	r7, #25
 800a9d6:	d801      	bhi.n	800a9dc <_strtol_l.isra.0+0xb8>
 800a9d8:	3c37      	subs	r4, #55	; 0x37
 800a9da:	e7e1      	b.n	800a9a0 <_strtol_l.isra.0+0x7c>
 800a9dc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a9e0:	2f19      	cmp	r7, #25
 800a9e2:	d804      	bhi.n	800a9ee <_strtol_l.isra.0+0xca>
 800a9e4:	3c57      	subs	r4, #87	; 0x57
 800a9e6:	e7db      	b.n	800a9a0 <_strtol_l.isra.0+0x7c>
 800a9e8:	f04f 36ff 	mov.w	r6, #4294967295
 800a9ec:	e7e4      	b.n	800a9b8 <_strtol_l.isra.0+0x94>
 800a9ee:	2e00      	cmp	r6, #0
 800a9f0:	da05      	bge.n	800a9fe <_strtol_l.isra.0+0xda>
 800a9f2:	2322      	movs	r3, #34	; 0x22
 800a9f4:	6003      	str	r3, [r0, #0]
 800a9f6:	4665      	mov	r5, ip
 800a9f8:	b942      	cbnz	r2, 800aa0c <_strtol_l.isra.0+0xe8>
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	e79d      	b.n	800a93a <_strtol_l.isra.0+0x16>
 800a9fe:	f1b8 0f00 	cmp.w	r8, #0
 800aa02:	d000      	beq.n	800aa06 <_strtol_l.isra.0+0xe2>
 800aa04:	426d      	negs	r5, r5
 800aa06:	2a00      	cmp	r2, #0
 800aa08:	d0f7      	beq.n	800a9fa <_strtol_l.isra.0+0xd6>
 800aa0a:	b10e      	cbz	r6, 800aa10 <_strtol_l.isra.0+0xec>
 800aa0c:	f10e 31ff 	add.w	r1, lr, #4294967295
 800aa10:	6011      	str	r1, [r2, #0]
 800aa12:	e7f2      	b.n	800a9fa <_strtol_l.isra.0+0xd6>
 800aa14:	2430      	movs	r4, #48	; 0x30
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1b3      	bne.n	800a982 <_strtol_l.isra.0+0x5e>
 800aa1a:	2308      	movs	r3, #8
 800aa1c:	e7b1      	b.n	800a982 <_strtol_l.isra.0+0x5e>
 800aa1e:	2c30      	cmp	r4, #48	; 0x30
 800aa20:	d0a4      	beq.n	800a96c <_strtol_l.isra.0+0x48>
 800aa22:	230a      	movs	r3, #10
 800aa24:	e7ad      	b.n	800a982 <_strtol_l.isra.0+0x5e>
 800aa26:	bf00      	nop
 800aa28:	0800dd61 	.word	0x0800dd61

0800aa2c <_strtol_r>:
 800aa2c:	f7ff bf7a 	b.w	800a924 <_strtol_l.isra.0>

0800aa30 <strtol_l>:
 800aa30:	4613      	mov	r3, r2
 800aa32:	460a      	mov	r2, r1
 800aa34:	4601      	mov	r1, r0
 800aa36:	4802      	ldr	r0, [pc, #8]	; (800aa40 <strtol_l+0x10>)
 800aa38:	6800      	ldr	r0, [r0, #0]
 800aa3a:	f7ff bf73 	b.w	800a924 <_strtol_l.isra.0>
 800aa3e:	bf00      	nop
 800aa40:	20000020 	.word	0x20000020

0800aa44 <_strtoll_l.isra.0>:
 800aa44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa48:	b087      	sub	sp, #28
 800aa4a:	4691      	mov	r9, r2
 800aa4c:	4a47      	ldr	r2, [pc, #284]	; (800ab6c <_strtoll_l.isra.0+0x128>)
 800aa4e:	9005      	str	r0, [sp, #20]
 800aa50:	4688      	mov	r8, r1
 800aa52:	461f      	mov	r7, r3
 800aa54:	460d      	mov	r5, r1
 800aa56:	462b      	mov	r3, r5
 800aa58:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa5c:	5ca6      	ldrb	r6, [r4, r2]
 800aa5e:	f016 0608 	ands.w	r6, r6, #8
 800aa62:	d1f8      	bne.n	800aa56 <_strtoll_l.isra.0+0x12>
 800aa64:	2c2d      	cmp	r4, #45	; 0x2d
 800aa66:	d147      	bne.n	800aaf8 <_strtoll_l.isra.0+0xb4>
 800aa68:	782c      	ldrb	r4, [r5, #0]
 800aa6a:	2601      	movs	r6, #1
 800aa6c:	1c9d      	adds	r5, r3, #2
 800aa6e:	2f00      	cmp	r7, #0
 800aa70:	d077      	beq.n	800ab62 <_strtoll_l.isra.0+0x11e>
 800aa72:	2f10      	cmp	r7, #16
 800aa74:	d109      	bne.n	800aa8a <_strtoll_l.isra.0+0x46>
 800aa76:	2c30      	cmp	r4, #48	; 0x30
 800aa78:	d107      	bne.n	800aa8a <_strtoll_l.isra.0+0x46>
 800aa7a:	782b      	ldrb	r3, [r5, #0]
 800aa7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa80:	2b58      	cmp	r3, #88	; 0x58
 800aa82:	d169      	bne.n	800ab58 <_strtoll_l.isra.0+0x114>
 800aa84:	786c      	ldrb	r4, [r5, #1]
 800aa86:	2710      	movs	r7, #16
 800aa88:	3502      	adds	r5, #2
 800aa8a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa8e:	1990      	adds	r0, r2, r6
 800aa90:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800aa94:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800aa98:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 800aa9c:	463a      	mov	r2, r7
 800aa9e:	465b      	mov	r3, fp
 800aaa0:	e9cd 0100 	strd	r0, r1, [sp]
 800aaa4:	f7f6 f8f2 	bl	8000c8c <__aeabi_uldivmod>
 800aaa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaac:	46ba      	mov	sl, r7
 800aaae:	4696      	mov	lr, r2
 800aab0:	2300      	movs	r3, #0
 800aab2:	2000      	movs	r0, #0
 800aab4:	2100      	movs	r1, #0
 800aab6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800aaba:	f1bc 0f09 	cmp.w	ip, #9
 800aabe:	d820      	bhi.n	800ab02 <_strtoll_l.isra.0+0xbe>
 800aac0:	4664      	mov	r4, ip
 800aac2:	42a7      	cmp	r7, r4
 800aac4:	dd2e      	ble.n	800ab24 <_strtoll_l.isra.0+0xe0>
 800aac6:	1c5a      	adds	r2, r3, #1
 800aac8:	d013      	beq.n	800aaf2 <_strtoll_l.isra.0+0xae>
 800aaca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aace:	428b      	cmp	r3, r1
 800aad0:	bf08      	it	eq
 800aad2:	4282      	cmpeq	r2, r0
 800aad4:	d323      	bcc.n	800ab1e <_strtoll_l.isra.0+0xda>
 800aad6:	d101      	bne.n	800aadc <_strtoll_l.isra.0+0x98>
 800aad8:	45a6      	cmp	lr, r4
 800aada:	db20      	blt.n	800ab1e <_strtoll_l.isra.0+0xda>
 800aadc:	fb0a f301 	mul.w	r3, sl, r1
 800aae0:	fb00 330b 	mla	r3, r0, fp, r3
 800aae4:	fbaa 0100 	umull	r0, r1, sl, r0
 800aae8:	4419      	add	r1, r3
 800aaea:	1900      	adds	r0, r0, r4
 800aaec:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aaf6:	e7de      	b.n	800aab6 <_strtoll_l.isra.0+0x72>
 800aaf8:	2c2b      	cmp	r4, #43	; 0x2b
 800aafa:	bf04      	itt	eq
 800aafc:	782c      	ldrbeq	r4, [r5, #0]
 800aafe:	1c9d      	addeq	r5, r3, #2
 800ab00:	e7b5      	b.n	800aa6e <_strtoll_l.isra.0+0x2a>
 800ab02:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ab06:	f1bc 0f19 	cmp.w	ip, #25
 800ab0a:	d801      	bhi.n	800ab10 <_strtoll_l.isra.0+0xcc>
 800ab0c:	3c37      	subs	r4, #55	; 0x37
 800ab0e:	e7d8      	b.n	800aac2 <_strtoll_l.isra.0+0x7e>
 800ab10:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ab14:	f1bc 0f19 	cmp.w	ip, #25
 800ab18:	d804      	bhi.n	800ab24 <_strtoll_l.isra.0+0xe0>
 800ab1a:	3c57      	subs	r4, #87	; 0x57
 800ab1c:	e7d1      	b.n	800aac2 <_strtoll_l.isra.0+0x7e>
 800ab1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab22:	e7e6      	b.n	800aaf2 <_strtoll_l.isra.0+0xae>
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	d10a      	bne.n	800ab3e <_strtoll_l.isra.0+0xfa>
 800ab28:	9a05      	ldr	r2, [sp, #20]
 800ab2a:	2322      	movs	r3, #34	; 0x22
 800ab2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab30:	6013      	str	r3, [r2, #0]
 800ab32:	f1b9 0f00 	cmp.w	r9, #0
 800ab36:	d10a      	bne.n	800ab4e <_strtoll_l.isra.0+0x10a>
 800ab38:	b007      	add	sp, #28
 800ab3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3e:	b116      	cbz	r6, 800ab46 <_strtoll_l.isra.0+0x102>
 800ab40:	4240      	negs	r0, r0
 800ab42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800ab46:	f1b9 0f00 	cmp.w	r9, #0
 800ab4a:	d0f5      	beq.n	800ab38 <_strtoll_l.isra.0+0xf4>
 800ab4c:	b10b      	cbz	r3, 800ab52 <_strtoll_l.isra.0+0x10e>
 800ab4e:	f105 38ff 	add.w	r8, r5, #4294967295
 800ab52:	f8c9 8000 	str.w	r8, [r9]
 800ab56:	e7ef      	b.n	800ab38 <_strtoll_l.isra.0+0xf4>
 800ab58:	2430      	movs	r4, #48	; 0x30
 800ab5a:	2f00      	cmp	r7, #0
 800ab5c:	d195      	bne.n	800aa8a <_strtoll_l.isra.0+0x46>
 800ab5e:	2708      	movs	r7, #8
 800ab60:	e793      	b.n	800aa8a <_strtoll_l.isra.0+0x46>
 800ab62:	2c30      	cmp	r4, #48	; 0x30
 800ab64:	d089      	beq.n	800aa7a <_strtoll_l.isra.0+0x36>
 800ab66:	270a      	movs	r7, #10
 800ab68:	e78f      	b.n	800aa8a <_strtoll_l.isra.0+0x46>
 800ab6a:	bf00      	nop
 800ab6c:	0800dd61 	.word	0x0800dd61

0800ab70 <strtoll_l>:
 800ab70:	4613      	mov	r3, r2
 800ab72:	460a      	mov	r2, r1
 800ab74:	4601      	mov	r1, r0
 800ab76:	4802      	ldr	r0, [pc, #8]	; (800ab80 <strtoll_l+0x10>)
 800ab78:	6800      	ldr	r0, [r0, #0]
 800ab7a:	f7ff bf63 	b.w	800aa44 <_strtoll_l.isra.0>
 800ab7e:	bf00      	nop
 800ab80:	20000020 	.word	0x20000020

0800ab84 <_strtoul_l.isra.0>:
 800ab84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab88:	4e3b      	ldr	r6, [pc, #236]	; (800ac78 <_strtoul_l.isra.0+0xf4>)
 800ab8a:	4686      	mov	lr, r0
 800ab8c:	468c      	mov	ip, r1
 800ab8e:	4660      	mov	r0, ip
 800ab90:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ab94:	5da5      	ldrb	r5, [r4, r6]
 800ab96:	f015 0508 	ands.w	r5, r5, #8
 800ab9a:	d1f8      	bne.n	800ab8e <_strtoul_l.isra.0+0xa>
 800ab9c:	2c2d      	cmp	r4, #45	; 0x2d
 800ab9e:	d134      	bne.n	800ac0a <_strtoul_l.isra.0+0x86>
 800aba0:	f89c 4000 	ldrb.w	r4, [ip]
 800aba4:	f04f 0801 	mov.w	r8, #1
 800aba8:	f100 0c02 	add.w	ip, r0, #2
 800abac:	2b00      	cmp	r3, #0
 800abae:	d05e      	beq.n	800ac6e <_strtoul_l.isra.0+0xea>
 800abb0:	2b10      	cmp	r3, #16
 800abb2:	d10c      	bne.n	800abce <_strtoul_l.isra.0+0x4a>
 800abb4:	2c30      	cmp	r4, #48	; 0x30
 800abb6:	d10a      	bne.n	800abce <_strtoul_l.isra.0+0x4a>
 800abb8:	f89c 0000 	ldrb.w	r0, [ip]
 800abbc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800abc0:	2858      	cmp	r0, #88	; 0x58
 800abc2:	d14f      	bne.n	800ac64 <_strtoul_l.isra.0+0xe0>
 800abc4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800abc8:	2310      	movs	r3, #16
 800abca:	f10c 0c02 	add.w	ip, ip, #2
 800abce:	f04f 37ff 	mov.w	r7, #4294967295
 800abd2:	2500      	movs	r5, #0
 800abd4:	fbb7 f7f3 	udiv	r7, r7, r3
 800abd8:	fb03 f907 	mul.w	r9, r3, r7
 800abdc:	ea6f 0909 	mvn.w	r9, r9
 800abe0:	4628      	mov	r0, r5
 800abe2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800abe6:	2e09      	cmp	r6, #9
 800abe8:	d818      	bhi.n	800ac1c <_strtoul_l.isra.0+0x98>
 800abea:	4634      	mov	r4, r6
 800abec:	42a3      	cmp	r3, r4
 800abee:	dd24      	ble.n	800ac3a <_strtoul_l.isra.0+0xb6>
 800abf0:	2d00      	cmp	r5, #0
 800abf2:	db1f      	blt.n	800ac34 <_strtoul_l.isra.0+0xb0>
 800abf4:	4287      	cmp	r7, r0
 800abf6:	d31d      	bcc.n	800ac34 <_strtoul_l.isra.0+0xb0>
 800abf8:	d101      	bne.n	800abfe <_strtoul_l.isra.0+0x7a>
 800abfa:	45a1      	cmp	r9, r4
 800abfc:	db1a      	blt.n	800ac34 <_strtoul_l.isra.0+0xb0>
 800abfe:	fb00 4003 	mla	r0, r0, r3, r4
 800ac02:	2501      	movs	r5, #1
 800ac04:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ac08:	e7eb      	b.n	800abe2 <_strtoul_l.isra.0+0x5e>
 800ac0a:	2c2b      	cmp	r4, #43	; 0x2b
 800ac0c:	bf08      	it	eq
 800ac0e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ac12:	46a8      	mov	r8, r5
 800ac14:	bf08      	it	eq
 800ac16:	f100 0c02 	addeq.w	ip, r0, #2
 800ac1a:	e7c7      	b.n	800abac <_strtoul_l.isra.0+0x28>
 800ac1c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ac20:	2e19      	cmp	r6, #25
 800ac22:	d801      	bhi.n	800ac28 <_strtoul_l.isra.0+0xa4>
 800ac24:	3c37      	subs	r4, #55	; 0x37
 800ac26:	e7e1      	b.n	800abec <_strtoul_l.isra.0+0x68>
 800ac28:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ac2c:	2e19      	cmp	r6, #25
 800ac2e:	d804      	bhi.n	800ac3a <_strtoul_l.isra.0+0xb6>
 800ac30:	3c57      	subs	r4, #87	; 0x57
 800ac32:	e7db      	b.n	800abec <_strtoul_l.isra.0+0x68>
 800ac34:	f04f 35ff 	mov.w	r5, #4294967295
 800ac38:	e7e4      	b.n	800ac04 <_strtoul_l.isra.0+0x80>
 800ac3a:	2d00      	cmp	r5, #0
 800ac3c:	da07      	bge.n	800ac4e <_strtoul_l.isra.0+0xca>
 800ac3e:	2322      	movs	r3, #34	; 0x22
 800ac40:	f8ce 3000 	str.w	r3, [lr]
 800ac44:	f04f 30ff 	mov.w	r0, #4294967295
 800ac48:	b942      	cbnz	r2, 800ac5c <_strtoul_l.isra.0+0xd8>
 800ac4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac4e:	f1b8 0f00 	cmp.w	r8, #0
 800ac52:	d000      	beq.n	800ac56 <_strtoul_l.isra.0+0xd2>
 800ac54:	4240      	negs	r0, r0
 800ac56:	2a00      	cmp	r2, #0
 800ac58:	d0f7      	beq.n	800ac4a <_strtoul_l.isra.0+0xc6>
 800ac5a:	b10d      	cbz	r5, 800ac60 <_strtoul_l.isra.0+0xdc>
 800ac5c:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ac60:	6011      	str	r1, [r2, #0]
 800ac62:	e7f2      	b.n	800ac4a <_strtoul_l.isra.0+0xc6>
 800ac64:	2430      	movs	r4, #48	; 0x30
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1b1      	bne.n	800abce <_strtoul_l.isra.0+0x4a>
 800ac6a:	2308      	movs	r3, #8
 800ac6c:	e7af      	b.n	800abce <_strtoul_l.isra.0+0x4a>
 800ac6e:	2c30      	cmp	r4, #48	; 0x30
 800ac70:	d0a2      	beq.n	800abb8 <_strtoul_l.isra.0+0x34>
 800ac72:	230a      	movs	r3, #10
 800ac74:	e7ab      	b.n	800abce <_strtoul_l.isra.0+0x4a>
 800ac76:	bf00      	nop
 800ac78:	0800dd61 	.word	0x0800dd61

0800ac7c <_strtoul_r>:
 800ac7c:	f7ff bf82 	b.w	800ab84 <_strtoul_l.isra.0>

0800ac80 <strtoul>:
 800ac80:	4613      	mov	r3, r2
 800ac82:	460a      	mov	r2, r1
 800ac84:	4601      	mov	r1, r0
 800ac86:	4802      	ldr	r0, [pc, #8]	; (800ac90 <strtoul+0x10>)
 800ac88:	6800      	ldr	r0, [r0, #0]
 800ac8a:	f7ff bf7b 	b.w	800ab84 <_strtoul_l.isra.0>
 800ac8e:	bf00      	nop
 800ac90:	20000020 	.word	0x20000020

0800ac94 <__tzcalc_limits>:
 800ac94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac98:	4680      	mov	r8, r0
 800ac9a:	f000 fedd 	bl	800ba58 <__gettzinfo>
 800ac9e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800aca2:	4598      	cmp	r8, r3
 800aca4:	f340 8098 	ble.w	800add8 <__tzcalc_limits+0x144>
 800aca8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800acac:	4443      	add	r3, r8
 800acae:	109b      	asrs	r3, r3, #2
 800acb0:	f240 126d 	movw	r2, #365	; 0x16d
 800acb4:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 800acb8:	fb02 3505 	mla	r5, r2, r5, r3
 800acbc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800acc0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 800acc4:	fb93 f3f2 	sdiv	r3, r3, r2
 800acc8:	441d      	add	r5, r3
 800acca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800acce:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800acd2:	fb98 f7f3 	sdiv	r7, r8, r3
 800acd6:	fb03 8717 	mls	r7, r3, r7, r8
 800acda:	4442      	add	r2, r8
 800acdc:	fab7 fc87 	clz	ip, r7
 800ace0:	fbb2 f2f3 	udiv	r2, r2, r3
 800ace4:	f008 0303 	and.w	r3, r8, #3
 800ace8:	4415      	add	r5, r2
 800acea:	2264      	movs	r2, #100	; 0x64
 800acec:	f8c0 8004 	str.w	r8, [r0, #4]
 800acf0:	fb98 f6f2 	sdiv	r6, r8, r2
 800acf4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800acf8:	fb02 8616 	mls	r6, r2, r6, r8
 800acfc:	4604      	mov	r4, r0
 800acfe:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800ad02:	9300      	str	r3, [sp, #0]
 800ad04:	f04f 0e07 	mov.w	lr, #7
 800ad08:	7a22      	ldrb	r2, [r4, #8]
 800ad0a:	6963      	ldr	r3, [r4, #20]
 800ad0c:	2a4a      	cmp	r2, #74	; 0x4a
 800ad0e:	d128      	bne.n	800ad62 <__tzcalc_limits+0xce>
 800ad10:	9900      	ldr	r1, [sp, #0]
 800ad12:	18ea      	adds	r2, r5, r3
 800ad14:	b901      	cbnz	r1, 800ad18 <__tzcalc_limits+0x84>
 800ad16:	b906      	cbnz	r6, 800ad1a <__tzcalc_limits+0x86>
 800ad18:	bb0f      	cbnz	r7, 800ad5e <__tzcalc_limits+0xca>
 800ad1a:	2b3b      	cmp	r3, #59	; 0x3b
 800ad1c:	bfd4      	ite	le
 800ad1e:	2300      	movle	r3, #0
 800ad20:	2301      	movgt	r3, #1
 800ad22:	4413      	add	r3, r2
 800ad24:	1e5a      	subs	r2, r3, #1
 800ad26:	69a3      	ldr	r3, [r4, #24]
 800ad28:	492c      	ldr	r1, [pc, #176]	; (800addc <__tzcalc_limits+0x148>)
 800ad2a:	fb01 3202 	mla	r2, r1, r2, r3
 800ad2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ad30:	4413      	add	r3, r2
 800ad32:	461a      	mov	r2, r3
 800ad34:	17db      	asrs	r3, r3, #31
 800ad36:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800ad3a:	3428      	adds	r4, #40	; 0x28
 800ad3c:	45a3      	cmp	fp, r4
 800ad3e:	d1e3      	bne.n	800ad08 <__tzcalc_limits+0x74>
 800ad40:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 800ad44:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 800ad48:	4294      	cmp	r4, r2
 800ad4a:	eb75 0303 	sbcs.w	r3, r5, r3
 800ad4e:	bfb4      	ite	lt
 800ad50:	2301      	movlt	r3, #1
 800ad52:	2300      	movge	r3, #0
 800ad54:	6003      	str	r3, [r0, #0]
 800ad56:	2001      	movs	r0, #1
 800ad58:	b003      	add	sp, #12
 800ad5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5e:	2300      	movs	r3, #0
 800ad60:	e7df      	b.n	800ad22 <__tzcalc_limits+0x8e>
 800ad62:	2a44      	cmp	r2, #68	; 0x44
 800ad64:	d101      	bne.n	800ad6a <__tzcalc_limits+0xd6>
 800ad66:	18ea      	adds	r2, r5, r3
 800ad68:	e7dd      	b.n	800ad26 <__tzcalc_limits+0x92>
 800ad6a:	9a00      	ldr	r2, [sp, #0]
 800ad6c:	bb72      	cbnz	r2, 800adcc <__tzcalc_limits+0x138>
 800ad6e:	2e00      	cmp	r6, #0
 800ad70:	bf0c      	ite	eq
 800ad72:	46e0      	moveq	r8, ip
 800ad74:	f04f 0801 	movne.w	r8, #1
 800ad78:	4919      	ldr	r1, [pc, #100]	; (800ade0 <__tzcalc_limits+0x14c>)
 800ad7a:	68e2      	ldr	r2, [r4, #12]
 800ad7c:	9201      	str	r2, [sp, #4]
 800ad7e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800ad82:	fb0a 1808 	mla	r8, sl, r8, r1
 800ad86:	462a      	mov	r2, r5
 800ad88:	f04f 0900 	mov.w	r9, #0
 800ad8c:	f1a8 0804 	sub.w	r8, r8, #4
 800ad90:	9901      	ldr	r1, [sp, #4]
 800ad92:	f109 0901 	add.w	r9, r9, #1
 800ad96:	4549      	cmp	r1, r9
 800ad98:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 800ad9c:	dc18      	bgt.n	800add0 <__tzcalc_limits+0x13c>
 800ad9e:	f102 0804 	add.w	r8, r2, #4
 800ada2:	fb98 f9fe 	sdiv	r9, r8, lr
 800ada6:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 800adaa:	eba8 0909 	sub.w	r9, r8, r9
 800adae:	ebb3 0909 	subs.w	r9, r3, r9
 800adb2:	6923      	ldr	r3, [r4, #16]
 800adb4:	f103 33ff 	add.w	r3, r3, #4294967295
 800adb8:	bf48      	it	mi
 800adba:	f109 0907 	addmi.w	r9, r9, #7
 800adbe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800adc2:	444b      	add	r3, r9
 800adc4:	4553      	cmp	r3, sl
 800adc6:	da05      	bge.n	800add4 <__tzcalc_limits+0x140>
 800adc8:	441a      	add	r2, r3
 800adca:	e7ac      	b.n	800ad26 <__tzcalc_limits+0x92>
 800adcc:	46e0      	mov	r8, ip
 800adce:	e7d3      	b.n	800ad78 <__tzcalc_limits+0xe4>
 800add0:	4452      	add	r2, sl
 800add2:	e7dd      	b.n	800ad90 <__tzcalc_limits+0xfc>
 800add4:	3b07      	subs	r3, #7
 800add6:	e7f5      	b.n	800adc4 <__tzcalc_limits+0x130>
 800add8:	2000      	movs	r0, #0
 800adda:	e7bd      	b.n	800ad58 <__tzcalc_limits+0xc4>
 800addc:	00015180 	.word	0x00015180
 800ade0:	0800e30c 	.word	0x0800e30c

0800ade4 <__tz_lock>:
 800ade4:	4801      	ldr	r0, [pc, #4]	; (800adec <__tz_lock+0x8>)
 800ade6:	f7fd b9ae 	b.w	8008146 <__retarget_lock_acquire>
 800adea:	bf00      	nop
 800adec:	2000507b 	.word	0x2000507b

0800adf0 <__tz_unlock>:
 800adf0:	4801      	ldr	r0, [pc, #4]	; (800adf8 <__tz_unlock+0x8>)
 800adf2:	f7fd b9aa 	b.w	800814a <__retarget_lock_release>
 800adf6:	bf00      	nop
 800adf8:	2000507b 	.word	0x2000507b

0800adfc <_tzset_unlocked>:
 800adfc:	4b01      	ldr	r3, [pc, #4]	; (800ae04 <_tzset_unlocked+0x8>)
 800adfe:	6818      	ldr	r0, [r3, #0]
 800ae00:	f000 b802 	b.w	800ae08 <_tzset_unlocked_r>
 800ae04:	20000020 	.word	0x20000020

0800ae08 <_tzset_unlocked_r>:
 800ae08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0c:	b08d      	sub	sp, #52	; 0x34
 800ae0e:	4607      	mov	r7, r0
 800ae10:	f000 fe22 	bl	800ba58 <__gettzinfo>
 800ae14:	49ae      	ldr	r1, [pc, #696]	; (800b0d0 <_tzset_unlocked_r+0x2c8>)
 800ae16:	4eaf      	ldr	r6, [pc, #700]	; (800b0d4 <_tzset_unlocked_r+0x2cc>)
 800ae18:	4605      	mov	r5, r0
 800ae1a:	4638      	mov	r0, r7
 800ae1c:	f000 fe14 	bl	800ba48 <_getenv_r>
 800ae20:	4604      	mov	r4, r0
 800ae22:	b970      	cbnz	r0, 800ae42 <_tzset_unlocked_r+0x3a>
 800ae24:	4bac      	ldr	r3, [pc, #688]	; (800b0d8 <_tzset_unlocked_r+0x2d0>)
 800ae26:	4aad      	ldr	r2, [pc, #692]	; (800b0dc <_tzset_unlocked_r+0x2d4>)
 800ae28:	6018      	str	r0, [r3, #0]
 800ae2a:	4bad      	ldr	r3, [pc, #692]	; (800b0e0 <_tzset_unlocked_r+0x2d8>)
 800ae2c:	6018      	str	r0, [r3, #0]
 800ae2e:	4bad      	ldr	r3, [pc, #692]	; (800b0e4 <_tzset_unlocked_r+0x2dc>)
 800ae30:	6830      	ldr	r0, [r6, #0]
 800ae32:	e9c3 2200 	strd	r2, r2, [r3]
 800ae36:	f7fd f993 	bl	8008160 <free>
 800ae3a:	6034      	str	r4, [r6, #0]
 800ae3c:	b00d      	add	sp, #52	; 0x34
 800ae3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae42:	6831      	ldr	r1, [r6, #0]
 800ae44:	2900      	cmp	r1, #0
 800ae46:	d15f      	bne.n	800af08 <_tzset_unlocked_r+0x100>
 800ae48:	6830      	ldr	r0, [r6, #0]
 800ae4a:	f7fd f989 	bl	8008160 <free>
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f7f5 f9d0 	bl	80001f4 <strlen>
 800ae54:	1c41      	adds	r1, r0, #1
 800ae56:	4638      	mov	r0, r7
 800ae58:	f7fd fc6e 	bl	8008738 <_malloc_r>
 800ae5c:	6030      	str	r0, [r6, #0]
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	d157      	bne.n	800af12 <_tzset_unlocked_r+0x10a>
 800ae62:	7823      	ldrb	r3, [r4, #0]
 800ae64:	4aa0      	ldr	r2, [pc, #640]	; (800b0e8 <_tzset_unlocked_r+0x2e0>)
 800ae66:	49a1      	ldr	r1, [pc, #644]	; (800b0ec <_tzset_unlocked_r+0x2e4>)
 800ae68:	2b3a      	cmp	r3, #58	; 0x3a
 800ae6a:	bf08      	it	eq
 800ae6c:	3401      	addeq	r4, #1
 800ae6e:	ae0a      	add	r6, sp, #40	; 0x28
 800ae70:	4633      	mov	r3, r6
 800ae72:	4620      	mov	r0, r4
 800ae74:	f7fd fd80 	bl	8008978 <siscanf>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	dddf      	ble.n	800ae3c <_tzset_unlocked_r+0x34>
 800ae7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae7e:	18e7      	adds	r7, r4, r3
 800ae80:	5ce3      	ldrb	r3, [r4, r3]
 800ae82:	2b2d      	cmp	r3, #45	; 0x2d
 800ae84:	d149      	bne.n	800af1a <_tzset_unlocked_r+0x112>
 800ae86:	3701      	adds	r7, #1
 800ae88:	f04f 34ff 	mov.w	r4, #4294967295
 800ae8c:	f10d 0a20 	add.w	sl, sp, #32
 800ae90:	f10d 0b1e 	add.w	fp, sp, #30
 800ae94:	f04f 0800 	mov.w	r8, #0
 800ae98:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800ae9c:	4994      	ldr	r1, [pc, #592]	; (800b0f0 <_tzset_unlocked_r+0x2e8>)
 800ae9e:	9603      	str	r6, [sp, #12]
 800aea0:	f8cd b000 	str.w	fp, [sp]
 800aea4:	4633      	mov	r3, r6
 800aea6:	aa07      	add	r2, sp, #28
 800aea8:	4638      	mov	r0, r7
 800aeaa:	f8ad 801e 	strh.w	r8, [sp, #30]
 800aeae:	f8ad 8020 	strh.w	r8, [sp, #32]
 800aeb2:	f7fd fd61 	bl	8008978 <siscanf>
 800aeb6:	4540      	cmp	r0, r8
 800aeb8:	ddc0      	ble.n	800ae3c <_tzset_unlocked_r+0x34>
 800aeba:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800aebe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800aec2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800b0fc <_tzset_unlocked_r+0x2f4>
 800aec6:	213c      	movs	r1, #60	; 0x3c
 800aec8:	fb01 2203 	mla	r2, r1, r3, r2
 800aecc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800aed0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800aed4:	fb01 2303 	mla	r3, r1, r3, r2
 800aed8:	435c      	muls	r4, r3
 800aeda:	62ac      	str	r4, [r5, #40]	; 0x28
 800aedc:	4c81      	ldr	r4, [pc, #516]	; (800b0e4 <_tzset_unlocked_r+0x2dc>)
 800aede:	4b82      	ldr	r3, [pc, #520]	; (800b0e8 <_tzset_unlocked_r+0x2e0>)
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aee4:	4981      	ldr	r1, [pc, #516]	; (800b0ec <_tzset_unlocked_r+0x2e4>)
 800aee6:	441f      	add	r7, r3
 800aee8:	464a      	mov	r2, r9
 800aeea:	4633      	mov	r3, r6
 800aeec:	4638      	mov	r0, r7
 800aeee:	f7fd fd43 	bl	8008978 <siscanf>
 800aef2:	4540      	cmp	r0, r8
 800aef4:	dc16      	bgt.n	800af24 <_tzset_unlocked_r+0x11c>
 800aef6:	6823      	ldr	r3, [r4, #0]
 800aef8:	6063      	str	r3, [r4, #4]
 800aefa:	4b77      	ldr	r3, [pc, #476]	; (800b0d8 <_tzset_unlocked_r+0x2d0>)
 800aefc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800aefe:	601a      	str	r2, [r3, #0]
 800af00:	4b77      	ldr	r3, [pc, #476]	; (800b0e0 <_tzset_unlocked_r+0x2d8>)
 800af02:	f8c3 8000 	str.w	r8, [r3]
 800af06:	e799      	b.n	800ae3c <_tzset_unlocked_r+0x34>
 800af08:	f7f5 f96a 	bl	80001e0 <strcmp>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d19b      	bne.n	800ae48 <_tzset_unlocked_r+0x40>
 800af10:	e794      	b.n	800ae3c <_tzset_unlocked_r+0x34>
 800af12:	4621      	mov	r1, r4
 800af14:	f7fd fdae 	bl	8008a74 <strcpy>
 800af18:	e7a3      	b.n	800ae62 <_tzset_unlocked_r+0x5a>
 800af1a:	2b2b      	cmp	r3, #43	; 0x2b
 800af1c:	bf08      	it	eq
 800af1e:	3701      	addeq	r7, #1
 800af20:	2401      	movs	r4, #1
 800af22:	e7b3      	b.n	800ae8c <_tzset_unlocked_r+0x84>
 800af24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af26:	f8c4 9004 	str.w	r9, [r4, #4]
 800af2a:	18fc      	adds	r4, r7, r3
 800af2c:	5cfb      	ldrb	r3, [r7, r3]
 800af2e:	2b2d      	cmp	r3, #45	; 0x2d
 800af30:	f040 808b 	bne.w	800b04a <_tzset_unlocked_r+0x242>
 800af34:	3401      	adds	r4, #1
 800af36:	f04f 37ff 	mov.w	r7, #4294967295
 800af3a:	2300      	movs	r3, #0
 800af3c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800af40:	f8ad 301e 	strh.w	r3, [sp, #30]
 800af44:	f8ad 3020 	strh.w	r3, [sp, #32]
 800af48:	930a      	str	r3, [sp, #40]	; 0x28
 800af4a:	e9cd a602 	strd	sl, r6, [sp, #8]
 800af4e:	e9cd b600 	strd	fp, r6, [sp]
 800af52:	4967      	ldr	r1, [pc, #412]	; (800b0f0 <_tzset_unlocked_r+0x2e8>)
 800af54:	4633      	mov	r3, r6
 800af56:	aa07      	add	r2, sp, #28
 800af58:	4620      	mov	r0, r4
 800af5a:	f7fd fd0d 	bl	8008978 <siscanf>
 800af5e:	2800      	cmp	r0, #0
 800af60:	dc78      	bgt.n	800b054 <_tzset_unlocked_r+0x24c>
 800af62:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 800af64:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 800af68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af6a:	652f      	str	r7, [r5, #80]	; 0x50
 800af6c:	441c      	add	r4, r3
 800af6e:	462f      	mov	r7, r5
 800af70:	f04f 0900 	mov.w	r9, #0
 800af74:	7823      	ldrb	r3, [r4, #0]
 800af76:	2b2c      	cmp	r3, #44	; 0x2c
 800af78:	bf08      	it	eq
 800af7a:	3401      	addeq	r4, #1
 800af7c:	f894 8000 	ldrb.w	r8, [r4]
 800af80:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800af84:	d178      	bne.n	800b078 <_tzset_unlocked_r+0x270>
 800af86:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800af8a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800af8e:	ab09      	add	r3, sp, #36	; 0x24
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	4958      	ldr	r1, [pc, #352]	; (800b0f4 <_tzset_unlocked_r+0x2ec>)
 800af94:	9603      	str	r6, [sp, #12]
 800af96:	4633      	mov	r3, r6
 800af98:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800af9c:	4620      	mov	r0, r4
 800af9e:	f7fd fceb 	bl	8008978 <siscanf>
 800afa2:	2803      	cmp	r0, #3
 800afa4:	f47f af4a 	bne.w	800ae3c <_tzset_unlocked_r+0x34>
 800afa8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800afac:	1e4b      	subs	r3, r1, #1
 800afae:	2b0b      	cmp	r3, #11
 800afb0:	f63f af44 	bhi.w	800ae3c <_tzset_unlocked_r+0x34>
 800afb4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800afb8:	1e53      	subs	r3, r2, #1
 800afba:	2b04      	cmp	r3, #4
 800afbc:	f63f af3e 	bhi.w	800ae3c <_tzset_unlocked_r+0x34>
 800afc0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800afc4:	2b06      	cmp	r3, #6
 800afc6:	f63f af39 	bhi.w	800ae3c <_tzset_unlocked_r+0x34>
 800afca:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800afce:	f887 8008 	strb.w	r8, [r7, #8]
 800afd2:	617b      	str	r3, [r7, #20]
 800afd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afd6:	eb04 0803 	add.w	r8, r4, r3
 800afda:	2302      	movs	r3, #2
 800afdc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800afe0:	2300      	movs	r3, #0
 800afe2:	f8ad 301e 	strh.w	r3, [sp, #30]
 800afe6:	f8ad 3020 	strh.w	r3, [sp, #32]
 800afea:	930a      	str	r3, [sp, #40]	; 0x28
 800afec:	f898 3000 	ldrb.w	r3, [r8]
 800aff0:	2b2f      	cmp	r3, #47	; 0x2f
 800aff2:	d109      	bne.n	800b008 <_tzset_unlocked_r+0x200>
 800aff4:	e9cd a602 	strd	sl, r6, [sp, #8]
 800aff8:	e9cd b600 	strd	fp, r6, [sp]
 800affc:	493e      	ldr	r1, [pc, #248]	; (800b0f8 <_tzset_unlocked_r+0x2f0>)
 800affe:	4633      	mov	r3, r6
 800b000:	aa07      	add	r2, sp, #28
 800b002:	4640      	mov	r0, r8
 800b004:	f7fd fcb8 	bl	8008978 <siscanf>
 800b008:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b00c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800b010:	213c      	movs	r1, #60	; 0x3c
 800b012:	fb01 2203 	mla	r2, r1, r3, r2
 800b016:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b01a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b01e:	fb01 2303 	mla	r3, r1, r3, r2
 800b022:	61bb      	str	r3, [r7, #24]
 800b024:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b026:	3728      	adds	r7, #40	; 0x28
 800b028:	4444      	add	r4, r8
 800b02a:	f1b9 0f00 	cmp.w	r9, #0
 800b02e:	d020      	beq.n	800b072 <_tzset_unlocked_r+0x26a>
 800b030:	6868      	ldr	r0, [r5, #4]
 800b032:	f7ff fe2f 	bl	800ac94 <__tzcalc_limits>
 800b036:	4b28      	ldr	r3, [pc, #160]	; (800b0d8 <_tzset_unlocked_r+0x2d0>)
 800b038:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800b03e:	1a9b      	subs	r3, r3, r2
 800b040:	4a27      	ldr	r2, [pc, #156]	; (800b0e0 <_tzset_unlocked_r+0x2d8>)
 800b042:	bf18      	it	ne
 800b044:	2301      	movne	r3, #1
 800b046:	6013      	str	r3, [r2, #0]
 800b048:	e6f8      	b.n	800ae3c <_tzset_unlocked_r+0x34>
 800b04a:	2b2b      	cmp	r3, #43	; 0x2b
 800b04c:	bf08      	it	eq
 800b04e:	3401      	addeq	r4, #1
 800b050:	2701      	movs	r7, #1
 800b052:	e772      	b.n	800af3a <_tzset_unlocked_r+0x132>
 800b054:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b058:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800b05c:	213c      	movs	r1, #60	; 0x3c
 800b05e:	fb01 2203 	mla	r2, r1, r3, r2
 800b062:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b066:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b06a:	fb01 2303 	mla	r3, r1, r3, r2
 800b06e:	435f      	muls	r7, r3
 800b070:	e77a      	b.n	800af68 <_tzset_unlocked_r+0x160>
 800b072:	f04f 0901 	mov.w	r9, #1
 800b076:	e77d      	b.n	800af74 <_tzset_unlocked_r+0x16c>
 800b078:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800b07c:	bf06      	itte	eq
 800b07e:	3401      	addeq	r4, #1
 800b080:	4643      	moveq	r3, r8
 800b082:	2344      	movne	r3, #68	; 0x44
 800b084:	220a      	movs	r2, #10
 800b086:	a90b      	add	r1, sp, #44	; 0x2c
 800b088:	4620      	mov	r0, r4
 800b08a:	9305      	str	r3, [sp, #20]
 800b08c:	f7ff fdf8 	bl	800ac80 <strtoul>
 800b090:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b094:	9b05      	ldr	r3, [sp, #20]
 800b096:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800b09a:	45a0      	cmp	r8, r4
 800b09c:	d114      	bne.n	800b0c8 <_tzset_unlocked_r+0x2c0>
 800b09e:	234d      	movs	r3, #77	; 0x4d
 800b0a0:	f1b9 0f00 	cmp.w	r9, #0
 800b0a4:	d107      	bne.n	800b0b6 <_tzset_unlocked_r+0x2ae>
 800b0a6:	722b      	strb	r3, [r5, #8]
 800b0a8:	2103      	movs	r1, #3
 800b0aa:	2302      	movs	r3, #2
 800b0ac:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800b0b0:	f8c5 9014 	str.w	r9, [r5, #20]
 800b0b4:	e791      	b.n	800afda <_tzset_unlocked_r+0x1d2>
 800b0b6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800b0ba:	220b      	movs	r2, #11
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	63eb      	str	r3, [r5, #60]	; 0x3c
 800b0c6:	e788      	b.n	800afda <_tzset_unlocked_r+0x1d2>
 800b0c8:	b280      	uxth	r0, r0
 800b0ca:	723b      	strb	r3, [r7, #8]
 800b0cc:	6178      	str	r0, [r7, #20]
 800b0ce:	e784      	b.n	800afda <_tzset_unlocked_r+0x1d2>
 800b0d0:	0800e240 	.word	0x0800e240
 800b0d4:	2000424c 	.word	0x2000424c
 800b0d8:	20004254 	.word	0x20004254
 800b0dc:	0800e243 	.word	0x0800e243
 800b0e0:	20004250 	.word	0x20004250
 800b0e4:	20000084 	.word	0x20000084
 800b0e8:	2000423f 	.word	0x2000423f
 800b0ec:	0800e247 	.word	0x0800e247
 800b0f0:	0800e26a 	.word	0x0800e26a
 800b0f4:	0800e256 	.word	0x0800e256
 800b0f8:	0800e269 	.word	0x0800e269
 800b0fc:	20004234 	.word	0x20004234

0800b100 <__swbuf_r>:
 800b100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b102:	460e      	mov	r6, r1
 800b104:	4614      	mov	r4, r2
 800b106:	4605      	mov	r5, r0
 800b108:	b118      	cbz	r0, 800b112 <__swbuf_r+0x12>
 800b10a:	6983      	ldr	r3, [r0, #24]
 800b10c:	b90b      	cbnz	r3, 800b112 <__swbuf_r+0x12>
 800b10e:	f7fc ff57 	bl	8007fc0 <__sinit>
 800b112:	4b21      	ldr	r3, [pc, #132]	; (800b198 <__swbuf_r+0x98>)
 800b114:	429c      	cmp	r4, r3
 800b116:	d12b      	bne.n	800b170 <__swbuf_r+0x70>
 800b118:	686c      	ldr	r4, [r5, #4]
 800b11a:	69a3      	ldr	r3, [r4, #24]
 800b11c:	60a3      	str	r3, [r4, #8]
 800b11e:	89a3      	ldrh	r3, [r4, #12]
 800b120:	071a      	lsls	r2, r3, #28
 800b122:	d52f      	bpl.n	800b184 <__swbuf_r+0x84>
 800b124:	6923      	ldr	r3, [r4, #16]
 800b126:	b36b      	cbz	r3, 800b184 <__swbuf_r+0x84>
 800b128:	6923      	ldr	r3, [r4, #16]
 800b12a:	6820      	ldr	r0, [r4, #0]
 800b12c:	1ac0      	subs	r0, r0, r3
 800b12e:	6963      	ldr	r3, [r4, #20]
 800b130:	b2f6      	uxtb	r6, r6
 800b132:	4283      	cmp	r3, r0
 800b134:	4637      	mov	r7, r6
 800b136:	dc04      	bgt.n	800b142 <__swbuf_r+0x42>
 800b138:	4621      	mov	r1, r4
 800b13a:	4628      	mov	r0, r5
 800b13c:	f7fc fe9a 	bl	8007e74 <_fflush_r>
 800b140:	bb30      	cbnz	r0, 800b190 <__swbuf_r+0x90>
 800b142:	68a3      	ldr	r3, [r4, #8]
 800b144:	3b01      	subs	r3, #1
 800b146:	60a3      	str	r3, [r4, #8]
 800b148:	6823      	ldr	r3, [r4, #0]
 800b14a:	1c5a      	adds	r2, r3, #1
 800b14c:	6022      	str	r2, [r4, #0]
 800b14e:	701e      	strb	r6, [r3, #0]
 800b150:	6963      	ldr	r3, [r4, #20]
 800b152:	3001      	adds	r0, #1
 800b154:	4283      	cmp	r3, r0
 800b156:	d004      	beq.n	800b162 <__swbuf_r+0x62>
 800b158:	89a3      	ldrh	r3, [r4, #12]
 800b15a:	07db      	lsls	r3, r3, #31
 800b15c:	d506      	bpl.n	800b16c <__swbuf_r+0x6c>
 800b15e:	2e0a      	cmp	r6, #10
 800b160:	d104      	bne.n	800b16c <__swbuf_r+0x6c>
 800b162:	4621      	mov	r1, r4
 800b164:	4628      	mov	r0, r5
 800b166:	f7fc fe85 	bl	8007e74 <_fflush_r>
 800b16a:	b988      	cbnz	r0, 800b190 <__swbuf_r+0x90>
 800b16c:	4638      	mov	r0, r7
 800b16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b170:	4b0a      	ldr	r3, [pc, #40]	; (800b19c <__swbuf_r+0x9c>)
 800b172:	429c      	cmp	r4, r3
 800b174:	d101      	bne.n	800b17a <__swbuf_r+0x7a>
 800b176:	68ac      	ldr	r4, [r5, #8]
 800b178:	e7cf      	b.n	800b11a <__swbuf_r+0x1a>
 800b17a:	4b09      	ldr	r3, [pc, #36]	; (800b1a0 <__swbuf_r+0xa0>)
 800b17c:	429c      	cmp	r4, r3
 800b17e:	bf08      	it	eq
 800b180:	68ec      	ldreq	r4, [r5, #12]
 800b182:	e7ca      	b.n	800b11a <__swbuf_r+0x1a>
 800b184:	4621      	mov	r1, r4
 800b186:	4628      	mov	r0, r5
 800b188:	f000 f81e 	bl	800b1c8 <__swsetup_r>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d0cb      	beq.n	800b128 <__swbuf_r+0x28>
 800b190:	f04f 37ff 	mov.w	r7, #4294967295
 800b194:	e7ea      	b.n	800b16c <__swbuf_r+0x6c>
 800b196:	bf00      	nop
 800b198:	0800de84 	.word	0x0800de84
 800b19c:	0800dea4 	.word	0x0800dea4
 800b1a0:	0800de64 	.word	0x0800de64

0800b1a4 <_write_r>:
 800b1a4:	b538      	push	{r3, r4, r5, lr}
 800b1a6:	4d07      	ldr	r5, [pc, #28]	; (800b1c4 <_write_r+0x20>)
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	4608      	mov	r0, r1
 800b1ac:	4611      	mov	r1, r2
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	602a      	str	r2, [r5, #0]
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	f7f8 f9e2 	bl	800357c <_write>
 800b1b8:	1c43      	adds	r3, r0, #1
 800b1ba:	d102      	bne.n	800b1c2 <_write_r+0x1e>
 800b1bc:	682b      	ldr	r3, [r5, #0]
 800b1be:	b103      	cbz	r3, 800b1c2 <_write_r+0x1e>
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	bd38      	pop	{r3, r4, r5, pc}
 800b1c4:	20005080 	.word	0x20005080

0800b1c8 <__swsetup_r>:
 800b1c8:	4b32      	ldr	r3, [pc, #200]	; (800b294 <__swsetup_r+0xcc>)
 800b1ca:	b570      	push	{r4, r5, r6, lr}
 800b1cc:	681d      	ldr	r5, [r3, #0]
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	460c      	mov	r4, r1
 800b1d2:	b125      	cbz	r5, 800b1de <__swsetup_r+0x16>
 800b1d4:	69ab      	ldr	r3, [r5, #24]
 800b1d6:	b913      	cbnz	r3, 800b1de <__swsetup_r+0x16>
 800b1d8:	4628      	mov	r0, r5
 800b1da:	f7fc fef1 	bl	8007fc0 <__sinit>
 800b1de:	4b2e      	ldr	r3, [pc, #184]	; (800b298 <__swsetup_r+0xd0>)
 800b1e0:	429c      	cmp	r4, r3
 800b1e2:	d10f      	bne.n	800b204 <__swsetup_r+0x3c>
 800b1e4:	686c      	ldr	r4, [r5, #4]
 800b1e6:	89a3      	ldrh	r3, [r4, #12]
 800b1e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1ec:	0719      	lsls	r1, r3, #28
 800b1ee:	d42c      	bmi.n	800b24a <__swsetup_r+0x82>
 800b1f0:	06dd      	lsls	r5, r3, #27
 800b1f2:	d411      	bmi.n	800b218 <__swsetup_r+0x50>
 800b1f4:	2309      	movs	r3, #9
 800b1f6:	6033      	str	r3, [r6, #0]
 800b1f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b1fc:	81a3      	strh	r3, [r4, #12]
 800b1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b202:	e03e      	b.n	800b282 <__swsetup_r+0xba>
 800b204:	4b25      	ldr	r3, [pc, #148]	; (800b29c <__swsetup_r+0xd4>)
 800b206:	429c      	cmp	r4, r3
 800b208:	d101      	bne.n	800b20e <__swsetup_r+0x46>
 800b20a:	68ac      	ldr	r4, [r5, #8]
 800b20c:	e7eb      	b.n	800b1e6 <__swsetup_r+0x1e>
 800b20e:	4b24      	ldr	r3, [pc, #144]	; (800b2a0 <__swsetup_r+0xd8>)
 800b210:	429c      	cmp	r4, r3
 800b212:	bf08      	it	eq
 800b214:	68ec      	ldreq	r4, [r5, #12]
 800b216:	e7e6      	b.n	800b1e6 <__swsetup_r+0x1e>
 800b218:	0758      	lsls	r0, r3, #29
 800b21a:	d512      	bpl.n	800b242 <__swsetup_r+0x7a>
 800b21c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b21e:	b141      	cbz	r1, 800b232 <__swsetup_r+0x6a>
 800b220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b224:	4299      	cmp	r1, r3
 800b226:	d002      	beq.n	800b22e <__swsetup_r+0x66>
 800b228:	4630      	mov	r0, r6
 800b22a:	f7fd fa35 	bl	8008698 <_free_r>
 800b22e:	2300      	movs	r3, #0
 800b230:	6363      	str	r3, [r4, #52]	; 0x34
 800b232:	89a3      	ldrh	r3, [r4, #12]
 800b234:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b238:	81a3      	strh	r3, [r4, #12]
 800b23a:	2300      	movs	r3, #0
 800b23c:	6063      	str	r3, [r4, #4]
 800b23e:	6923      	ldr	r3, [r4, #16]
 800b240:	6023      	str	r3, [r4, #0]
 800b242:	89a3      	ldrh	r3, [r4, #12]
 800b244:	f043 0308 	orr.w	r3, r3, #8
 800b248:	81a3      	strh	r3, [r4, #12]
 800b24a:	6923      	ldr	r3, [r4, #16]
 800b24c:	b94b      	cbnz	r3, 800b262 <__swsetup_r+0x9a>
 800b24e:	89a3      	ldrh	r3, [r4, #12]
 800b250:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b258:	d003      	beq.n	800b262 <__swsetup_r+0x9a>
 800b25a:	4621      	mov	r1, r4
 800b25c:	4630      	mov	r0, r6
 800b25e:	f000 fd2f 	bl	800bcc0 <__smakebuf_r>
 800b262:	89a0      	ldrh	r0, [r4, #12]
 800b264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b268:	f010 0301 	ands.w	r3, r0, #1
 800b26c:	d00a      	beq.n	800b284 <__swsetup_r+0xbc>
 800b26e:	2300      	movs	r3, #0
 800b270:	60a3      	str	r3, [r4, #8]
 800b272:	6963      	ldr	r3, [r4, #20]
 800b274:	425b      	negs	r3, r3
 800b276:	61a3      	str	r3, [r4, #24]
 800b278:	6923      	ldr	r3, [r4, #16]
 800b27a:	b943      	cbnz	r3, 800b28e <__swsetup_r+0xc6>
 800b27c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b280:	d1ba      	bne.n	800b1f8 <__swsetup_r+0x30>
 800b282:	bd70      	pop	{r4, r5, r6, pc}
 800b284:	0781      	lsls	r1, r0, #30
 800b286:	bf58      	it	pl
 800b288:	6963      	ldrpl	r3, [r4, #20]
 800b28a:	60a3      	str	r3, [r4, #8]
 800b28c:	e7f4      	b.n	800b278 <__swsetup_r+0xb0>
 800b28e:	2000      	movs	r0, #0
 800b290:	e7f7      	b.n	800b282 <__swsetup_r+0xba>
 800b292:	bf00      	nop
 800b294:	20000020 	.word	0x20000020
 800b298:	0800de84 	.word	0x0800de84
 800b29c:	0800dea4 	.word	0x0800dea4
 800b2a0:	0800de64 	.word	0x0800de64

0800b2a4 <abs>:
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	bfb8      	it	lt
 800b2a8:	4240      	neglt	r0, r0
 800b2aa:	4770      	bx	lr

0800b2ac <_close_r>:
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	4d06      	ldr	r5, [pc, #24]	; (800b2c8 <_close_r+0x1c>)
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	4608      	mov	r0, r1
 800b2b6:	602b      	str	r3, [r5, #0]
 800b2b8:	f7f7 fa61 	bl	800277e <_close>
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	d102      	bne.n	800b2c6 <_close_r+0x1a>
 800b2c0:	682b      	ldr	r3, [r5, #0]
 800b2c2:	b103      	cbz	r3, 800b2c6 <_close_r+0x1a>
 800b2c4:	6023      	str	r3, [r4, #0]
 800b2c6:	bd38      	pop	{r3, r4, r5, pc}
 800b2c8:	20005080 	.word	0x20005080

0800b2cc <div>:
 800b2cc:	2900      	cmp	r1, #0
 800b2ce:	b510      	push	{r4, lr}
 800b2d0:	fb91 f4f2 	sdiv	r4, r1, r2
 800b2d4:	fb02 1314 	mls	r3, r2, r4, r1
 800b2d8:	db06      	blt.n	800b2e8 <div+0x1c>
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	da01      	bge.n	800b2e2 <div+0x16>
 800b2de:	3401      	adds	r4, #1
 800b2e0:	1a9b      	subs	r3, r3, r2
 800b2e2:	e9c0 4300 	strd	r4, r3, [r0]
 800b2e6:	bd10      	pop	{r4, pc}
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	bfc4      	itt	gt
 800b2ec:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800b2f0:	189b      	addgt	r3, r3, r2
 800b2f2:	e7f6      	b.n	800b2e2 <div+0x16>

0800b2f4 <rshift>:
 800b2f4:	6903      	ldr	r3, [r0, #16]
 800b2f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b2fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b302:	f100 0414 	add.w	r4, r0, #20
 800b306:	dd45      	ble.n	800b394 <rshift+0xa0>
 800b308:	f011 011f 	ands.w	r1, r1, #31
 800b30c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b310:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b314:	d10c      	bne.n	800b330 <rshift+0x3c>
 800b316:	f100 0710 	add.w	r7, r0, #16
 800b31a:	4629      	mov	r1, r5
 800b31c:	42b1      	cmp	r1, r6
 800b31e:	d334      	bcc.n	800b38a <rshift+0x96>
 800b320:	1a9b      	subs	r3, r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	1eea      	subs	r2, r5, #3
 800b326:	4296      	cmp	r6, r2
 800b328:	bf38      	it	cc
 800b32a:	2300      	movcc	r3, #0
 800b32c:	4423      	add	r3, r4
 800b32e:	e015      	b.n	800b35c <rshift+0x68>
 800b330:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b334:	f1c1 0820 	rsb	r8, r1, #32
 800b338:	40cf      	lsrs	r7, r1
 800b33a:	f105 0e04 	add.w	lr, r5, #4
 800b33e:	46a1      	mov	r9, r4
 800b340:	4576      	cmp	r6, lr
 800b342:	46f4      	mov	ip, lr
 800b344:	d815      	bhi.n	800b372 <rshift+0x7e>
 800b346:	1a9b      	subs	r3, r3, r2
 800b348:	009a      	lsls	r2, r3, #2
 800b34a:	3a04      	subs	r2, #4
 800b34c:	3501      	adds	r5, #1
 800b34e:	42ae      	cmp	r6, r5
 800b350:	bf38      	it	cc
 800b352:	2200      	movcc	r2, #0
 800b354:	18a3      	adds	r3, r4, r2
 800b356:	50a7      	str	r7, [r4, r2]
 800b358:	b107      	cbz	r7, 800b35c <rshift+0x68>
 800b35a:	3304      	adds	r3, #4
 800b35c:	1b1a      	subs	r2, r3, r4
 800b35e:	42a3      	cmp	r3, r4
 800b360:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b364:	bf08      	it	eq
 800b366:	2300      	moveq	r3, #0
 800b368:	6102      	str	r2, [r0, #16]
 800b36a:	bf08      	it	eq
 800b36c:	6143      	streq	r3, [r0, #20]
 800b36e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b372:	f8dc c000 	ldr.w	ip, [ip]
 800b376:	fa0c fc08 	lsl.w	ip, ip, r8
 800b37a:	ea4c 0707 	orr.w	r7, ip, r7
 800b37e:	f849 7b04 	str.w	r7, [r9], #4
 800b382:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b386:	40cf      	lsrs	r7, r1
 800b388:	e7da      	b.n	800b340 <rshift+0x4c>
 800b38a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b38e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b392:	e7c3      	b.n	800b31c <rshift+0x28>
 800b394:	4623      	mov	r3, r4
 800b396:	e7e1      	b.n	800b35c <rshift+0x68>

0800b398 <__hexdig_fun>:
 800b398:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b39c:	2b09      	cmp	r3, #9
 800b39e:	d802      	bhi.n	800b3a6 <__hexdig_fun+0xe>
 800b3a0:	3820      	subs	r0, #32
 800b3a2:	b2c0      	uxtb	r0, r0
 800b3a4:	4770      	bx	lr
 800b3a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b3aa:	2b05      	cmp	r3, #5
 800b3ac:	d801      	bhi.n	800b3b2 <__hexdig_fun+0x1a>
 800b3ae:	3847      	subs	r0, #71	; 0x47
 800b3b0:	e7f7      	b.n	800b3a2 <__hexdig_fun+0xa>
 800b3b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b3b6:	2b05      	cmp	r3, #5
 800b3b8:	d801      	bhi.n	800b3be <__hexdig_fun+0x26>
 800b3ba:	3827      	subs	r0, #39	; 0x27
 800b3bc:	e7f1      	b.n	800b3a2 <__hexdig_fun+0xa>
 800b3be:	2000      	movs	r0, #0
 800b3c0:	4770      	bx	lr
	...

0800b3c4 <__gethex>:
 800b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c8:	ed2d 8b02 	vpush	{d8}
 800b3cc:	b089      	sub	sp, #36	; 0x24
 800b3ce:	ee08 0a10 	vmov	s16, r0
 800b3d2:	9304      	str	r3, [sp, #16]
 800b3d4:	4bbc      	ldr	r3, [pc, #752]	; (800b6c8 <__gethex+0x304>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	9301      	str	r3, [sp, #4]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	468b      	mov	fp, r1
 800b3de:	4690      	mov	r8, r2
 800b3e0:	f7f4 ff08 	bl	80001f4 <strlen>
 800b3e4:	9b01      	ldr	r3, [sp, #4]
 800b3e6:	f8db 2000 	ldr.w	r2, [fp]
 800b3ea:	4403      	add	r3, r0
 800b3ec:	4682      	mov	sl, r0
 800b3ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b3f2:	9305      	str	r3, [sp, #20]
 800b3f4:	1c93      	adds	r3, r2, #2
 800b3f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b3fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b3fe:	32fe      	adds	r2, #254	; 0xfe
 800b400:	18d1      	adds	r1, r2, r3
 800b402:	461f      	mov	r7, r3
 800b404:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b408:	9100      	str	r1, [sp, #0]
 800b40a:	2830      	cmp	r0, #48	; 0x30
 800b40c:	d0f8      	beq.n	800b400 <__gethex+0x3c>
 800b40e:	f7ff ffc3 	bl	800b398 <__hexdig_fun>
 800b412:	4604      	mov	r4, r0
 800b414:	2800      	cmp	r0, #0
 800b416:	d13a      	bne.n	800b48e <__gethex+0xca>
 800b418:	9901      	ldr	r1, [sp, #4]
 800b41a:	4652      	mov	r2, sl
 800b41c:	4638      	mov	r0, r7
 800b41e:	f7fe f88d 	bl	800953c <strncmp>
 800b422:	4605      	mov	r5, r0
 800b424:	2800      	cmp	r0, #0
 800b426:	d168      	bne.n	800b4fa <__gethex+0x136>
 800b428:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b42c:	eb07 060a 	add.w	r6, r7, sl
 800b430:	f7ff ffb2 	bl	800b398 <__hexdig_fun>
 800b434:	2800      	cmp	r0, #0
 800b436:	d062      	beq.n	800b4fe <__gethex+0x13a>
 800b438:	4633      	mov	r3, r6
 800b43a:	7818      	ldrb	r0, [r3, #0]
 800b43c:	2830      	cmp	r0, #48	; 0x30
 800b43e:	461f      	mov	r7, r3
 800b440:	f103 0301 	add.w	r3, r3, #1
 800b444:	d0f9      	beq.n	800b43a <__gethex+0x76>
 800b446:	f7ff ffa7 	bl	800b398 <__hexdig_fun>
 800b44a:	2301      	movs	r3, #1
 800b44c:	fab0 f480 	clz	r4, r0
 800b450:	0964      	lsrs	r4, r4, #5
 800b452:	4635      	mov	r5, r6
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	463a      	mov	r2, r7
 800b458:	4616      	mov	r6, r2
 800b45a:	3201      	adds	r2, #1
 800b45c:	7830      	ldrb	r0, [r6, #0]
 800b45e:	f7ff ff9b 	bl	800b398 <__hexdig_fun>
 800b462:	2800      	cmp	r0, #0
 800b464:	d1f8      	bne.n	800b458 <__gethex+0x94>
 800b466:	9901      	ldr	r1, [sp, #4]
 800b468:	4652      	mov	r2, sl
 800b46a:	4630      	mov	r0, r6
 800b46c:	f7fe f866 	bl	800953c <strncmp>
 800b470:	b980      	cbnz	r0, 800b494 <__gethex+0xd0>
 800b472:	b94d      	cbnz	r5, 800b488 <__gethex+0xc4>
 800b474:	eb06 050a 	add.w	r5, r6, sl
 800b478:	462a      	mov	r2, r5
 800b47a:	4616      	mov	r6, r2
 800b47c:	3201      	adds	r2, #1
 800b47e:	7830      	ldrb	r0, [r6, #0]
 800b480:	f7ff ff8a 	bl	800b398 <__hexdig_fun>
 800b484:	2800      	cmp	r0, #0
 800b486:	d1f8      	bne.n	800b47a <__gethex+0xb6>
 800b488:	1bad      	subs	r5, r5, r6
 800b48a:	00ad      	lsls	r5, r5, #2
 800b48c:	e004      	b.n	800b498 <__gethex+0xd4>
 800b48e:	2400      	movs	r4, #0
 800b490:	4625      	mov	r5, r4
 800b492:	e7e0      	b.n	800b456 <__gethex+0x92>
 800b494:	2d00      	cmp	r5, #0
 800b496:	d1f7      	bne.n	800b488 <__gethex+0xc4>
 800b498:	7833      	ldrb	r3, [r6, #0]
 800b49a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b49e:	2b50      	cmp	r3, #80	; 0x50
 800b4a0:	d13b      	bne.n	800b51a <__gethex+0x156>
 800b4a2:	7873      	ldrb	r3, [r6, #1]
 800b4a4:	2b2b      	cmp	r3, #43	; 0x2b
 800b4a6:	d02c      	beq.n	800b502 <__gethex+0x13e>
 800b4a8:	2b2d      	cmp	r3, #45	; 0x2d
 800b4aa:	d02e      	beq.n	800b50a <__gethex+0x146>
 800b4ac:	1c71      	adds	r1, r6, #1
 800b4ae:	f04f 0900 	mov.w	r9, #0
 800b4b2:	7808      	ldrb	r0, [r1, #0]
 800b4b4:	f7ff ff70 	bl	800b398 <__hexdig_fun>
 800b4b8:	1e43      	subs	r3, r0, #1
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b18      	cmp	r3, #24
 800b4be:	d82c      	bhi.n	800b51a <__gethex+0x156>
 800b4c0:	f1a0 0210 	sub.w	r2, r0, #16
 800b4c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4c8:	f7ff ff66 	bl	800b398 <__hexdig_fun>
 800b4cc:	1e43      	subs	r3, r0, #1
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	2b18      	cmp	r3, #24
 800b4d2:	d91d      	bls.n	800b510 <__gethex+0x14c>
 800b4d4:	f1b9 0f00 	cmp.w	r9, #0
 800b4d8:	d000      	beq.n	800b4dc <__gethex+0x118>
 800b4da:	4252      	negs	r2, r2
 800b4dc:	4415      	add	r5, r2
 800b4de:	f8cb 1000 	str.w	r1, [fp]
 800b4e2:	b1e4      	cbz	r4, 800b51e <__gethex+0x15a>
 800b4e4:	9b00      	ldr	r3, [sp, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	bf14      	ite	ne
 800b4ea:	2700      	movne	r7, #0
 800b4ec:	2706      	moveq	r7, #6
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	b009      	add	sp, #36	; 0x24
 800b4f2:	ecbd 8b02 	vpop	{d8}
 800b4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4fa:	463e      	mov	r6, r7
 800b4fc:	4625      	mov	r5, r4
 800b4fe:	2401      	movs	r4, #1
 800b500:	e7ca      	b.n	800b498 <__gethex+0xd4>
 800b502:	f04f 0900 	mov.w	r9, #0
 800b506:	1cb1      	adds	r1, r6, #2
 800b508:	e7d3      	b.n	800b4b2 <__gethex+0xee>
 800b50a:	f04f 0901 	mov.w	r9, #1
 800b50e:	e7fa      	b.n	800b506 <__gethex+0x142>
 800b510:	230a      	movs	r3, #10
 800b512:	fb03 0202 	mla	r2, r3, r2, r0
 800b516:	3a10      	subs	r2, #16
 800b518:	e7d4      	b.n	800b4c4 <__gethex+0x100>
 800b51a:	4631      	mov	r1, r6
 800b51c:	e7df      	b.n	800b4de <__gethex+0x11a>
 800b51e:	1bf3      	subs	r3, r6, r7
 800b520:	3b01      	subs	r3, #1
 800b522:	4621      	mov	r1, r4
 800b524:	2b07      	cmp	r3, #7
 800b526:	dc0b      	bgt.n	800b540 <__gethex+0x17c>
 800b528:	ee18 0a10 	vmov	r0, s16
 800b52c:	f000 fc26 	bl	800bd7c <_Balloc>
 800b530:	4604      	mov	r4, r0
 800b532:	b940      	cbnz	r0, 800b546 <__gethex+0x182>
 800b534:	4b65      	ldr	r3, [pc, #404]	; (800b6cc <__gethex+0x308>)
 800b536:	4602      	mov	r2, r0
 800b538:	21de      	movs	r1, #222	; 0xde
 800b53a:	4865      	ldr	r0, [pc, #404]	; (800b6d0 <__gethex+0x30c>)
 800b53c:	f002 f96c 	bl	800d818 <__assert_func>
 800b540:	3101      	adds	r1, #1
 800b542:	105b      	asrs	r3, r3, #1
 800b544:	e7ee      	b.n	800b524 <__gethex+0x160>
 800b546:	f100 0914 	add.w	r9, r0, #20
 800b54a:	f04f 0b00 	mov.w	fp, #0
 800b54e:	f1ca 0301 	rsb	r3, sl, #1
 800b552:	f8cd 9008 	str.w	r9, [sp, #8]
 800b556:	f8cd b000 	str.w	fp, [sp]
 800b55a:	9306      	str	r3, [sp, #24]
 800b55c:	42b7      	cmp	r7, r6
 800b55e:	d340      	bcc.n	800b5e2 <__gethex+0x21e>
 800b560:	9802      	ldr	r0, [sp, #8]
 800b562:	9b00      	ldr	r3, [sp, #0]
 800b564:	f840 3b04 	str.w	r3, [r0], #4
 800b568:	eba0 0009 	sub.w	r0, r0, r9
 800b56c:	1080      	asrs	r0, r0, #2
 800b56e:	0146      	lsls	r6, r0, #5
 800b570:	6120      	str	r0, [r4, #16]
 800b572:	4618      	mov	r0, r3
 800b574:	f000 fcf8 	bl	800bf68 <__hi0bits>
 800b578:	1a30      	subs	r0, r6, r0
 800b57a:	f8d8 6000 	ldr.w	r6, [r8]
 800b57e:	42b0      	cmp	r0, r6
 800b580:	dd63      	ble.n	800b64a <__gethex+0x286>
 800b582:	1b87      	subs	r7, r0, r6
 800b584:	4639      	mov	r1, r7
 800b586:	4620      	mov	r0, r4
 800b588:	f001 f892 	bl	800c6b0 <__any_on>
 800b58c:	4682      	mov	sl, r0
 800b58e:	b1a8      	cbz	r0, 800b5bc <__gethex+0x1f8>
 800b590:	1e7b      	subs	r3, r7, #1
 800b592:	1159      	asrs	r1, r3, #5
 800b594:	f003 021f 	and.w	r2, r3, #31
 800b598:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b59c:	f04f 0a01 	mov.w	sl, #1
 800b5a0:	fa0a f202 	lsl.w	r2, sl, r2
 800b5a4:	420a      	tst	r2, r1
 800b5a6:	d009      	beq.n	800b5bc <__gethex+0x1f8>
 800b5a8:	4553      	cmp	r3, sl
 800b5aa:	dd05      	ble.n	800b5b8 <__gethex+0x1f4>
 800b5ac:	1eb9      	subs	r1, r7, #2
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f001 f87e 	bl	800c6b0 <__any_on>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	d145      	bne.n	800b644 <__gethex+0x280>
 800b5b8:	f04f 0a02 	mov.w	sl, #2
 800b5bc:	4639      	mov	r1, r7
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f7ff fe98 	bl	800b2f4 <rshift>
 800b5c4:	443d      	add	r5, r7
 800b5c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5ca:	42ab      	cmp	r3, r5
 800b5cc:	da4c      	bge.n	800b668 <__gethex+0x2a4>
 800b5ce:	ee18 0a10 	vmov	r0, s16
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	f000 fc12 	bl	800bdfc <_Bfree>
 800b5d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5da:	2300      	movs	r3, #0
 800b5dc:	6013      	str	r3, [r2, #0]
 800b5de:	27a3      	movs	r7, #163	; 0xa3
 800b5e0:	e785      	b.n	800b4ee <__gethex+0x12a>
 800b5e2:	1e73      	subs	r3, r6, #1
 800b5e4:	9a05      	ldr	r2, [sp, #20]
 800b5e6:	9303      	str	r3, [sp, #12]
 800b5e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d019      	beq.n	800b624 <__gethex+0x260>
 800b5f0:	f1bb 0f20 	cmp.w	fp, #32
 800b5f4:	d107      	bne.n	800b606 <__gethex+0x242>
 800b5f6:	9b02      	ldr	r3, [sp, #8]
 800b5f8:	9a00      	ldr	r2, [sp, #0]
 800b5fa:	f843 2b04 	str.w	r2, [r3], #4
 800b5fe:	9302      	str	r3, [sp, #8]
 800b600:	2300      	movs	r3, #0
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	469b      	mov	fp, r3
 800b606:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b60a:	f7ff fec5 	bl	800b398 <__hexdig_fun>
 800b60e:	9b00      	ldr	r3, [sp, #0]
 800b610:	f000 000f 	and.w	r0, r0, #15
 800b614:	fa00 f00b 	lsl.w	r0, r0, fp
 800b618:	4303      	orrs	r3, r0
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	f10b 0b04 	add.w	fp, fp, #4
 800b620:	9b03      	ldr	r3, [sp, #12]
 800b622:	e00d      	b.n	800b640 <__gethex+0x27c>
 800b624:	9b03      	ldr	r3, [sp, #12]
 800b626:	9a06      	ldr	r2, [sp, #24]
 800b628:	4413      	add	r3, r2
 800b62a:	42bb      	cmp	r3, r7
 800b62c:	d3e0      	bcc.n	800b5f0 <__gethex+0x22c>
 800b62e:	4618      	mov	r0, r3
 800b630:	9901      	ldr	r1, [sp, #4]
 800b632:	9307      	str	r3, [sp, #28]
 800b634:	4652      	mov	r2, sl
 800b636:	f7fd ff81 	bl	800953c <strncmp>
 800b63a:	9b07      	ldr	r3, [sp, #28]
 800b63c:	2800      	cmp	r0, #0
 800b63e:	d1d7      	bne.n	800b5f0 <__gethex+0x22c>
 800b640:	461e      	mov	r6, r3
 800b642:	e78b      	b.n	800b55c <__gethex+0x198>
 800b644:	f04f 0a03 	mov.w	sl, #3
 800b648:	e7b8      	b.n	800b5bc <__gethex+0x1f8>
 800b64a:	da0a      	bge.n	800b662 <__gethex+0x29e>
 800b64c:	1a37      	subs	r7, r6, r0
 800b64e:	4621      	mov	r1, r4
 800b650:	ee18 0a10 	vmov	r0, s16
 800b654:	463a      	mov	r2, r7
 800b656:	f000 fded 	bl	800c234 <__lshift>
 800b65a:	1bed      	subs	r5, r5, r7
 800b65c:	4604      	mov	r4, r0
 800b65e:	f100 0914 	add.w	r9, r0, #20
 800b662:	f04f 0a00 	mov.w	sl, #0
 800b666:	e7ae      	b.n	800b5c6 <__gethex+0x202>
 800b668:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b66c:	42a8      	cmp	r0, r5
 800b66e:	dd72      	ble.n	800b756 <__gethex+0x392>
 800b670:	1b45      	subs	r5, r0, r5
 800b672:	42ae      	cmp	r6, r5
 800b674:	dc36      	bgt.n	800b6e4 <__gethex+0x320>
 800b676:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b67a:	2b02      	cmp	r3, #2
 800b67c:	d02a      	beq.n	800b6d4 <__gethex+0x310>
 800b67e:	2b03      	cmp	r3, #3
 800b680:	d02c      	beq.n	800b6dc <__gethex+0x318>
 800b682:	2b01      	cmp	r3, #1
 800b684:	d115      	bne.n	800b6b2 <__gethex+0x2ee>
 800b686:	42ae      	cmp	r6, r5
 800b688:	d113      	bne.n	800b6b2 <__gethex+0x2ee>
 800b68a:	2e01      	cmp	r6, #1
 800b68c:	d10b      	bne.n	800b6a6 <__gethex+0x2e2>
 800b68e:	9a04      	ldr	r2, [sp, #16]
 800b690:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b694:	6013      	str	r3, [r2, #0]
 800b696:	2301      	movs	r3, #1
 800b698:	6123      	str	r3, [r4, #16]
 800b69a:	f8c9 3000 	str.w	r3, [r9]
 800b69e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6a0:	2762      	movs	r7, #98	; 0x62
 800b6a2:	601c      	str	r4, [r3, #0]
 800b6a4:	e723      	b.n	800b4ee <__gethex+0x12a>
 800b6a6:	1e71      	subs	r1, r6, #1
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f001 f801 	bl	800c6b0 <__any_on>
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	d1ed      	bne.n	800b68e <__gethex+0x2ca>
 800b6b2:	ee18 0a10 	vmov	r0, s16
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	f000 fba0 	bl	800bdfc <_Bfree>
 800b6bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b6be:	2300      	movs	r3, #0
 800b6c0:	6013      	str	r3, [r2, #0]
 800b6c2:	2750      	movs	r7, #80	; 0x50
 800b6c4:	e713      	b.n	800b4ee <__gethex+0x12a>
 800b6c6:	bf00      	nop
 800b6c8:	0800e2f8 	.word	0x0800e2f8
 800b6cc:	0800e27c 	.word	0x0800e27c
 800b6d0:	0800e28d 	.word	0x0800e28d
 800b6d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1eb      	bne.n	800b6b2 <__gethex+0x2ee>
 800b6da:	e7d8      	b.n	800b68e <__gethex+0x2ca>
 800b6dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1d5      	bne.n	800b68e <__gethex+0x2ca>
 800b6e2:	e7e6      	b.n	800b6b2 <__gethex+0x2ee>
 800b6e4:	1e6f      	subs	r7, r5, #1
 800b6e6:	f1ba 0f00 	cmp.w	sl, #0
 800b6ea:	d131      	bne.n	800b750 <__gethex+0x38c>
 800b6ec:	b127      	cbz	r7, 800b6f8 <__gethex+0x334>
 800b6ee:	4639      	mov	r1, r7
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f000 ffdd 	bl	800c6b0 <__any_on>
 800b6f6:	4682      	mov	sl, r0
 800b6f8:	117b      	asrs	r3, r7, #5
 800b6fa:	2101      	movs	r1, #1
 800b6fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b700:	f007 071f 	and.w	r7, r7, #31
 800b704:	fa01 f707 	lsl.w	r7, r1, r7
 800b708:	421f      	tst	r7, r3
 800b70a:	4629      	mov	r1, r5
 800b70c:	4620      	mov	r0, r4
 800b70e:	bf18      	it	ne
 800b710:	f04a 0a02 	orrne.w	sl, sl, #2
 800b714:	1b76      	subs	r6, r6, r5
 800b716:	f7ff fded 	bl	800b2f4 <rshift>
 800b71a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b71e:	2702      	movs	r7, #2
 800b720:	f1ba 0f00 	cmp.w	sl, #0
 800b724:	d048      	beq.n	800b7b8 <__gethex+0x3f4>
 800b726:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d015      	beq.n	800b75a <__gethex+0x396>
 800b72e:	2b03      	cmp	r3, #3
 800b730:	d017      	beq.n	800b762 <__gethex+0x39e>
 800b732:	2b01      	cmp	r3, #1
 800b734:	d109      	bne.n	800b74a <__gethex+0x386>
 800b736:	f01a 0f02 	tst.w	sl, #2
 800b73a:	d006      	beq.n	800b74a <__gethex+0x386>
 800b73c:	f8d9 0000 	ldr.w	r0, [r9]
 800b740:	ea4a 0a00 	orr.w	sl, sl, r0
 800b744:	f01a 0f01 	tst.w	sl, #1
 800b748:	d10e      	bne.n	800b768 <__gethex+0x3a4>
 800b74a:	f047 0710 	orr.w	r7, r7, #16
 800b74e:	e033      	b.n	800b7b8 <__gethex+0x3f4>
 800b750:	f04f 0a01 	mov.w	sl, #1
 800b754:	e7d0      	b.n	800b6f8 <__gethex+0x334>
 800b756:	2701      	movs	r7, #1
 800b758:	e7e2      	b.n	800b720 <__gethex+0x35c>
 800b75a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b75c:	f1c3 0301 	rsb	r3, r3, #1
 800b760:	9315      	str	r3, [sp, #84]	; 0x54
 800b762:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b764:	2b00      	cmp	r3, #0
 800b766:	d0f0      	beq.n	800b74a <__gethex+0x386>
 800b768:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b76c:	f104 0314 	add.w	r3, r4, #20
 800b770:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b774:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b778:	f04f 0c00 	mov.w	ip, #0
 800b77c:	4618      	mov	r0, r3
 800b77e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b782:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b786:	d01c      	beq.n	800b7c2 <__gethex+0x3fe>
 800b788:	3201      	adds	r2, #1
 800b78a:	6002      	str	r2, [r0, #0]
 800b78c:	2f02      	cmp	r7, #2
 800b78e:	f104 0314 	add.w	r3, r4, #20
 800b792:	d13f      	bne.n	800b814 <__gethex+0x450>
 800b794:	f8d8 2000 	ldr.w	r2, [r8]
 800b798:	3a01      	subs	r2, #1
 800b79a:	42b2      	cmp	r2, r6
 800b79c:	d10a      	bne.n	800b7b4 <__gethex+0x3f0>
 800b79e:	1171      	asrs	r1, r6, #5
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b7a6:	f006 061f 	and.w	r6, r6, #31
 800b7aa:	fa02 f606 	lsl.w	r6, r2, r6
 800b7ae:	421e      	tst	r6, r3
 800b7b0:	bf18      	it	ne
 800b7b2:	4617      	movne	r7, r2
 800b7b4:	f047 0720 	orr.w	r7, r7, #32
 800b7b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7ba:	601c      	str	r4, [r3, #0]
 800b7bc:	9b04      	ldr	r3, [sp, #16]
 800b7be:	601d      	str	r5, [r3, #0]
 800b7c0:	e695      	b.n	800b4ee <__gethex+0x12a>
 800b7c2:	4299      	cmp	r1, r3
 800b7c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b7c8:	d8d8      	bhi.n	800b77c <__gethex+0x3b8>
 800b7ca:	68a3      	ldr	r3, [r4, #8]
 800b7cc:	459b      	cmp	fp, r3
 800b7ce:	db19      	blt.n	800b804 <__gethex+0x440>
 800b7d0:	6861      	ldr	r1, [r4, #4]
 800b7d2:	ee18 0a10 	vmov	r0, s16
 800b7d6:	3101      	adds	r1, #1
 800b7d8:	f000 fad0 	bl	800bd7c <_Balloc>
 800b7dc:	4681      	mov	r9, r0
 800b7de:	b918      	cbnz	r0, 800b7e8 <__gethex+0x424>
 800b7e0:	4b1a      	ldr	r3, [pc, #104]	; (800b84c <__gethex+0x488>)
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	2184      	movs	r1, #132	; 0x84
 800b7e6:	e6a8      	b.n	800b53a <__gethex+0x176>
 800b7e8:	6922      	ldr	r2, [r4, #16]
 800b7ea:	3202      	adds	r2, #2
 800b7ec:	f104 010c 	add.w	r1, r4, #12
 800b7f0:	0092      	lsls	r2, r2, #2
 800b7f2:	300c      	adds	r0, #12
 800b7f4:	f7fc fcbc 	bl	8008170 <memcpy>
 800b7f8:	4621      	mov	r1, r4
 800b7fa:	ee18 0a10 	vmov	r0, s16
 800b7fe:	f000 fafd 	bl	800bdfc <_Bfree>
 800b802:	464c      	mov	r4, r9
 800b804:	6923      	ldr	r3, [r4, #16]
 800b806:	1c5a      	adds	r2, r3, #1
 800b808:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b80c:	6122      	str	r2, [r4, #16]
 800b80e:	2201      	movs	r2, #1
 800b810:	615a      	str	r2, [r3, #20]
 800b812:	e7bb      	b.n	800b78c <__gethex+0x3c8>
 800b814:	6922      	ldr	r2, [r4, #16]
 800b816:	455a      	cmp	r2, fp
 800b818:	dd0b      	ble.n	800b832 <__gethex+0x46e>
 800b81a:	2101      	movs	r1, #1
 800b81c:	4620      	mov	r0, r4
 800b81e:	f7ff fd69 	bl	800b2f4 <rshift>
 800b822:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b826:	3501      	adds	r5, #1
 800b828:	42ab      	cmp	r3, r5
 800b82a:	f6ff aed0 	blt.w	800b5ce <__gethex+0x20a>
 800b82e:	2701      	movs	r7, #1
 800b830:	e7c0      	b.n	800b7b4 <__gethex+0x3f0>
 800b832:	f016 061f 	ands.w	r6, r6, #31
 800b836:	d0fa      	beq.n	800b82e <__gethex+0x46a>
 800b838:	449a      	add	sl, r3
 800b83a:	f1c6 0620 	rsb	r6, r6, #32
 800b83e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b842:	f000 fb91 	bl	800bf68 <__hi0bits>
 800b846:	42b0      	cmp	r0, r6
 800b848:	dbe7      	blt.n	800b81a <__gethex+0x456>
 800b84a:	e7f0      	b.n	800b82e <__gethex+0x46a>
 800b84c:	0800e27c 	.word	0x0800e27c

0800b850 <L_shift>:
 800b850:	f1c2 0208 	rsb	r2, r2, #8
 800b854:	0092      	lsls	r2, r2, #2
 800b856:	b570      	push	{r4, r5, r6, lr}
 800b858:	f1c2 0620 	rsb	r6, r2, #32
 800b85c:	6843      	ldr	r3, [r0, #4]
 800b85e:	6804      	ldr	r4, [r0, #0]
 800b860:	fa03 f506 	lsl.w	r5, r3, r6
 800b864:	432c      	orrs	r4, r5
 800b866:	40d3      	lsrs	r3, r2
 800b868:	6004      	str	r4, [r0, #0]
 800b86a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b86e:	4288      	cmp	r0, r1
 800b870:	d3f4      	bcc.n	800b85c <L_shift+0xc>
 800b872:	bd70      	pop	{r4, r5, r6, pc}

0800b874 <__match>:
 800b874:	b530      	push	{r4, r5, lr}
 800b876:	6803      	ldr	r3, [r0, #0]
 800b878:	3301      	adds	r3, #1
 800b87a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b87e:	b914      	cbnz	r4, 800b886 <__match+0x12>
 800b880:	6003      	str	r3, [r0, #0]
 800b882:	2001      	movs	r0, #1
 800b884:	bd30      	pop	{r4, r5, pc}
 800b886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b88a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b88e:	2d19      	cmp	r5, #25
 800b890:	bf98      	it	ls
 800b892:	3220      	addls	r2, #32
 800b894:	42a2      	cmp	r2, r4
 800b896:	d0f0      	beq.n	800b87a <__match+0x6>
 800b898:	2000      	movs	r0, #0
 800b89a:	e7f3      	b.n	800b884 <__match+0x10>

0800b89c <__hexnan>:
 800b89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a0:	680b      	ldr	r3, [r1, #0]
 800b8a2:	6801      	ldr	r1, [r0, #0]
 800b8a4:	115e      	asrs	r6, r3, #5
 800b8a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b8aa:	f013 031f 	ands.w	r3, r3, #31
 800b8ae:	b087      	sub	sp, #28
 800b8b0:	bf18      	it	ne
 800b8b2:	3604      	addne	r6, #4
 800b8b4:	2500      	movs	r5, #0
 800b8b6:	1f37      	subs	r7, r6, #4
 800b8b8:	4682      	mov	sl, r0
 800b8ba:	4690      	mov	r8, r2
 800b8bc:	9301      	str	r3, [sp, #4]
 800b8be:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8c2:	46b9      	mov	r9, r7
 800b8c4:	463c      	mov	r4, r7
 800b8c6:	9502      	str	r5, [sp, #8]
 800b8c8:	46ab      	mov	fp, r5
 800b8ca:	784a      	ldrb	r2, [r1, #1]
 800b8cc:	1c4b      	adds	r3, r1, #1
 800b8ce:	9303      	str	r3, [sp, #12]
 800b8d0:	b342      	cbz	r2, 800b924 <__hexnan+0x88>
 800b8d2:	4610      	mov	r0, r2
 800b8d4:	9105      	str	r1, [sp, #20]
 800b8d6:	9204      	str	r2, [sp, #16]
 800b8d8:	f7ff fd5e 	bl	800b398 <__hexdig_fun>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d14f      	bne.n	800b980 <__hexnan+0xe4>
 800b8e0:	9a04      	ldr	r2, [sp, #16]
 800b8e2:	9905      	ldr	r1, [sp, #20]
 800b8e4:	2a20      	cmp	r2, #32
 800b8e6:	d818      	bhi.n	800b91a <__hexnan+0x7e>
 800b8e8:	9b02      	ldr	r3, [sp, #8]
 800b8ea:	459b      	cmp	fp, r3
 800b8ec:	dd13      	ble.n	800b916 <__hexnan+0x7a>
 800b8ee:	454c      	cmp	r4, r9
 800b8f0:	d206      	bcs.n	800b900 <__hexnan+0x64>
 800b8f2:	2d07      	cmp	r5, #7
 800b8f4:	dc04      	bgt.n	800b900 <__hexnan+0x64>
 800b8f6:	462a      	mov	r2, r5
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f7ff ffa8 	bl	800b850 <L_shift>
 800b900:	4544      	cmp	r4, r8
 800b902:	d950      	bls.n	800b9a6 <__hexnan+0x10a>
 800b904:	2300      	movs	r3, #0
 800b906:	f1a4 0904 	sub.w	r9, r4, #4
 800b90a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b90e:	f8cd b008 	str.w	fp, [sp, #8]
 800b912:	464c      	mov	r4, r9
 800b914:	461d      	mov	r5, r3
 800b916:	9903      	ldr	r1, [sp, #12]
 800b918:	e7d7      	b.n	800b8ca <__hexnan+0x2e>
 800b91a:	2a29      	cmp	r2, #41	; 0x29
 800b91c:	d156      	bne.n	800b9cc <__hexnan+0x130>
 800b91e:	3102      	adds	r1, #2
 800b920:	f8ca 1000 	str.w	r1, [sl]
 800b924:	f1bb 0f00 	cmp.w	fp, #0
 800b928:	d050      	beq.n	800b9cc <__hexnan+0x130>
 800b92a:	454c      	cmp	r4, r9
 800b92c:	d206      	bcs.n	800b93c <__hexnan+0xa0>
 800b92e:	2d07      	cmp	r5, #7
 800b930:	dc04      	bgt.n	800b93c <__hexnan+0xa0>
 800b932:	462a      	mov	r2, r5
 800b934:	4649      	mov	r1, r9
 800b936:	4620      	mov	r0, r4
 800b938:	f7ff ff8a 	bl	800b850 <L_shift>
 800b93c:	4544      	cmp	r4, r8
 800b93e:	d934      	bls.n	800b9aa <__hexnan+0x10e>
 800b940:	f1a8 0204 	sub.w	r2, r8, #4
 800b944:	4623      	mov	r3, r4
 800b946:	f853 1b04 	ldr.w	r1, [r3], #4
 800b94a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b94e:	429f      	cmp	r7, r3
 800b950:	d2f9      	bcs.n	800b946 <__hexnan+0xaa>
 800b952:	1b3b      	subs	r3, r7, r4
 800b954:	f023 0303 	bic.w	r3, r3, #3
 800b958:	3304      	adds	r3, #4
 800b95a:	3401      	adds	r4, #1
 800b95c:	3e03      	subs	r6, #3
 800b95e:	42b4      	cmp	r4, r6
 800b960:	bf88      	it	hi
 800b962:	2304      	movhi	r3, #4
 800b964:	4443      	add	r3, r8
 800b966:	2200      	movs	r2, #0
 800b968:	f843 2b04 	str.w	r2, [r3], #4
 800b96c:	429f      	cmp	r7, r3
 800b96e:	d2fb      	bcs.n	800b968 <__hexnan+0xcc>
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	b91b      	cbnz	r3, 800b97c <__hexnan+0xe0>
 800b974:	4547      	cmp	r7, r8
 800b976:	d127      	bne.n	800b9c8 <__hexnan+0x12c>
 800b978:	2301      	movs	r3, #1
 800b97a:	603b      	str	r3, [r7, #0]
 800b97c:	2005      	movs	r0, #5
 800b97e:	e026      	b.n	800b9ce <__hexnan+0x132>
 800b980:	3501      	adds	r5, #1
 800b982:	2d08      	cmp	r5, #8
 800b984:	f10b 0b01 	add.w	fp, fp, #1
 800b988:	dd06      	ble.n	800b998 <__hexnan+0xfc>
 800b98a:	4544      	cmp	r4, r8
 800b98c:	d9c3      	bls.n	800b916 <__hexnan+0x7a>
 800b98e:	2300      	movs	r3, #0
 800b990:	f844 3c04 	str.w	r3, [r4, #-4]
 800b994:	2501      	movs	r5, #1
 800b996:	3c04      	subs	r4, #4
 800b998:	6822      	ldr	r2, [r4, #0]
 800b99a:	f000 000f 	and.w	r0, r0, #15
 800b99e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b9a2:	6022      	str	r2, [r4, #0]
 800b9a4:	e7b7      	b.n	800b916 <__hexnan+0x7a>
 800b9a6:	2508      	movs	r5, #8
 800b9a8:	e7b5      	b.n	800b916 <__hexnan+0x7a>
 800b9aa:	9b01      	ldr	r3, [sp, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d0df      	beq.n	800b970 <__hexnan+0xd4>
 800b9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b4:	f1c3 0320 	rsb	r3, r3, #32
 800b9b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b9bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b9c0:	401a      	ands	r2, r3
 800b9c2:	f846 2c04 	str.w	r2, [r6, #-4]
 800b9c6:	e7d3      	b.n	800b970 <__hexnan+0xd4>
 800b9c8:	3f04      	subs	r7, #4
 800b9ca:	e7d1      	b.n	800b970 <__hexnan+0xd4>
 800b9cc:	2004      	movs	r0, #4
 800b9ce:	b007      	add	sp, #28
 800b9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9d4 <_findenv_r>:
 800b9d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d8:	4607      	mov	r7, r0
 800b9da:	4689      	mov	r9, r1
 800b9dc:	4616      	mov	r6, r2
 800b9de:	f001 ff39 	bl	800d854 <__env_lock>
 800b9e2:	4b18      	ldr	r3, [pc, #96]	; (800ba44 <_findenv_r+0x70>)
 800b9e4:	681c      	ldr	r4, [r3, #0]
 800b9e6:	469a      	mov	sl, r3
 800b9e8:	b134      	cbz	r4, 800b9f8 <_findenv_r+0x24>
 800b9ea:	464b      	mov	r3, r9
 800b9ec:	4698      	mov	r8, r3
 800b9ee:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b9f2:	b139      	cbz	r1, 800ba04 <_findenv_r+0x30>
 800b9f4:	293d      	cmp	r1, #61	; 0x3d
 800b9f6:	d1f9      	bne.n	800b9ec <_findenv_r+0x18>
 800b9f8:	4638      	mov	r0, r7
 800b9fa:	f001 ff31 	bl	800d860 <__env_unlock>
 800b9fe:	2000      	movs	r0, #0
 800ba00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba04:	eba8 0809 	sub.w	r8, r8, r9
 800ba08:	46a3      	mov	fp, r4
 800ba0a:	f854 0b04 	ldr.w	r0, [r4], #4
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d0f2      	beq.n	800b9f8 <_findenv_r+0x24>
 800ba12:	4642      	mov	r2, r8
 800ba14:	4649      	mov	r1, r9
 800ba16:	f7fd fd91 	bl	800953c <strncmp>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d1f4      	bne.n	800ba08 <_findenv_r+0x34>
 800ba1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ba22:	eb03 0508 	add.w	r5, r3, r8
 800ba26:	f813 3008 	ldrb.w	r3, [r3, r8]
 800ba2a:	2b3d      	cmp	r3, #61	; 0x3d
 800ba2c:	d1ec      	bne.n	800ba08 <_findenv_r+0x34>
 800ba2e:	f8da 3000 	ldr.w	r3, [sl]
 800ba32:	ebab 0303 	sub.w	r3, fp, r3
 800ba36:	109b      	asrs	r3, r3, #2
 800ba38:	4638      	mov	r0, r7
 800ba3a:	6033      	str	r3, [r6, #0]
 800ba3c:	f001 ff10 	bl	800d860 <__env_unlock>
 800ba40:	1c68      	adds	r0, r5, #1
 800ba42:	e7dd      	b.n	800ba00 <_findenv_r+0x2c>
 800ba44:	2000000c 	.word	0x2000000c

0800ba48 <_getenv_r>:
 800ba48:	b507      	push	{r0, r1, r2, lr}
 800ba4a:	aa01      	add	r2, sp, #4
 800ba4c:	f7ff ffc2 	bl	800b9d4 <_findenv_r>
 800ba50:	b003      	add	sp, #12
 800ba52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ba58 <__gettzinfo>:
 800ba58:	4800      	ldr	r0, [pc, #0]	; (800ba5c <__gettzinfo+0x4>)
 800ba5a:	4770      	bx	lr
 800ba5c:	20000090 	.word	0x20000090

0800ba60 <labs>:
 800ba60:	2800      	cmp	r0, #0
 800ba62:	bfb8      	it	lt
 800ba64:	4240      	neglt	r0, r0
 800ba66:	4770      	bx	lr

0800ba68 <localtime_r>:
 800ba68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ba6c:	4607      	mov	r7, r0
 800ba6e:	9101      	str	r1, [sp, #4]
 800ba70:	f7ff fff2 	bl	800ba58 <__gettzinfo>
 800ba74:	9901      	ldr	r1, [sp, #4]
 800ba76:	4680      	mov	r8, r0
 800ba78:	4638      	mov	r0, r7
 800ba7a:	f001 ff1b 	bl	800d8b4 <gmtime_r>
 800ba7e:	6943      	ldr	r3, [r0, #20]
 800ba80:	079a      	lsls	r2, r3, #30
 800ba82:	4604      	mov	r4, r0
 800ba84:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 800ba88:	d105      	bne.n	800ba96 <localtime_r+0x2e>
 800ba8a:	2264      	movs	r2, #100	; 0x64
 800ba8c:	fb96 f3f2 	sdiv	r3, r6, r2
 800ba90:	fb02 6313 	mls	r3, r2, r3, r6
 800ba94:	bb7b      	cbnz	r3, 800baf6 <localtime_r+0x8e>
 800ba96:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ba9a:	fb96 f5f3 	sdiv	r5, r6, r3
 800ba9e:	fb03 6515 	mls	r5, r3, r5, r6
 800baa2:	fab5 f585 	clz	r5, r5
 800baa6:	096d      	lsrs	r5, r5, #5
 800baa8:	4b68      	ldr	r3, [pc, #416]	; (800bc4c <localtime_r+0x1e4>)
 800baaa:	2230      	movs	r2, #48	; 0x30
 800baac:	fb02 3505 	mla	r5, r2, r5, r3
 800bab0:	f7ff f998 	bl	800ade4 <__tz_lock>
 800bab4:	f7ff f9a2 	bl	800adfc <_tzset_unlocked>
 800bab8:	4b65      	ldr	r3, [pc, #404]	; (800bc50 <localtime_r+0x1e8>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	b353      	cbz	r3, 800bb14 <localtime_r+0xac>
 800babe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bac2:	42b3      	cmp	r3, r6
 800bac4:	d119      	bne.n	800bafa <localtime_r+0x92>
 800bac6:	f8d8 1000 	ldr.w	r1, [r8]
 800baca:	e9d7 6700 	ldrd	r6, r7, [r7]
 800bace:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 800bad2:	b9d1      	cbnz	r1, 800bb0a <localtime_r+0xa2>
 800bad4:	4296      	cmp	r6, r2
 800bad6:	eb77 0303 	sbcs.w	r3, r7, r3
 800bada:	da23      	bge.n	800bb24 <localtime_r+0xbc>
 800badc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 800bae0:	4296      	cmp	r6, r2
 800bae2:	eb77 0303 	sbcs.w	r3, r7, r3
 800bae6:	bfb4      	ite	lt
 800bae8:	2301      	movlt	r3, #1
 800baea:	2300      	movge	r3, #0
 800baec:	6223      	str	r3, [r4, #32]
 800baee:	db1b      	blt.n	800bb28 <localtime_r+0xc0>
 800baf0:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 800baf4:	e01a      	b.n	800bb2c <localtime_r+0xc4>
 800baf6:	2501      	movs	r5, #1
 800baf8:	e7d6      	b.n	800baa8 <localtime_r+0x40>
 800bafa:	4630      	mov	r0, r6
 800bafc:	f7ff f8ca 	bl	800ac94 <__tzcalc_limits>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d1e0      	bne.n	800bac6 <localtime_r+0x5e>
 800bb04:	f04f 33ff 	mov.w	r3, #4294967295
 800bb08:	e004      	b.n	800bb14 <localtime_r+0xac>
 800bb0a:	4296      	cmp	r6, r2
 800bb0c:	eb77 0303 	sbcs.w	r3, r7, r3
 800bb10:	da02      	bge.n	800bb18 <localtime_r+0xb0>
 800bb12:	2300      	movs	r3, #0
 800bb14:	6223      	str	r3, [r4, #32]
 800bb16:	e7eb      	b.n	800baf0 <localtime_r+0x88>
 800bb18:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 800bb1c:	4296      	cmp	r6, r2
 800bb1e:	eb77 0303 	sbcs.w	r3, r7, r3
 800bb22:	daf6      	bge.n	800bb12 <localtime_r+0xaa>
 800bb24:	2301      	movs	r3, #1
 800bb26:	6223      	str	r3, [r4, #32]
 800bb28:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 800bb2c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800bb30:	203c      	movs	r0, #60	; 0x3c
 800bb32:	fb91 f6f3 	sdiv	r6, r1, r3
 800bb36:	fb03 1316 	mls	r3, r3, r6, r1
 800bb3a:	6861      	ldr	r1, [r4, #4]
 800bb3c:	fb93 f2f0 	sdiv	r2, r3, r0
 800bb40:	fb00 3012 	mls	r0, r0, r2, r3
 800bb44:	6823      	ldr	r3, [r4, #0]
 800bb46:	1a89      	subs	r1, r1, r2
 800bb48:	68a2      	ldr	r2, [r4, #8]
 800bb4a:	6061      	str	r1, [r4, #4]
 800bb4c:	1a1b      	subs	r3, r3, r0
 800bb4e:	1b92      	subs	r2, r2, r6
 800bb50:	2b3b      	cmp	r3, #59	; 0x3b
 800bb52:	6023      	str	r3, [r4, #0]
 800bb54:	60a2      	str	r2, [r4, #8]
 800bb56:	dd35      	ble.n	800bbc4 <localtime_r+0x15c>
 800bb58:	3101      	adds	r1, #1
 800bb5a:	6061      	str	r1, [r4, #4]
 800bb5c:	3b3c      	subs	r3, #60	; 0x3c
 800bb5e:	6023      	str	r3, [r4, #0]
 800bb60:	6863      	ldr	r3, [r4, #4]
 800bb62:	2b3b      	cmp	r3, #59	; 0x3b
 800bb64:	dd34      	ble.n	800bbd0 <localtime_r+0x168>
 800bb66:	3201      	adds	r2, #1
 800bb68:	60a2      	str	r2, [r4, #8]
 800bb6a:	3b3c      	subs	r3, #60	; 0x3c
 800bb6c:	6063      	str	r3, [r4, #4]
 800bb6e:	68a3      	ldr	r3, [r4, #8]
 800bb70:	2b17      	cmp	r3, #23
 800bb72:	dd33      	ble.n	800bbdc <localtime_r+0x174>
 800bb74:	69e2      	ldr	r2, [r4, #28]
 800bb76:	3201      	adds	r2, #1
 800bb78:	61e2      	str	r2, [r4, #28]
 800bb7a:	69a2      	ldr	r2, [r4, #24]
 800bb7c:	3201      	adds	r2, #1
 800bb7e:	2a06      	cmp	r2, #6
 800bb80:	bfc8      	it	gt
 800bb82:	2200      	movgt	r2, #0
 800bb84:	61a2      	str	r2, [r4, #24]
 800bb86:	68e2      	ldr	r2, [r4, #12]
 800bb88:	3b18      	subs	r3, #24
 800bb8a:	3201      	adds	r2, #1
 800bb8c:	60a3      	str	r3, [r4, #8]
 800bb8e:	6923      	ldr	r3, [r4, #16]
 800bb90:	60e2      	str	r2, [r4, #12]
 800bb92:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800bb96:	428a      	cmp	r2, r1
 800bb98:	dd0e      	ble.n	800bbb8 <localtime_r+0x150>
 800bb9a:	2b0b      	cmp	r3, #11
 800bb9c:	eba2 0201 	sub.w	r2, r2, r1
 800bba0:	60e2      	str	r2, [r4, #12]
 800bba2:	f103 0201 	add.w	r2, r3, #1
 800bba6:	bf09      	itett	eq
 800bba8:	6963      	ldreq	r3, [r4, #20]
 800bbaa:	6122      	strne	r2, [r4, #16]
 800bbac:	2200      	moveq	r2, #0
 800bbae:	3301      	addeq	r3, #1
 800bbb0:	bf02      	ittt	eq
 800bbb2:	6122      	streq	r2, [r4, #16]
 800bbb4:	6163      	streq	r3, [r4, #20]
 800bbb6:	61e2      	streq	r2, [r4, #28]
 800bbb8:	f7ff f91a 	bl	800adf0 <__tz_unlock>
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	b002      	add	sp, #8
 800bbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	dacb      	bge.n	800bb60 <localtime_r+0xf8>
 800bbc8:	3901      	subs	r1, #1
 800bbca:	6061      	str	r1, [r4, #4]
 800bbcc:	333c      	adds	r3, #60	; 0x3c
 800bbce:	e7c6      	b.n	800bb5e <localtime_r+0xf6>
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	dacc      	bge.n	800bb6e <localtime_r+0x106>
 800bbd4:	3a01      	subs	r2, #1
 800bbd6:	60a2      	str	r2, [r4, #8]
 800bbd8:	333c      	adds	r3, #60	; 0x3c
 800bbda:	e7c7      	b.n	800bb6c <localtime_r+0x104>
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	daeb      	bge.n	800bbb8 <localtime_r+0x150>
 800bbe0:	69e2      	ldr	r2, [r4, #28]
 800bbe2:	3a01      	subs	r2, #1
 800bbe4:	61e2      	str	r2, [r4, #28]
 800bbe6:	69a2      	ldr	r2, [r4, #24]
 800bbe8:	3a01      	subs	r2, #1
 800bbea:	bf48      	it	mi
 800bbec:	2206      	movmi	r2, #6
 800bbee:	61a2      	str	r2, [r4, #24]
 800bbf0:	68e2      	ldr	r2, [r4, #12]
 800bbf2:	3318      	adds	r3, #24
 800bbf4:	3a01      	subs	r2, #1
 800bbf6:	60e2      	str	r2, [r4, #12]
 800bbf8:	60a3      	str	r3, [r4, #8]
 800bbfa:	2a00      	cmp	r2, #0
 800bbfc:	d1dc      	bne.n	800bbb8 <localtime_r+0x150>
 800bbfe:	6923      	ldr	r3, [r4, #16]
 800bc00:	3b01      	subs	r3, #1
 800bc02:	d405      	bmi.n	800bc10 <localtime_r+0x1a8>
 800bc04:	6123      	str	r3, [r4, #16]
 800bc06:	6923      	ldr	r3, [r4, #16]
 800bc08:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800bc0c:	60e3      	str	r3, [r4, #12]
 800bc0e:	e7d3      	b.n	800bbb8 <localtime_r+0x150>
 800bc10:	230b      	movs	r3, #11
 800bc12:	6123      	str	r3, [r4, #16]
 800bc14:	6963      	ldr	r3, [r4, #20]
 800bc16:	1e5a      	subs	r2, r3, #1
 800bc18:	6162      	str	r2, [r4, #20]
 800bc1a:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 800bc1e:	0793      	lsls	r3, r2, #30
 800bc20:	d105      	bne.n	800bc2e <localtime_r+0x1c6>
 800bc22:	2164      	movs	r1, #100	; 0x64
 800bc24:	fb92 f3f1 	sdiv	r3, r2, r1
 800bc28:	fb01 2313 	mls	r3, r1, r3, r2
 800bc2c:	b963      	cbnz	r3, 800bc48 <localtime_r+0x1e0>
 800bc2e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800bc32:	fb92 f3f1 	sdiv	r3, r2, r1
 800bc36:	fb01 2313 	mls	r3, r1, r3, r2
 800bc3a:	fab3 f383 	clz	r3, r3
 800bc3e:	095b      	lsrs	r3, r3, #5
 800bc40:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800bc44:	61e3      	str	r3, [r4, #28]
 800bc46:	e7de      	b.n	800bc06 <localtime_r+0x19e>
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e7f9      	b.n	800bc40 <localtime_r+0x1d8>
 800bc4c:	0800e30c 	.word	0x0800e30c
 800bc50:	20004250 	.word	0x20004250

0800bc54 <_lseek_r>:
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	4d07      	ldr	r5, [pc, #28]	; (800bc74 <_lseek_r+0x20>)
 800bc58:	4604      	mov	r4, r0
 800bc5a:	4608      	mov	r0, r1
 800bc5c:	4611      	mov	r1, r2
 800bc5e:	2200      	movs	r2, #0
 800bc60:	602a      	str	r2, [r5, #0]
 800bc62:	461a      	mov	r2, r3
 800bc64:	f7f6 fdb2 	bl	80027cc <_lseek>
 800bc68:	1c43      	adds	r3, r0, #1
 800bc6a:	d102      	bne.n	800bc72 <_lseek_r+0x1e>
 800bc6c:	682b      	ldr	r3, [r5, #0]
 800bc6e:	b103      	cbz	r3, 800bc72 <_lseek_r+0x1e>
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	bd38      	pop	{r3, r4, r5, pc}
 800bc74:	20005080 	.word	0x20005080

0800bc78 <__swhatbuf_r>:
 800bc78:	b570      	push	{r4, r5, r6, lr}
 800bc7a:	460e      	mov	r6, r1
 800bc7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc80:	2900      	cmp	r1, #0
 800bc82:	b096      	sub	sp, #88	; 0x58
 800bc84:	4614      	mov	r4, r2
 800bc86:	461d      	mov	r5, r3
 800bc88:	da07      	bge.n	800bc9a <__swhatbuf_r+0x22>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	602b      	str	r3, [r5, #0]
 800bc8e:	89b3      	ldrh	r3, [r6, #12]
 800bc90:	061a      	lsls	r2, r3, #24
 800bc92:	d410      	bmi.n	800bcb6 <__swhatbuf_r+0x3e>
 800bc94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc98:	e00e      	b.n	800bcb8 <__swhatbuf_r+0x40>
 800bc9a:	466a      	mov	r2, sp
 800bc9c:	f001 fdf8 	bl	800d890 <_fstat_r>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	dbf2      	blt.n	800bc8a <__swhatbuf_r+0x12>
 800bca4:	9a01      	ldr	r2, [sp, #4]
 800bca6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bcaa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bcae:	425a      	negs	r2, r3
 800bcb0:	415a      	adcs	r2, r3
 800bcb2:	602a      	str	r2, [r5, #0]
 800bcb4:	e7ee      	b.n	800bc94 <__swhatbuf_r+0x1c>
 800bcb6:	2340      	movs	r3, #64	; 0x40
 800bcb8:	2000      	movs	r0, #0
 800bcba:	6023      	str	r3, [r4, #0]
 800bcbc:	b016      	add	sp, #88	; 0x58
 800bcbe:	bd70      	pop	{r4, r5, r6, pc}

0800bcc0 <__smakebuf_r>:
 800bcc0:	898b      	ldrh	r3, [r1, #12]
 800bcc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcc4:	079d      	lsls	r5, r3, #30
 800bcc6:	4606      	mov	r6, r0
 800bcc8:	460c      	mov	r4, r1
 800bcca:	d507      	bpl.n	800bcdc <__smakebuf_r+0x1c>
 800bccc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bcd0:	6023      	str	r3, [r4, #0]
 800bcd2:	6123      	str	r3, [r4, #16]
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	6163      	str	r3, [r4, #20]
 800bcd8:	b002      	add	sp, #8
 800bcda:	bd70      	pop	{r4, r5, r6, pc}
 800bcdc:	ab01      	add	r3, sp, #4
 800bcde:	466a      	mov	r2, sp
 800bce0:	f7ff ffca 	bl	800bc78 <__swhatbuf_r>
 800bce4:	9900      	ldr	r1, [sp, #0]
 800bce6:	4605      	mov	r5, r0
 800bce8:	4630      	mov	r0, r6
 800bcea:	f7fc fd25 	bl	8008738 <_malloc_r>
 800bcee:	b948      	cbnz	r0, 800bd04 <__smakebuf_r+0x44>
 800bcf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcf4:	059a      	lsls	r2, r3, #22
 800bcf6:	d4ef      	bmi.n	800bcd8 <__smakebuf_r+0x18>
 800bcf8:	f023 0303 	bic.w	r3, r3, #3
 800bcfc:	f043 0302 	orr.w	r3, r3, #2
 800bd00:	81a3      	strh	r3, [r4, #12]
 800bd02:	e7e3      	b.n	800bccc <__smakebuf_r+0xc>
 800bd04:	4b0d      	ldr	r3, [pc, #52]	; (800bd3c <__smakebuf_r+0x7c>)
 800bd06:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd08:	89a3      	ldrh	r3, [r4, #12]
 800bd0a:	6020      	str	r0, [r4, #0]
 800bd0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd10:	81a3      	strh	r3, [r4, #12]
 800bd12:	9b00      	ldr	r3, [sp, #0]
 800bd14:	6163      	str	r3, [r4, #20]
 800bd16:	9b01      	ldr	r3, [sp, #4]
 800bd18:	6120      	str	r0, [r4, #16]
 800bd1a:	b15b      	cbz	r3, 800bd34 <__smakebuf_r+0x74>
 800bd1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd20:	4630      	mov	r0, r6
 800bd22:	f001 fe77 	bl	800da14 <_isatty_r>
 800bd26:	b128      	cbz	r0, 800bd34 <__smakebuf_r+0x74>
 800bd28:	89a3      	ldrh	r3, [r4, #12]
 800bd2a:	f023 0303 	bic.w	r3, r3, #3
 800bd2e:	f043 0301 	orr.w	r3, r3, #1
 800bd32:	81a3      	strh	r3, [r4, #12]
 800bd34:	89a0      	ldrh	r0, [r4, #12]
 800bd36:	4305      	orrs	r5, r0
 800bd38:	81a5      	strh	r5, [r4, #12]
 800bd3a:	e7cd      	b.n	800bcd8 <__smakebuf_r+0x18>
 800bd3c:	08007f59 	.word	0x08007f59

0800bd40 <__ascii_mbtowc>:
 800bd40:	b082      	sub	sp, #8
 800bd42:	b901      	cbnz	r1, 800bd46 <__ascii_mbtowc+0x6>
 800bd44:	a901      	add	r1, sp, #4
 800bd46:	b142      	cbz	r2, 800bd5a <__ascii_mbtowc+0x1a>
 800bd48:	b14b      	cbz	r3, 800bd5e <__ascii_mbtowc+0x1e>
 800bd4a:	7813      	ldrb	r3, [r2, #0]
 800bd4c:	600b      	str	r3, [r1, #0]
 800bd4e:	7812      	ldrb	r2, [r2, #0]
 800bd50:	1e10      	subs	r0, r2, #0
 800bd52:	bf18      	it	ne
 800bd54:	2001      	movne	r0, #1
 800bd56:	b002      	add	sp, #8
 800bd58:	4770      	bx	lr
 800bd5a:	4610      	mov	r0, r2
 800bd5c:	e7fb      	b.n	800bd56 <__ascii_mbtowc+0x16>
 800bd5e:	f06f 0001 	mvn.w	r0, #1
 800bd62:	e7f8      	b.n	800bd56 <__ascii_mbtowc+0x16>

0800bd64 <__malloc_lock>:
 800bd64:	4801      	ldr	r0, [pc, #4]	; (800bd6c <__malloc_lock+0x8>)
 800bd66:	f7fc b9ef 	b.w	8008148 <__retarget_lock_acquire_recursive>
 800bd6a:	bf00      	nop
 800bd6c:	20005078 	.word	0x20005078

0800bd70 <__malloc_unlock>:
 800bd70:	4801      	ldr	r0, [pc, #4]	; (800bd78 <__malloc_unlock+0x8>)
 800bd72:	f7fc b9eb 	b.w	800814c <__retarget_lock_release_recursive>
 800bd76:	bf00      	nop
 800bd78:	20005078 	.word	0x20005078

0800bd7c <_Balloc>:
 800bd7c:	b570      	push	{r4, r5, r6, lr}
 800bd7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd80:	4604      	mov	r4, r0
 800bd82:	460d      	mov	r5, r1
 800bd84:	b976      	cbnz	r6, 800bda4 <_Balloc+0x28>
 800bd86:	2010      	movs	r0, #16
 800bd88:	f7fc f9e2 	bl	8008150 <malloc>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	6260      	str	r0, [r4, #36]	; 0x24
 800bd90:	b920      	cbnz	r0, 800bd9c <_Balloc+0x20>
 800bd92:	4b18      	ldr	r3, [pc, #96]	; (800bdf4 <_Balloc+0x78>)
 800bd94:	4818      	ldr	r0, [pc, #96]	; (800bdf8 <_Balloc+0x7c>)
 800bd96:	2166      	movs	r1, #102	; 0x66
 800bd98:	f001 fd3e 	bl	800d818 <__assert_func>
 800bd9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bda0:	6006      	str	r6, [r0, #0]
 800bda2:	60c6      	str	r6, [r0, #12]
 800bda4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bda6:	68f3      	ldr	r3, [r6, #12]
 800bda8:	b183      	cbz	r3, 800bdcc <_Balloc+0x50>
 800bdaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bdb2:	b9b8      	cbnz	r0, 800bde4 <_Balloc+0x68>
 800bdb4:	2101      	movs	r1, #1
 800bdb6:	fa01 f605 	lsl.w	r6, r1, r5
 800bdba:	1d72      	adds	r2, r6, #5
 800bdbc:	0092      	lsls	r2, r2, #2
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f000 fc97 	bl	800c6f2 <_calloc_r>
 800bdc4:	b160      	cbz	r0, 800bde0 <_Balloc+0x64>
 800bdc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bdca:	e00e      	b.n	800bdea <_Balloc+0x6e>
 800bdcc:	2221      	movs	r2, #33	; 0x21
 800bdce:	2104      	movs	r1, #4
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	f000 fc8e 	bl	800c6f2 <_calloc_r>
 800bdd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdd8:	60f0      	str	r0, [r6, #12]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d1e4      	bne.n	800bdaa <_Balloc+0x2e>
 800bde0:	2000      	movs	r0, #0
 800bde2:	bd70      	pop	{r4, r5, r6, pc}
 800bde4:	6802      	ldr	r2, [r0, #0]
 800bde6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bdea:	2300      	movs	r3, #0
 800bdec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bdf0:	e7f7      	b.n	800bde2 <_Balloc+0x66>
 800bdf2:	bf00      	nop
 800bdf4:	0800e36c 	.word	0x0800e36c
 800bdf8:	0800e383 	.word	0x0800e383

0800bdfc <_Bfree>:
 800bdfc:	b570      	push	{r4, r5, r6, lr}
 800bdfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be00:	4605      	mov	r5, r0
 800be02:	460c      	mov	r4, r1
 800be04:	b976      	cbnz	r6, 800be24 <_Bfree+0x28>
 800be06:	2010      	movs	r0, #16
 800be08:	f7fc f9a2 	bl	8008150 <malloc>
 800be0c:	4602      	mov	r2, r0
 800be0e:	6268      	str	r0, [r5, #36]	; 0x24
 800be10:	b920      	cbnz	r0, 800be1c <_Bfree+0x20>
 800be12:	4b09      	ldr	r3, [pc, #36]	; (800be38 <_Bfree+0x3c>)
 800be14:	4809      	ldr	r0, [pc, #36]	; (800be3c <_Bfree+0x40>)
 800be16:	218a      	movs	r1, #138	; 0x8a
 800be18:	f001 fcfe 	bl	800d818 <__assert_func>
 800be1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be20:	6006      	str	r6, [r0, #0]
 800be22:	60c6      	str	r6, [r0, #12]
 800be24:	b13c      	cbz	r4, 800be36 <_Bfree+0x3a>
 800be26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800be28:	6862      	ldr	r2, [r4, #4]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be30:	6021      	str	r1, [r4, #0]
 800be32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be36:	bd70      	pop	{r4, r5, r6, pc}
 800be38:	0800e36c 	.word	0x0800e36c
 800be3c:	0800e383 	.word	0x0800e383

0800be40 <__multadd>:
 800be40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be44:	690e      	ldr	r6, [r1, #16]
 800be46:	4607      	mov	r7, r0
 800be48:	4698      	mov	r8, r3
 800be4a:	460c      	mov	r4, r1
 800be4c:	f101 0014 	add.w	r0, r1, #20
 800be50:	2300      	movs	r3, #0
 800be52:	6805      	ldr	r5, [r0, #0]
 800be54:	b2a9      	uxth	r1, r5
 800be56:	fb02 8101 	mla	r1, r2, r1, r8
 800be5a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800be5e:	0c2d      	lsrs	r5, r5, #16
 800be60:	fb02 c505 	mla	r5, r2, r5, ip
 800be64:	b289      	uxth	r1, r1
 800be66:	3301      	adds	r3, #1
 800be68:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800be6c:	429e      	cmp	r6, r3
 800be6e:	f840 1b04 	str.w	r1, [r0], #4
 800be72:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800be76:	dcec      	bgt.n	800be52 <__multadd+0x12>
 800be78:	f1b8 0f00 	cmp.w	r8, #0
 800be7c:	d022      	beq.n	800bec4 <__multadd+0x84>
 800be7e:	68a3      	ldr	r3, [r4, #8]
 800be80:	42b3      	cmp	r3, r6
 800be82:	dc19      	bgt.n	800beb8 <__multadd+0x78>
 800be84:	6861      	ldr	r1, [r4, #4]
 800be86:	4638      	mov	r0, r7
 800be88:	3101      	adds	r1, #1
 800be8a:	f7ff ff77 	bl	800bd7c <_Balloc>
 800be8e:	4605      	mov	r5, r0
 800be90:	b928      	cbnz	r0, 800be9e <__multadd+0x5e>
 800be92:	4602      	mov	r2, r0
 800be94:	4b0d      	ldr	r3, [pc, #52]	; (800becc <__multadd+0x8c>)
 800be96:	480e      	ldr	r0, [pc, #56]	; (800bed0 <__multadd+0x90>)
 800be98:	21b5      	movs	r1, #181	; 0xb5
 800be9a:	f001 fcbd 	bl	800d818 <__assert_func>
 800be9e:	6922      	ldr	r2, [r4, #16]
 800bea0:	3202      	adds	r2, #2
 800bea2:	f104 010c 	add.w	r1, r4, #12
 800bea6:	0092      	lsls	r2, r2, #2
 800bea8:	300c      	adds	r0, #12
 800beaa:	f7fc f961 	bl	8008170 <memcpy>
 800beae:	4621      	mov	r1, r4
 800beb0:	4638      	mov	r0, r7
 800beb2:	f7ff ffa3 	bl	800bdfc <_Bfree>
 800beb6:	462c      	mov	r4, r5
 800beb8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bebc:	3601      	adds	r6, #1
 800bebe:	f8c3 8014 	str.w	r8, [r3, #20]
 800bec2:	6126      	str	r6, [r4, #16]
 800bec4:	4620      	mov	r0, r4
 800bec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beca:	bf00      	nop
 800becc:	0800e27c 	.word	0x0800e27c
 800bed0:	0800e383 	.word	0x0800e383

0800bed4 <__s2b>:
 800bed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bed8:	460c      	mov	r4, r1
 800beda:	4615      	mov	r5, r2
 800bedc:	461f      	mov	r7, r3
 800bede:	2209      	movs	r2, #9
 800bee0:	3308      	adds	r3, #8
 800bee2:	4606      	mov	r6, r0
 800bee4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bee8:	2100      	movs	r1, #0
 800beea:	2201      	movs	r2, #1
 800beec:	429a      	cmp	r2, r3
 800beee:	db09      	blt.n	800bf04 <__s2b+0x30>
 800bef0:	4630      	mov	r0, r6
 800bef2:	f7ff ff43 	bl	800bd7c <_Balloc>
 800bef6:	b940      	cbnz	r0, 800bf0a <__s2b+0x36>
 800bef8:	4602      	mov	r2, r0
 800befa:	4b19      	ldr	r3, [pc, #100]	; (800bf60 <__s2b+0x8c>)
 800befc:	4819      	ldr	r0, [pc, #100]	; (800bf64 <__s2b+0x90>)
 800befe:	21ce      	movs	r1, #206	; 0xce
 800bf00:	f001 fc8a 	bl	800d818 <__assert_func>
 800bf04:	0052      	lsls	r2, r2, #1
 800bf06:	3101      	adds	r1, #1
 800bf08:	e7f0      	b.n	800beec <__s2b+0x18>
 800bf0a:	9b08      	ldr	r3, [sp, #32]
 800bf0c:	6143      	str	r3, [r0, #20]
 800bf0e:	2d09      	cmp	r5, #9
 800bf10:	f04f 0301 	mov.w	r3, #1
 800bf14:	6103      	str	r3, [r0, #16]
 800bf16:	dd16      	ble.n	800bf46 <__s2b+0x72>
 800bf18:	f104 0909 	add.w	r9, r4, #9
 800bf1c:	46c8      	mov	r8, r9
 800bf1e:	442c      	add	r4, r5
 800bf20:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bf24:	4601      	mov	r1, r0
 800bf26:	3b30      	subs	r3, #48	; 0x30
 800bf28:	220a      	movs	r2, #10
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	f7ff ff88 	bl	800be40 <__multadd>
 800bf30:	45a0      	cmp	r8, r4
 800bf32:	d1f5      	bne.n	800bf20 <__s2b+0x4c>
 800bf34:	f1a5 0408 	sub.w	r4, r5, #8
 800bf38:	444c      	add	r4, r9
 800bf3a:	1b2d      	subs	r5, r5, r4
 800bf3c:	1963      	adds	r3, r4, r5
 800bf3e:	42bb      	cmp	r3, r7
 800bf40:	db04      	blt.n	800bf4c <__s2b+0x78>
 800bf42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf46:	340a      	adds	r4, #10
 800bf48:	2509      	movs	r5, #9
 800bf4a:	e7f6      	b.n	800bf3a <__s2b+0x66>
 800bf4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf50:	4601      	mov	r1, r0
 800bf52:	3b30      	subs	r3, #48	; 0x30
 800bf54:	220a      	movs	r2, #10
 800bf56:	4630      	mov	r0, r6
 800bf58:	f7ff ff72 	bl	800be40 <__multadd>
 800bf5c:	e7ee      	b.n	800bf3c <__s2b+0x68>
 800bf5e:	bf00      	nop
 800bf60:	0800e27c 	.word	0x0800e27c
 800bf64:	0800e383 	.word	0x0800e383

0800bf68 <__hi0bits>:
 800bf68:	0c03      	lsrs	r3, r0, #16
 800bf6a:	041b      	lsls	r3, r3, #16
 800bf6c:	b9d3      	cbnz	r3, 800bfa4 <__hi0bits+0x3c>
 800bf6e:	0400      	lsls	r0, r0, #16
 800bf70:	2310      	movs	r3, #16
 800bf72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf76:	bf04      	itt	eq
 800bf78:	0200      	lsleq	r0, r0, #8
 800bf7a:	3308      	addeq	r3, #8
 800bf7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf80:	bf04      	itt	eq
 800bf82:	0100      	lsleq	r0, r0, #4
 800bf84:	3304      	addeq	r3, #4
 800bf86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bf8a:	bf04      	itt	eq
 800bf8c:	0080      	lsleq	r0, r0, #2
 800bf8e:	3302      	addeq	r3, #2
 800bf90:	2800      	cmp	r0, #0
 800bf92:	db05      	blt.n	800bfa0 <__hi0bits+0x38>
 800bf94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bf98:	f103 0301 	add.w	r3, r3, #1
 800bf9c:	bf08      	it	eq
 800bf9e:	2320      	moveq	r3, #32
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	4770      	bx	lr
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	e7e4      	b.n	800bf72 <__hi0bits+0xa>

0800bfa8 <__lo0bits>:
 800bfa8:	6803      	ldr	r3, [r0, #0]
 800bfaa:	f013 0207 	ands.w	r2, r3, #7
 800bfae:	4601      	mov	r1, r0
 800bfb0:	d00b      	beq.n	800bfca <__lo0bits+0x22>
 800bfb2:	07da      	lsls	r2, r3, #31
 800bfb4:	d424      	bmi.n	800c000 <__lo0bits+0x58>
 800bfb6:	0798      	lsls	r0, r3, #30
 800bfb8:	bf49      	itett	mi
 800bfba:	085b      	lsrmi	r3, r3, #1
 800bfbc:	089b      	lsrpl	r3, r3, #2
 800bfbe:	2001      	movmi	r0, #1
 800bfc0:	600b      	strmi	r3, [r1, #0]
 800bfc2:	bf5c      	itt	pl
 800bfc4:	600b      	strpl	r3, [r1, #0]
 800bfc6:	2002      	movpl	r0, #2
 800bfc8:	4770      	bx	lr
 800bfca:	b298      	uxth	r0, r3
 800bfcc:	b9b0      	cbnz	r0, 800bffc <__lo0bits+0x54>
 800bfce:	0c1b      	lsrs	r3, r3, #16
 800bfd0:	2010      	movs	r0, #16
 800bfd2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bfd6:	bf04      	itt	eq
 800bfd8:	0a1b      	lsreq	r3, r3, #8
 800bfda:	3008      	addeq	r0, #8
 800bfdc:	071a      	lsls	r2, r3, #28
 800bfde:	bf04      	itt	eq
 800bfe0:	091b      	lsreq	r3, r3, #4
 800bfe2:	3004      	addeq	r0, #4
 800bfe4:	079a      	lsls	r2, r3, #30
 800bfe6:	bf04      	itt	eq
 800bfe8:	089b      	lsreq	r3, r3, #2
 800bfea:	3002      	addeq	r0, #2
 800bfec:	07da      	lsls	r2, r3, #31
 800bfee:	d403      	bmi.n	800bff8 <__lo0bits+0x50>
 800bff0:	085b      	lsrs	r3, r3, #1
 800bff2:	f100 0001 	add.w	r0, r0, #1
 800bff6:	d005      	beq.n	800c004 <__lo0bits+0x5c>
 800bff8:	600b      	str	r3, [r1, #0]
 800bffa:	4770      	bx	lr
 800bffc:	4610      	mov	r0, r2
 800bffe:	e7e8      	b.n	800bfd2 <__lo0bits+0x2a>
 800c000:	2000      	movs	r0, #0
 800c002:	4770      	bx	lr
 800c004:	2020      	movs	r0, #32
 800c006:	4770      	bx	lr

0800c008 <__i2b>:
 800c008:	b510      	push	{r4, lr}
 800c00a:	460c      	mov	r4, r1
 800c00c:	2101      	movs	r1, #1
 800c00e:	f7ff feb5 	bl	800bd7c <_Balloc>
 800c012:	4602      	mov	r2, r0
 800c014:	b928      	cbnz	r0, 800c022 <__i2b+0x1a>
 800c016:	4b05      	ldr	r3, [pc, #20]	; (800c02c <__i2b+0x24>)
 800c018:	4805      	ldr	r0, [pc, #20]	; (800c030 <__i2b+0x28>)
 800c01a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c01e:	f001 fbfb 	bl	800d818 <__assert_func>
 800c022:	2301      	movs	r3, #1
 800c024:	6144      	str	r4, [r0, #20]
 800c026:	6103      	str	r3, [r0, #16]
 800c028:	bd10      	pop	{r4, pc}
 800c02a:	bf00      	nop
 800c02c:	0800e27c 	.word	0x0800e27c
 800c030:	0800e383 	.word	0x0800e383

0800c034 <__multiply>:
 800c034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c038:	4614      	mov	r4, r2
 800c03a:	690a      	ldr	r2, [r1, #16]
 800c03c:	6923      	ldr	r3, [r4, #16]
 800c03e:	429a      	cmp	r2, r3
 800c040:	bfb8      	it	lt
 800c042:	460b      	movlt	r3, r1
 800c044:	460d      	mov	r5, r1
 800c046:	bfbc      	itt	lt
 800c048:	4625      	movlt	r5, r4
 800c04a:	461c      	movlt	r4, r3
 800c04c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c050:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c054:	68ab      	ldr	r3, [r5, #8]
 800c056:	6869      	ldr	r1, [r5, #4]
 800c058:	eb0a 0709 	add.w	r7, sl, r9
 800c05c:	42bb      	cmp	r3, r7
 800c05e:	b085      	sub	sp, #20
 800c060:	bfb8      	it	lt
 800c062:	3101      	addlt	r1, #1
 800c064:	f7ff fe8a 	bl	800bd7c <_Balloc>
 800c068:	b930      	cbnz	r0, 800c078 <__multiply+0x44>
 800c06a:	4602      	mov	r2, r0
 800c06c:	4b42      	ldr	r3, [pc, #264]	; (800c178 <__multiply+0x144>)
 800c06e:	4843      	ldr	r0, [pc, #268]	; (800c17c <__multiply+0x148>)
 800c070:	f240 115d 	movw	r1, #349	; 0x15d
 800c074:	f001 fbd0 	bl	800d818 <__assert_func>
 800c078:	f100 0614 	add.w	r6, r0, #20
 800c07c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c080:	4633      	mov	r3, r6
 800c082:	2200      	movs	r2, #0
 800c084:	4543      	cmp	r3, r8
 800c086:	d31e      	bcc.n	800c0c6 <__multiply+0x92>
 800c088:	f105 0c14 	add.w	ip, r5, #20
 800c08c:	f104 0314 	add.w	r3, r4, #20
 800c090:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c094:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c098:	9202      	str	r2, [sp, #8]
 800c09a:	ebac 0205 	sub.w	r2, ip, r5
 800c09e:	3a15      	subs	r2, #21
 800c0a0:	f022 0203 	bic.w	r2, r2, #3
 800c0a4:	3204      	adds	r2, #4
 800c0a6:	f105 0115 	add.w	r1, r5, #21
 800c0aa:	458c      	cmp	ip, r1
 800c0ac:	bf38      	it	cc
 800c0ae:	2204      	movcc	r2, #4
 800c0b0:	9201      	str	r2, [sp, #4]
 800c0b2:	9a02      	ldr	r2, [sp, #8]
 800c0b4:	9303      	str	r3, [sp, #12]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d808      	bhi.n	800c0cc <__multiply+0x98>
 800c0ba:	2f00      	cmp	r7, #0
 800c0bc:	dc55      	bgt.n	800c16a <__multiply+0x136>
 800c0be:	6107      	str	r7, [r0, #16]
 800c0c0:	b005      	add	sp, #20
 800c0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0c6:	f843 2b04 	str.w	r2, [r3], #4
 800c0ca:	e7db      	b.n	800c084 <__multiply+0x50>
 800c0cc:	f8b3 a000 	ldrh.w	sl, [r3]
 800c0d0:	f1ba 0f00 	cmp.w	sl, #0
 800c0d4:	d020      	beq.n	800c118 <__multiply+0xe4>
 800c0d6:	f105 0e14 	add.w	lr, r5, #20
 800c0da:	46b1      	mov	r9, r6
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c0e2:	f8d9 b000 	ldr.w	fp, [r9]
 800c0e6:	b2a1      	uxth	r1, r4
 800c0e8:	fa1f fb8b 	uxth.w	fp, fp
 800c0ec:	fb0a b101 	mla	r1, sl, r1, fp
 800c0f0:	4411      	add	r1, r2
 800c0f2:	f8d9 2000 	ldr.w	r2, [r9]
 800c0f6:	0c24      	lsrs	r4, r4, #16
 800c0f8:	0c12      	lsrs	r2, r2, #16
 800c0fa:	fb0a 2404 	mla	r4, sl, r4, r2
 800c0fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c102:	b289      	uxth	r1, r1
 800c104:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c108:	45f4      	cmp	ip, lr
 800c10a:	f849 1b04 	str.w	r1, [r9], #4
 800c10e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c112:	d8e4      	bhi.n	800c0de <__multiply+0xaa>
 800c114:	9901      	ldr	r1, [sp, #4]
 800c116:	5072      	str	r2, [r6, r1]
 800c118:	9a03      	ldr	r2, [sp, #12]
 800c11a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c11e:	3304      	adds	r3, #4
 800c120:	f1b9 0f00 	cmp.w	r9, #0
 800c124:	d01f      	beq.n	800c166 <__multiply+0x132>
 800c126:	6834      	ldr	r4, [r6, #0]
 800c128:	f105 0114 	add.w	r1, r5, #20
 800c12c:	46b6      	mov	lr, r6
 800c12e:	f04f 0a00 	mov.w	sl, #0
 800c132:	880a      	ldrh	r2, [r1, #0]
 800c134:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c138:	fb09 b202 	mla	r2, r9, r2, fp
 800c13c:	4492      	add	sl, r2
 800c13e:	b2a4      	uxth	r4, r4
 800c140:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c144:	f84e 4b04 	str.w	r4, [lr], #4
 800c148:	f851 4b04 	ldr.w	r4, [r1], #4
 800c14c:	f8be 2000 	ldrh.w	r2, [lr]
 800c150:	0c24      	lsrs	r4, r4, #16
 800c152:	fb09 2404 	mla	r4, r9, r4, r2
 800c156:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c15a:	458c      	cmp	ip, r1
 800c15c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c160:	d8e7      	bhi.n	800c132 <__multiply+0xfe>
 800c162:	9a01      	ldr	r2, [sp, #4]
 800c164:	50b4      	str	r4, [r6, r2]
 800c166:	3604      	adds	r6, #4
 800c168:	e7a3      	b.n	800c0b2 <__multiply+0x7e>
 800c16a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1a5      	bne.n	800c0be <__multiply+0x8a>
 800c172:	3f01      	subs	r7, #1
 800c174:	e7a1      	b.n	800c0ba <__multiply+0x86>
 800c176:	bf00      	nop
 800c178:	0800e27c 	.word	0x0800e27c
 800c17c:	0800e383 	.word	0x0800e383

0800c180 <__pow5mult>:
 800c180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c184:	4615      	mov	r5, r2
 800c186:	f012 0203 	ands.w	r2, r2, #3
 800c18a:	4606      	mov	r6, r0
 800c18c:	460f      	mov	r7, r1
 800c18e:	d007      	beq.n	800c1a0 <__pow5mult+0x20>
 800c190:	4c25      	ldr	r4, [pc, #148]	; (800c228 <__pow5mult+0xa8>)
 800c192:	3a01      	subs	r2, #1
 800c194:	2300      	movs	r3, #0
 800c196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c19a:	f7ff fe51 	bl	800be40 <__multadd>
 800c19e:	4607      	mov	r7, r0
 800c1a0:	10ad      	asrs	r5, r5, #2
 800c1a2:	d03d      	beq.n	800c220 <__pow5mult+0xa0>
 800c1a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c1a6:	b97c      	cbnz	r4, 800c1c8 <__pow5mult+0x48>
 800c1a8:	2010      	movs	r0, #16
 800c1aa:	f7fb ffd1 	bl	8008150 <malloc>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	6270      	str	r0, [r6, #36]	; 0x24
 800c1b2:	b928      	cbnz	r0, 800c1c0 <__pow5mult+0x40>
 800c1b4:	4b1d      	ldr	r3, [pc, #116]	; (800c22c <__pow5mult+0xac>)
 800c1b6:	481e      	ldr	r0, [pc, #120]	; (800c230 <__pow5mult+0xb0>)
 800c1b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c1bc:	f001 fb2c 	bl	800d818 <__assert_func>
 800c1c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1c4:	6004      	str	r4, [r0, #0]
 800c1c6:	60c4      	str	r4, [r0, #12]
 800c1c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c1cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1d0:	b94c      	cbnz	r4, 800c1e6 <__pow5mult+0x66>
 800c1d2:	f240 2171 	movw	r1, #625	; 0x271
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	f7ff ff16 	bl	800c008 <__i2b>
 800c1dc:	2300      	movs	r3, #0
 800c1de:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	6003      	str	r3, [r0, #0]
 800c1e6:	f04f 0900 	mov.w	r9, #0
 800c1ea:	07eb      	lsls	r3, r5, #31
 800c1ec:	d50a      	bpl.n	800c204 <__pow5mult+0x84>
 800c1ee:	4639      	mov	r1, r7
 800c1f0:	4622      	mov	r2, r4
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	f7ff ff1e 	bl	800c034 <__multiply>
 800c1f8:	4639      	mov	r1, r7
 800c1fa:	4680      	mov	r8, r0
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	f7ff fdfd 	bl	800bdfc <_Bfree>
 800c202:	4647      	mov	r7, r8
 800c204:	106d      	asrs	r5, r5, #1
 800c206:	d00b      	beq.n	800c220 <__pow5mult+0xa0>
 800c208:	6820      	ldr	r0, [r4, #0]
 800c20a:	b938      	cbnz	r0, 800c21c <__pow5mult+0x9c>
 800c20c:	4622      	mov	r2, r4
 800c20e:	4621      	mov	r1, r4
 800c210:	4630      	mov	r0, r6
 800c212:	f7ff ff0f 	bl	800c034 <__multiply>
 800c216:	6020      	str	r0, [r4, #0]
 800c218:	f8c0 9000 	str.w	r9, [r0]
 800c21c:	4604      	mov	r4, r0
 800c21e:	e7e4      	b.n	800c1ea <__pow5mult+0x6a>
 800c220:	4638      	mov	r0, r7
 800c222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c226:	bf00      	nop
 800c228:	0800e4d8 	.word	0x0800e4d8
 800c22c:	0800e36c 	.word	0x0800e36c
 800c230:	0800e383 	.word	0x0800e383

0800c234 <__lshift>:
 800c234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c238:	460c      	mov	r4, r1
 800c23a:	6849      	ldr	r1, [r1, #4]
 800c23c:	6923      	ldr	r3, [r4, #16]
 800c23e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c242:	68a3      	ldr	r3, [r4, #8]
 800c244:	4607      	mov	r7, r0
 800c246:	4691      	mov	r9, r2
 800c248:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c24c:	f108 0601 	add.w	r6, r8, #1
 800c250:	42b3      	cmp	r3, r6
 800c252:	db0b      	blt.n	800c26c <__lshift+0x38>
 800c254:	4638      	mov	r0, r7
 800c256:	f7ff fd91 	bl	800bd7c <_Balloc>
 800c25a:	4605      	mov	r5, r0
 800c25c:	b948      	cbnz	r0, 800c272 <__lshift+0x3e>
 800c25e:	4602      	mov	r2, r0
 800c260:	4b28      	ldr	r3, [pc, #160]	; (800c304 <__lshift+0xd0>)
 800c262:	4829      	ldr	r0, [pc, #164]	; (800c308 <__lshift+0xd4>)
 800c264:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c268:	f001 fad6 	bl	800d818 <__assert_func>
 800c26c:	3101      	adds	r1, #1
 800c26e:	005b      	lsls	r3, r3, #1
 800c270:	e7ee      	b.n	800c250 <__lshift+0x1c>
 800c272:	2300      	movs	r3, #0
 800c274:	f100 0114 	add.w	r1, r0, #20
 800c278:	f100 0210 	add.w	r2, r0, #16
 800c27c:	4618      	mov	r0, r3
 800c27e:	4553      	cmp	r3, sl
 800c280:	db33      	blt.n	800c2ea <__lshift+0xb6>
 800c282:	6920      	ldr	r0, [r4, #16]
 800c284:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c288:	f104 0314 	add.w	r3, r4, #20
 800c28c:	f019 091f 	ands.w	r9, r9, #31
 800c290:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c294:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c298:	d02b      	beq.n	800c2f2 <__lshift+0xbe>
 800c29a:	f1c9 0e20 	rsb	lr, r9, #32
 800c29e:	468a      	mov	sl, r1
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	6818      	ldr	r0, [r3, #0]
 800c2a4:	fa00 f009 	lsl.w	r0, r0, r9
 800c2a8:	4302      	orrs	r2, r0
 800c2aa:	f84a 2b04 	str.w	r2, [sl], #4
 800c2ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2b2:	459c      	cmp	ip, r3
 800c2b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c2b8:	d8f3      	bhi.n	800c2a2 <__lshift+0x6e>
 800c2ba:	ebac 0304 	sub.w	r3, ip, r4
 800c2be:	3b15      	subs	r3, #21
 800c2c0:	f023 0303 	bic.w	r3, r3, #3
 800c2c4:	3304      	adds	r3, #4
 800c2c6:	f104 0015 	add.w	r0, r4, #21
 800c2ca:	4584      	cmp	ip, r0
 800c2cc:	bf38      	it	cc
 800c2ce:	2304      	movcc	r3, #4
 800c2d0:	50ca      	str	r2, [r1, r3]
 800c2d2:	b10a      	cbz	r2, 800c2d8 <__lshift+0xa4>
 800c2d4:	f108 0602 	add.w	r6, r8, #2
 800c2d8:	3e01      	subs	r6, #1
 800c2da:	4638      	mov	r0, r7
 800c2dc:	612e      	str	r6, [r5, #16]
 800c2de:	4621      	mov	r1, r4
 800c2e0:	f7ff fd8c 	bl	800bdfc <_Bfree>
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	e7c5      	b.n	800c27e <__lshift+0x4a>
 800c2f2:	3904      	subs	r1, #4
 800c2f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c2fc:	459c      	cmp	ip, r3
 800c2fe:	d8f9      	bhi.n	800c2f4 <__lshift+0xc0>
 800c300:	e7ea      	b.n	800c2d8 <__lshift+0xa4>
 800c302:	bf00      	nop
 800c304:	0800e27c 	.word	0x0800e27c
 800c308:	0800e383 	.word	0x0800e383

0800c30c <__mcmp>:
 800c30c:	b530      	push	{r4, r5, lr}
 800c30e:	6902      	ldr	r2, [r0, #16]
 800c310:	690c      	ldr	r4, [r1, #16]
 800c312:	1b12      	subs	r2, r2, r4
 800c314:	d10e      	bne.n	800c334 <__mcmp+0x28>
 800c316:	f100 0314 	add.w	r3, r0, #20
 800c31a:	3114      	adds	r1, #20
 800c31c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c320:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c324:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c328:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c32c:	42a5      	cmp	r5, r4
 800c32e:	d003      	beq.n	800c338 <__mcmp+0x2c>
 800c330:	d305      	bcc.n	800c33e <__mcmp+0x32>
 800c332:	2201      	movs	r2, #1
 800c334:	4610      	mov	r0, r2
 800c336:	bd30      	pop	{r4, r5, pc}
 800c338:	4283      	cmp	r3, r0
 800c33a:	d3f3      	bcc.n	800c324 <__mcmp+0x18>
 800c33c:	e7fa      	b.n	800c334 <__mcmp+0x28>
 800c33e:	f04f 32ff 	mov.w	r2, #4294967295
 800c342:	e7f7      	b.n	800c334 <__mcmp+0x28>

0800c344 <__mdiff>:
 800c344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c348:	460c      	mov	r4, r1
 800c34a:	4606      	mov	r6, r0
 800c34c:	4611      	mov	r1, r2
 800c34e:	4620      	mov	r0, r4
 800c350:	4617      	mov	r7, r2
 800c352:	f7ff ffdb 	bl	800c30c <__mcmp>
 800c356:	1e05      	subs	r5, r0, #0
 800c358:	d110      	bne.n	800c37c <__mdiff+0x38>
 800c35a:	4629      	mov	r1, r5
 800c35c:	4630      	mov	r0, r6
 800c35e:	f7ff fd0d 	bl	800bd7c <_Balloc>
 800c362:	b930      	cbnz	r0, 800c372 <__mdiff+0x2e>
 800c364:	4b39      	ldr	r3, [pc, #228]	; (800c44c <__mdiff+0x108>)
 800c366:	4602      	mov	r2, r0
 800c368:	f240 2132 	movw	r1, #562	; 0x232
 800c36c:	4838      	ldr	r0, [pc, #224]	; (800c450 <__mdiff+0x10c>)
 800c36e:	f001 fa53 	bl	800d818 <__assert_func>
 800c372:	2301      	movs	r3, #1
 800c374:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c37c:	bfa4      	itt	ge
 800c37e:	463b      	movge	r3, r7
 800c380:	4627      	movge	r7, r4
 800c382:	4630      	mov	r0, r6
 800c384:	6879      	ldr	r1, [r7, #4]
 800c386:	bfa6      	itte	ge
 800c388:	461c      	movge	r4, r3
 800c38a:	2500      	movge	r5, #0
 800c38c:	2501      	movlt	r5, #1
 800c38e:	f7ff fcf5 	bl	800bd7c <_Balloc>
 800c392:	b920      	cbnz	r0, 800c39e <__mdiff+0x5a>
 800c394:	4b2d      	ldr	r3, [pc, #180]	; (800c44c <__mdiff+0x108>)
 800c396:	4602      	mov	r2, r0
 800c398:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c39c:	e7e6      	b.n	800c36c <__mdiff+0x28>
 800c39e:	693e      	ldr	r6, [r7, #16]
 800c3a0:	60c5      	str	r5, [r0, #12]
 800c3a2:	6925      	ldr	r5, [r4, #16]
 800c3a4:	f107 0114 	add.w	r1, r7, #20
 800c3a8:	f104 0914 	add.w	r9, r4, #20
 800c3ac:	f100 0e14 	add.w	lr, r0, #20
 800c3b0:	f107 0210 	add.w	r2, r7, #16
 800c3b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c3b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c3bc:	46f2      	mov	sl, lr
 800c3be:	2700      	movs	r7, #0
 800c3c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c3c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c3c8:	fa1f f883 	uxth.w	r8, r3
 800c3cc:	fa17 f78b 	uxtah	r7, r7, fp
 800c3d0:	0c1b      	lsrs	r3, r3, #16
 800c3d2:	eba7 0808 	sub.w	r8, r7, r8
 800c3d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c3da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c3de:	fa1f f888 	uxth.w	r8, r8
 800c3e2:	141f      	asrs	r7, r3, #16
 800c3e4:	454d      	cmp	r5, r9
 800c3e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c3ea:	f84a 3b04 	str.w	r3, [sl], #4
 800c3ee:	d8e7      	bhi.n	800c3c0 <__mdiff+0x7c>
 800c3f0:	1b2b      	subs	r3, r5, r4
 800c3f2:	3b15      	subs	r3, #21
 800c3f4:	f023 0303 	bic.w	r3, r3, #3
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	3415      	adds	r4, #21
 800c3fc:	42a5      	cmp	r5, r4
 800c3fe:	bf38      	it	cc
 800c400:	2304      	movcc	r3, #4
 800c402:	4419      	add	r1, r3
 800c404:	4473      	add	r3, lr
 800c406:	469e      	mov	lr, r3
 800c408:	460d      	mov	r5, r1
 800c40a:	4565      	cmp	r5, ip
 800c40c:	d30e      	bcc.n	800c42c <__mdiff+0xe8>
 800c40e:	f10c 0203 	add.w	r2, ip, #3
 800c412:	1a52      	subs	r2, r2, r1
 800c414:	f022 0203 	bic.w	r2, r2, #3
 800c418:	3903      	subs	r1, #3
 800c41a:	458c      	cmp	ip, r1
 800c41c:	bf38      	it	cc
 800c41e:	2200      	movcc	r2, #0
 800c420:	441a      	add	r2, r3
 800c422:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c426:	b17b      	cbz	r3, 800c448 <__mdiff+0x104>
 800c428:	6106      	str	r6, [r0, #16]
 800c42a:	e7a5      	b.n	800c378 <__mdiff+0x34>
 800c42c:	f855 8b04 	ldr.w	r8, [r5], #4
 800c430:	fa17 f488 	uxtah	r4, r7, r8
 800c434:	1422      	asrs	r2, r4, #16
 800c436:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c43a:	b2a4      	uxth	r4, r4
 800c43c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c440:	f84e 4b04 	str.w	r4, [lr], #4
 800c444:	1417      	asrs	r7, r2, #16
 800c446:	e7e0      	b.n	800c40a <__mdiff+0xc6>
 800c448:	3e01      	subs	r6, #1
 800c44a:	e7ea      	b.n	800c422 <__mdiff+0xde>
 800c44c:	0800e27c 	.word	0x0800e27c
 800c450:	0800e383 	.word	0x0800e383

0800c454 <__ulp>:
 800c454:	b082      	sub	sp, #8
 800c456:	ed8d 0b00 	vstr	d0, [sp]
 800c45a:	9b01      	ldr	r3, [sp, #4]
 800c45c:	4912      	ldr	r1, [pc, #72]	; (800c4a8 <__ulp+0x54>)
 800c45e:	4019      	ands	r1, r3
 800c460:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c464:	2900      	cmp	r1, #0
 800c466:	dd05      	ble.n	800c474 <__ulp+0x20>
 800c468:	2200      	movs	r2, #0
 800c46a:	460b      	mov	r3, r1
 800c46c:	ec43 2b10 	vmov	d0, r2, r3
 800c470:	b002      	add	sp, #8
 800c472:	4770      	bx	lr
 800c474:	4249      	negs	r1, r1
 800c476:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c47a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c47e:	f04f 0200 	mov.w	r2, #0
 800c482:	f04f 0300 	mov.w	r3, #0
 800c486:	da04      	bge.n	800c492 <__ulp+0x3e>
 800c488:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c48c:	fa41 f300 	asr.w	r3, r1, r0
 800c490:	e7ec      	b.n	800c46c <__ulp+0x18>
 800c492:	f1a0 0114 	sub.w	r1, r0, #20
 800c496:	291e      	cmp	r1, #30
 800c498:	bfda      	itte	le
 800c49a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c49e:	fa20 f101 	lsrle.w	r1, r0, r1
 800c4a2:	2101      	movgt	r1, #1
 800c4a4:	460a      	mov	r2, r1
 800c4a6:	e7e1      	b.n	800c46c <__ulp+0x18>
 800c4a8:	7ff00000 	.word	0x7ff00000

0800c4ac <__b2d>:
 800c4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ae:	6905      	ldr	r5, [r0, #16]
 800c4b0:	f100 0714 	add.w	r7, r0, #20
 800c4b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c4b8:	1f2e      	subs	r6, r5, #4
 800c4ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c4be:	4620      	mov	r0, r4
 800c4c0:	f7ff fd52 	bl	800bf68 <__hi0bits>
 800c4c4:	f1c0 0320 	rsb	r3, r0, #32
 800c4c8:	280a      	cmp	r0, #10
 800c4ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c548 <__b2d+0x9c>
 800c4ce:	600b      	str	r3, [r1, #0]
 800c4d0:	dc14      	bgt.n	800c4fc <__b2d+0x50>
 800c4d2:	f1c0 0e0b 	rsb	lr, r0, #11
 800c4d6:	fa24 f10e 	lsr.w	r1, r4, lr
 800c4da:	42b7      	cmp	r7, r6
 800c4dc:	ea41 030c 	orr.w	r3, r1, ip
 800c4e0:	bf34      	ite	cc
 800c4e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c4e6:	2100      	movcs	r1, #0
 800c4e8:	3015      	adds	r0, #21
 800c4ea:	fa04 f000 	lsl.w	r0, r4, r0
 800c4ee:	fa21 f10e 	lsr.w	r1, r1, lr
 800c4f2:	ea40 0201 	orr.w	r2, r0, r1
 800c4f6:	ec43 2b10 	vmov	d0, r2, r3
 800c4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4fc:	42b7      	cmp	r7, r6
 800c4fe:	bf3a      	itte	cc
 800c500:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c504:	f1a5 0608 	subcc.w	r6, r5, #8
 800c508:	2100      	movcs	r1, #0
 800c50a:	380b      	subs	r0, #11
 800c50c:	d017      	beq.n	800c53e <__b2d+0x92>
 800c50e:	f1c0 0c20 	rsb	ip, r0, #32
 800c512:	fa04 f500 	lsl.w	r5, r4, r0
 800c516:	42be      	cmp	r6, r7
 800c518:	fa21 f40c 	lsr.w	r4, r1, ip
 800c51c:	ea45 0504 	orr.w	r5, r5, r4
 800c520:	bf8c      	ite	hi
 800c522:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c526:	2400      	movls	r4, #0
 800c528:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c52c:	fa01 f000 	lsl.w	r0, r1, r0
 800c530:	fa24 f40c 	lsr.w	r4, r4, ip
 800c534:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c538:	ea40 0204 	orr.w	r2, r0, r4
 800c53c:	e7db      	b.n	800c4f6 <__b2d+0x4a>
 800c53e:	ea44 030c 	orr.w	r3, r4, ip
 800c542:	460a      	mov	r2, r1
 800c544:	e7d7      	b.n	800c4f6 <__b2d+0x4a>
 800c546:	bf00      	nop
 800c548:	3ff00000 	.word	0x3ff00000

0800c54c <__d2b>:
 800c54c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c550:	4689      	mov	r9, r1
 800c552:	2101      	movs	r1, #1
 800c554:	ec57 6b10 	vmov	r6, r7, d0
 800c558:	4690      	mov	r8, r2
 800c55a:	f7ff fc0f 	bl	800bd7c <_Balloc>
 800c55e:	4604      	mov	r4, r0
 800c560:	b930      	cbnz	r0, 800c570 <__d2b+0x24>
 800c562:	4602      	mov	r2, r0
 800c564:	4b25      	ldr	r3, [pc, #148]	; (800c5fc <__d2b+0xb0>)
 800c566:	4826      	ldr	r0, [pc, #152]	; (800c600 <__d2b+0xb4>)
 800c568:	f240 310a 	movw	r1, #778	; 0x30a
 800c56c:	f001 f954 	bl	800d818 <__assert_func>
 800c570:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c574:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c578:	bb35      	cbnz	r5, 800c5c8 <__d2b+0x7c>
 800c57a:	2e00      	cmp	r6, #0
 800c57c:	9301      	str	r3, [sp, #4]
 800c57e:	d028      	beq.n	800c5d2 <__d2b+0x86>
 800c580:	4668      	mov	r0, sp
 800c582:	9600      	str	r6, [sp, #0]
 800c584:	f7ff fd10 	bl	800bfa8 <__lo0bits>
 800c588:	9900      	ldr	r1, [sp, #0]
 800c58a:	b300      	cbz	r0, 800c5ce <__d2b+0x82>
 800c58c:	9a01      	ldr	r2, [sp, #4]
 800c58e:	f1c0 0320 	rsb	r3, r0, #32
 800c592:	fa02 f303 	lsl.w	r3, r2, r3
 800c596:	430b      	orrs	r3, r1
 800c598:	40c2      	lsrs	r2, r0
 800c59a:	6163      	str	r3, [r4, #20]
 800c59c:	9201      	str	r2, [sp, #4]
 800c59e:	9b01      	ldr	r3, [sp, #4]
 800c5a0:	61a3      	str	r3, [r4, #24]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	bf14      	ite	ne
 800c5a6:	2202      	movne	r2, #2
 800c5a8:	2201      	moveq	r2, #1
 800c5aa:	6122      	str	r2, [r4, #16]
 800c5ac:	b1d5      	cbz	r5, 800c5e4 <__d2b+0x98>
 800c5ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c5b2:	4405      	add	r5, r0
 800c5b4:	f8c9 5000 	str.w	r5, [r9]
 800c5b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5bc:	f8c8 0000 	str.w	r0, [r8]
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	b003      	add	sp, #12
 800c5c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5cc:	e7d5      	b.n	800c57a <__d2b+0x2e>
 800c5ce:	6161      	str	r1, [r4, #20]
 800c5d0:	e7e5      	b.n	800c59e <__d2b+0x52>
 800c5d2:	a801      	add	r0, sp, #4
 800c5d4:	f7ff fce8 	bl	800bfa8 <__lo0bits>
 800c5d8:	9b01      	ldr	r3, [sp, #4]
 800c5da:	6163      	str	r3, [r4, #20]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	6122      	str	r2, [r4, #16]
 800c5e0:	3020      	adds	r0, #32
 800c5e2:	e7e3      	b.n	800c5ac <__d2b+0x60>
 800c5e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c5ec:	f8c9 0000 	str.w	r0, [r9]
 800c5f0:	6918      	ldr	r0, [r3, #16]
 800c5f2:	f7ff fcb9 	bl	800bf68 <__hi0bits>
 800c5f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5fa:	e7df      	b.n	800c5bc <__d2b+0x70>
 800c5fc:	0800e27c 	.word	0x0800e27c
 800c600:	0800e383 	.word	0x0800e383

0800c604 <__ratio>:
 800c604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c608:	4688      	mov	r8, r1
 800c60a:	4669      	mov	r1, sp
 800c60c:	4681      	mov	r9, r0
 800c60e:	f7ff ff4d 	bl	800c4ac <__b2d>
 800c612:	a901      	add	r1, sp, #4
 800c614:	4640      	mov	r0, r8
 800c616:	ec55 4b10 	vmov	r4, r5, d0
 800c61a:	f7ff ff47 	bl	800c4ac <__b2d>
 800c61e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c622:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c626:	eba3 0c02 	sub.w	ip, r3, r2
 800c62a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c62e:	1a9b      	subs	r3, r3, r2
 800c630:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c634:	ec51 0b10 	vmov	r0, r1, d0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	bfd6      	itet	le
 800c63c:	460a      	movle	r2, r1
 800c63e:	462a      	movgt	r2, r5
 800c640:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c644:	468b      	mov	fp, r1
 800c646:	462f      	mov	r7, r5
 800c648:	bfd4      	ite	le
 800c64a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c64e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c652:	4620      	mov	r0, r4
 800c654:	ee10 2a10 	vmov	r2, s0
 800c658:	465b      	mov	r3, fp
 800c65a:	4639      	mov	r1, r7
 800c65c:	f7f4 f90e 	bl	800087c <__aeabi_ddiv>
 800c660:	ec41 0b10 	vmov	d0, r0, r1
 800c664:	b003      	add	sp, #12
 800c666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c66a <__copybits>:
 800c66a:	3901      	subs	r1, #1
 800c66c:	b570      	push	{r4, r5, r6, lr}
 800c66e:	1149      	asrs	r1, r1, #5
 800c670:	6914      	ldr	r4, [r2, #16]
 800c672:	3101      	adds	r1, #1
 800c674:	f102 0314 	add.w	r3, r2, #20
 800c678:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c67c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c680:	1f05      	subs	r5, r0, #4
 800c682:	42a3      	cmp	r3, r4
 800c684:	d30c      	bcc.n	800c6a0 <__copybits+0x36>
 800c686:	1aa3      	subs	r3, r4, r2
 800c688:	3b11      	subs	r3, #17
 800c68a:	f023 0303 	bic.w	r3, r3, #3
 800c68e:	3211      	adds	r2, #17
 800c690:	42a2      	cmp	r2, r4
 800c692:	bf88      	it	hi
 800c694:	2300      	movhi	r3, #0
 800c696:	4418      	add	r0, r3
 800c698:	2300      	movs	r3, #0
 800c69a:	4288      	cmp	r0, r1
 800c69c:	d305      	bcc.n	800c6aa <__copybits+0x40>
 800c69e:	bd70      	pop	{r4, r5, r6, pc}
 800c6a0:	f853 6b04 	ldr.w	r6, [r3], #4
 800c6a4:	f845 6f04 	str.w	r6, [r5, #4]!
 800c6a8:	e7eb      	b.n	800c682 <__copybits+0x18>
 800c6aa:	f840 3b04 	str.w	r3, [r0], #4
 800c6ae:	e7f4      	b.n	800c69a <__copybits+0x30>

0800c6b0 <__any_on>:
 800c6b0:	f100 0214 	add.w	r2, r0, #20
 800c6b4:	6900      	ldr	r0, [r0, #16]
 800c6b6:	114b      	asrs	r3, r1, #5
 800c6b8:	4298      	cmp	r0, r3
 800c6ba:	b510      	push	{r4, lr}
 800c6bc:	db11      	blt.n	800c6e2 <__any_on+0x32>
 800c6be:	dd0a      	ble.n	800c6d6 <__any_on+0x26>
 800c6c0:	f011 011f 	ands.w	r1, r1, #31
 800c6c4:	d007      	beq.n	800c6d6 <__any_on+0x26>
 800c6c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c6ca:	fa24 f001 	lsr.w	r0, r4, r1
 800c6ce:	fa00 f101 	lsl.w	r1, r0, r1
 800c6d2:	428c      	cmp	r4, r1
 800c6d4:	d10b      	bne.n	800c6ee <__any_on+0x3e>
 800c6d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d803      	bhi.n	800c6e6 <__any_on+0x36>
 800c6de:	2000      	movs	r0, #0
 800c6e0:	bd10      	pop	{r4, pc}
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	e7f7      	b.n	800c6d6 <__any_on+0x26>
 800c6e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c6ea:	2900      	cmp	r1, #0
 800c6ec:	d0f5      	beq.n	800c6da <__any_on+0x2a>
 800c6ee:	2001      	movs	r0, #1
 800c6f0:	e7f6      	b.n	800c6e0 <__any_on+0x30>

0800c6f2 <_calloc_r>:
 800c6f2:	b513      	push	{r0, r1, r4, lr}
 800c6f4:	434a      	muls	r2, r1
 800c6f6:	4611      	mov	r1, r2
 800c6f8:	9201      	str	r2, [sp, #4]
 800c6fa:	f7fc f81d 	bl	8008738 <_malloc_r>
 800c6fe:	4604      	mov	r4, r0
 800c700:	b118      	cbz	r0, 800c70a <_calloc_r+0x18>
 800c702:	9a01      	ldr	r2, [sp, #4]
 800c704:	2100      	movs	r1, #0
 800c706:	f7fb fd41 	bl	800818c <memset>
 800c70a:	4620      	mov	r0, r4
 800c70c:	b002      	add	sp, #8
 800c70e:	bd10      	pop	{r4, pc}

0800c710 <_realloc_r>:
 800c710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c712:	4607      	mov	r7, r0
 800c714:	4614      	mov	r4, r2
 800c716:	460e      	mov	r6, r1
 800c718:	b921      	cbnz	r1, 800c724 <_realloc_r+0x14>
 800c71a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c71e:	4611      	mov	r1, r2
 800c720:	f7fc b80a 	b.w	8008738 <_malloc_r>
 800c724:	b922      	cbnz	r2, 800c730 <_realloc_r+0x20>
 800c726:	f7fb ffb7 	bl	8008698 <_free_r>
 800c72a:	4625      	mov	r5, r4
 800c72c:	4628      	mov	r0, r5
 800c72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c730:	f001 f99a 	bl	800da68 <_malloc_usable_size_r>
 800c734:	42a0      	cmp	r0, r4
 800c736:	d20f      	bcs.n	800c758 <_realloc_r+0x48>
 800c738:	4621      	mov	r1, r4
 800c73a:	4638      	mov	r0, r7
 800c73c:	f7fb fffc 	bl	8008738 <_malloc_r>
 800c740:	4605      	mov	r5, r0
 800c742:	2800      	cmp	r0, #0
 800c744:	d0f2      	beq.n	800c72c <_realloc_r+0x1c>
 800c746:	4631      	mov	r1, r6
 800c748:	4622      	mov	r2, r4
 800c74a:	f7fb fd11 	bl	8008170 <memcpy>
 800c74e:	4631      	mov	r1, r6
 800c750:	4638      	mov	r0, r7
 800c752:	f7fb ffa1 	bl	8008698 <_free_r>
 800c756:	e7e9      	b.n	800c72c <_realloc_r+0x1c>
 800c758:	4635      	mov	r5, r6
 800c75a:	e7e7      	b.n	800c72c <_realloc_r+0x1c>

0800c75c <__ssputs_r>:
 800c75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c760:	688e      	ldr	r6, [r1, #8]
 800c762:	429e      	cmp	r6, r3
 800c764:	4682      	mov	sl, r0
 800c766:	460c      	mov	r4, r1
 800c768:	4690      	mov	r8, r2
 800c76a:	461f      	mov	r7, r3
 800c76c:	d838      	bhi.n	800c7e0 <__ssputs_r+0x84>
 800c76e:	898a      	ldrh	r2, [r1, #12]
 800c770:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c774:	d032      	beq.n	800c7dc <__ssputs_r+0x80>
 800c776:	6825      	ldr	r5, [r4, #0]
 800c778:	6909      	ldr	r1, [r1, #16]
 800c77a:	eba5 0901 	sub.w	r9, r5, r1
 800c77e:	6965      	ldr	r5, [r4, #20]
 800c780:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c784:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c788:	3301      	adds	r3, #1
 800c78a:	444b      	add	r3, r9
 800c78c:	106d      	asrs	r5, r5, #1
 800c78e:	429d      	cmp	r5, r3
 800c790:	bf38      	it	cc
 800c792:	461d      	movcc	r5, r3
 800c794:	0553      	lsls	r3, r2, #21
 800c796:	d531      	bpl.n	800c7fc <__ssputs_r+0xa0>
 800c798:	4629      	mov	r1, r5
 800c79a:	f7fb ffcd 	bl	8008738 <_malloc_r>
 800c79e:	4606      	mov	r6, r0
 800c7a0:	b950      	cbnz	r0, 800c7b8 <__ssputs_r+0x5c>
 800c7a2:	230c      	movs	r3, #12
 800c7a4:	f8ca 3000 	str.w	r3, [sl]
 800c7a8:	89a3      	ldrh	r3, [r4, #12]
 800c7aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7ae:	81a3      	strh	r3, [r4, #12]
 800c7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b8:	6921      	ldr	r1, [r4, #16]
 800c7ba:	464a      	mov	r2, r9
 800c7bc:	f7fb fcd8 	bl	8008170 <memcpy>
 800c7c0:	89a3      	ldrh	r3, [r4, #12]
 800c7c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7ca:	81a3      	strh	r3, [r4, #12]
 800c7cc:	6126      	str	r6, [r4, #16]
 800c7ce:	6165      	str	r5, [r4, #20]
 800c7d0:	444e      	add	r6, r9
 800c7d2:	eba5 0509 	sub.w	r5, r5, r9
 800c7d6:	6026      	str	r6, [r4, #0]
 800c7d8:	60a5      	str	r5, [r4, #8]
 800c7da:	463e      	mov	r6, r7
 800c7dc:	42be      	cmp	r6, r7
 800c7de:	d900      	bls.n	800c7e2 <__ssputs_r+0x86>
 800c7e0:	463e      	mov	r6, r7
 800c7e2:	4632      	mov	r2, r6
 800c7e4:	6820      	ldr	r0, [r4, #0]
 800c7e6:	4641      	mov	r1, r8
 800c7e8:	f001 f924 	bl	800da34 <memmove>
 800c7ec:	68a3      	ldr	r3, [r4, #8]
 800c7ee:	6822      	ldr	r2, [r4, #0]
 800c7f0:	1b9b      	subs	r3, r3, r6
 800c7f2:	4432      	add	r2, r6
 800c7f4:	60a3      	str	r3, [r4, #8]
 800c7f6:	6022      	str	r2, [r4, #0]
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	e7db      	b.n	800c7b4 <__ssputs_r+0x58>
 800c7fc:	462a      	mov	r2, r5
 800c7fe:	f7ff ff87 	bl	800c710 <_realloc_r>
 800c802:	4606      	mov	r6, r0
 800c804:	2800      	cmp	r0, #0
 800c806:	d1e1      	bne.n	800c7cc <__ssputs_r+0x70>
 800c808:	6921      	ldr	r1, [r4, #16]
 800c80a:	4650      	mov	r0, sl
 800c80c:	f7fb ff44 	bl	8008698 <_free_r>
 800c810:	e7c7      	b.n	800c7a2 <__ssputs_r+0x46>
	...

0800c814 <_svfiprintf_r>:
 800c814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c818:	4698      	mov	r8, r3
 800c81a:	898b      	ldrh	r3, [r1, #12]
 800c81c:	061b      	lsls	r3, r3, #24
 800c81e:	b09d      	sub	sp, #116	; 0x74
 800c820:	4607      	mov	r7, r0
 800c822:	460d      	mov	r5, r1
 800c824:	4614      	mov	r4, r2
 800c826:	d50e      	bpl.n	800c846 <_svfiprintf_r+0x32>
 800c828:	690b      	ldr	r3, [r1, #16]
 800c82a:	b963      	cbnz	r3, 800c846 <_svfiprintf_r+0x32>
 800c82c:	2140      	movs	r1, #64	; 0x40
 800c82e:	f7fb ff83 	bl	8008738 <_malloc_r>
 800c832:	6028      	str	r0, [r5, #0]
 800c834:	6128      	str	r0, [r5, #16]
 800c836:	b920      	cbnz	r0, 800c842 <_svfiprintf_r+0x2e>
 800c838:	230c      	movs	r3, #12
 800c83a:	603b      	str	r3, [r7, #0]
 800c83c:	f04f 30ff 	mov.w	r0, #4294967295
 800c840:	e0d1      	b.n	800c9e6 <_svfiprintf_r+0x1d2>
 800c842:	2340      	movs	r3, #64	; 0x40
 800c844:	616b      	str	r3, [r5, #20]
 800c846:	2300      	movs	r3, #0
 800c848:	9309      	str	r3, [sp, #36]	; 0x24
 800c84a:	2320      	movs	r3, #32
 800c84c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c850:	f8cd 800c 	str.w	r8, [sp, #12]
 800c854:	2330      	movs	r3, #48	; 0x30
 800c856:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca00 <_svfiprintf_r+0x1ec>
 800c85a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c85e:	f04f 0901 	mov.w	r9, #1
 800c862:	4623      	mov	r3, r4
 800c864:	469a      	mov	sl, r3
 800c866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c86a:	b10a      	cbz	r2, 800c870 <_svfiprintf_r+0x5c>
 800c86c:	2a25      	cmp	r2, #37	; 0x25
 800c86e:	d1f9      	bne.n	800c864 <_svfiprintf_r+0x50>
 800c870:	ebba 0b04 	subs.w	fp, sl, r4
 800c874:	d00b      	beq.n	800c88e <_svfiprintf_r+0x7a>
 800c876:	465b      	mov	r3, fp
 800c878:	4622      	mov	r2, r4
 800c87a:	4629      	mov	r1, r5
 800c87c:	4638      	mov	r0, r7
 800c87e:	f7ff ff6d 	bl	800c75c <__ssputs_r>
 800c882:	3001      	adds	r0, #1
 800c884:	f000 80aa 	beq.w	800c9dc <_svfiprintf_r+0x1c8>
 800c888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c88a:	445a      	add	r2, fp
 800c88c:	9209      	str	r2, [sp, #36]	; 0x24
 800c88e:	f89a 3000 	ldrb.w	r3, [sl]
 800c892:	2b00      	cmp	r3, #0
 800c894:	f000 80a2 	beq.w	800c9dc <_svfiprintf_r+0x1c8>
 800c898:	2300      	movs	r3, #0
 800c89a:	f04f 32ff 	mov.w	r2, #4294967295
 800c89e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8a2:	f10a 0a01 	add.w	sl, sl, #1
 800c8a6:	9304      	str	r3, [sp, #16]
 800c8a8:	9307      	str	r3, [sp, #28]
 800c8aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8ae:	931a      	str	r3, [sp, #104]	; 0x68
 800c8b0:	4654      	mov	r4, sl
 800c8b2:	2205      	movs	r2, #5
 800c8b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8b8:	4851      	ldr	r0, [pc, #324]	; (800ca00 <_svfiprintf_r+0x1ec>)
 800c8ba:	f7f3 fca9 	bl	8000210 <memchr>
 800c8be:	9a04      	ldr	r2, [sp, #16]
 800c8c0:	b9d8      	cbnz	r0, 800c8fa <_svfiprintf_r+0xe6>
 800c8c2:	06d0      	lsls	r0, r2, #27
 800c8c4:	bf44      	itt	mi
 800c8c6:	2320      	movmi	r3, #32
 800c8c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8cc:	0711      	lsls	r1, r2, #28
 800c8ce:	bf44      	itt	mi
 800c8d0:	232b      	movmi	r3, #43	; 0x2b
 800c8d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8d6:	f89a 3000 	ldrb.w	r3, [sl]
 800c8da:	2b2a      	cmp	r3, #42	; 0x2a
 800c8dc:	d015      	beq.n	800c90a <_svfiprintf_r+0xf6>
 800c8de:	9a07      	ldr	r2, [sp, #28]
 800c8e0:	4654      	mov	r4, sl
 800c8e2:	2000      	movs	r0, #0
 800c8e4:	f04f 0c0a 	mov.w	ip, #10
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8ee:	3b30      	subs	r3, #48	; 0x30
 800c8f0:	2b09      	cmp	r3, #9
 800c8f2:	d94e      	bls.n	800c992 <_svfiprintf_r+0x17e>
 800c8f4:	b1b0      	cbz	r0, 800c924 <_svfiprintf_r+0x110>
 800c8f6:	9207      	str	r2, [sp, #28]
 800c8f8:	e014      	b.n	800c924 <_svfiprintf_r+0x110>
 800c8fa:	eba0 0308 	sub.w	r3, r0, r8
 800c8fe:	fa09 f303 	lsl.w	r3, r9, r3
 800c902:	4313      	orrs	r3, r2
 800c904:	9304      	str	r3, [sp, #16]
 800c906:	46a2      	mov	sl, r4
 800c908:	e7d2      	b.n	800c8b0 <_svfiprintf_r+0x9c>
 800c90a:	9b03      	ldr	r3, [sp, #12]
 800c90c:	1d19      	adds	r1, r3, #4
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	9103      	str	r1, [sp, #12]
 800c912:	2b00      	cmp	r3, #0
 800c914:	bfbb      	ittet	lt
 800c916:	425b      	neglt	r3, r3
 800c918:	f042 0202 	orrlt.w	r2, r2, #2
 800c91c:	9307      	strge	r3, [sp, #28]
 800c91e:	9307      	strlt	r3, [sp, #28]
 800c920:	bfb8      	it	lt
 800c922:	9204      	strlt	r2, [sp, #16]
 800c924:	7823      	ldrb	r3, [r4, #0]
 800c926:	2b2e      	cmp	r3, #46	; 0x2e
 800c928:	d10c      	bne.n	800c944 <_svfiprintf_r+0x130>
 800c92a:	7863      	ldrb	r3, [r4, #1]
 800c92c:	2b2a      	cmp	r3, #42	; 0x2a
 800c92e:	d135      	bne.n	800c99c <_svfiprintf_r+0x188>
 800c930:	9b03      	ldr	r3, [sp, #12]
 800c932:	1d1a      	adds	r2, r3, #4
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	9203      	str	r2, [sp, #12]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	bfb8      	it	lt
 800c93c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c940:	3402      	adds	r4, #2
 800c942:	9305      	str	r3, [sp, #20]
 800c944:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca10 <_svfiprintf_r+0x1fc>
 800c948:	7821      	ldrb	r1, [r4, #0]
 800c94a:	2203      	movs	r2, #3
 800c94c:	4650      	mov	r0, sl
 800c94e:	f7f3 fc5f 	bl	8000210 <memchr>
 800c952:	b140      	cbz	r0, 800c966 <_svfiprintf_r+0x152>
 800c954:	2340      	movs	r3, #64	; 0x40
 800c956:	eba0 000a 	sub.w	r0, r0, sl
 800c95a:	fa03 f000 	lsl.w	r0, r3, r0
 800c95e:	9b04      	ldr	r3, [sp, #16]
 800c960:	4303      	orrs	r3, r0
 800c962:	3401      	adds	r4, #1
 800c964:	9304      	str	r3, [sp, #16]
 800c966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c96a:	4826      	ldr	r0, [pc, #152]	; (800ca04 <_svfiprintf_r+0x1f0>)
 800c96c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c970:	2206      	movs	r2, #6
 800c972:	f7f3 fc4d 	bl	8000210 <memchr>
 800c976:	2800      	cmp	r0, #0
 800c978:	d038      	beq.n	800c9ec <_svfiprintf_r+0x1d8>
 800c97a:	4b23      	ldr	r3, [pc, #140]	; (800ca08 <_svfiprintf_r+0x1f4>)
 800c97c:	bb1b      	cbnz	r3, 800c9c6 <_svfiprintf_r+0x1b2>
 800c97e:	9b03      	ldr	r3, [sp, #12]
 800c980:	3307      	adds	r3, #7
 800c982:	f023 0307 	bic.w	r3, r3, #7
 800c986:	3308      	adds	r3, #8
 800c988:	9303      	str	r3, [sp, #12]
 800c98a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c98c:	4433      	add	r3, r6
 800c98e:	9309      	str	r3, [sp, #36]	; 0x24
 800c990:	e767      	b.n	800c862 <_svfiprintf_r+0x4e>
 800c992:	fb0c 3202 	mla	r2, ip, r2, r3
 800c996:	460c      	mov	r4, r1
 800c998:	2001      	movs	r0, #1
 800c99a:	e7a5      	b.n	800c8e8 <_svfiprintf_r+0xd4>
 800c99c:	2300      	movs	r3, #0
 800c99e:	3401      	adds	r4, #1
 800c9a0:	9305      	str	r3, [sp, #20]
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	f04f 0c0a 	mov.w	ip, #10
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9ae:	3a30      	subs	r2, #48	; 0x30
 800c9b0:	2a09      	cmp	r2, #9
 800c9b2:	d903      	bls.n	800c9bc <_svfiprintf_r+0x1a8>
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d0c5      	beq.n	800c944 <_svfiprintf_r+0x130>
 800c9b8:	9105      	str	r1, [sp, #20]
 800c9ba:	e7c3      	b.n	800c944 <_svfiprintf_r+0x130>
 800c9bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9c0:	4604      	mov	r4, r0
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	e7f0      	b.n	800c9a8 <_svfiprintf_r+0x194>
 800c9c6:	ab03      	add	r3, sp, #12
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	462a      	mov	r2, r5
 800c9cc:	4b0f      	ldr	r3, [pc, #60]	; (800ca0c <_svfiprintf_r+0x1f8>)
 800c9ce:	a904      	add	r1, sp, #16
 800c9d0:	4638      	mov	r0, r7
 800c9d2:	f3af 8000 	nop.w
 800c9d6:	1c42      	adds	r2, r0, #1
 800c9d8:	4606      	mov	r6, r0
 800c9da:	d1d6      	bne.n	800c98a <_svfiprintf_r+0x176>
 800c9dc:	89ab      	ldrh	r3, [r5, #12]
 800c9de:	065b      	lsls	r3, r3, #25
 800c9e0:	f53f af2c 	bmi.w	800c83c <_svfiprintf_r+0x28>
 800c9e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9e6:	b01d      	add	sp, #116	; 0x74
 800c9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ec:	ab03      	add	r3, sp, #12
 800c9ee:	9300      	str	r3, [sp, #0]
 800c9f0:	462a      	mov	r2, r5
 800c9f2:	4b06      	ldr	r3, [pc, #24]	; (800ca0c <_svfiprintf_r+0x1f8>)
 800c9f4:	a904      	add	r1, sp, #16
 800c9f6:	4638      	mov	r0, r7
 800c9f8:	f000 fba6 	bl	800d148 <_printf_i>
 800c9fc:	e7eb      	b.n	800c9d6 <_svfiprintf_r+0x1c2>
 800c9fe:	bf00      	nop
 800ca00:	0800e4e4 	.word	0x0800e4e4
 800ca04:	0800e4ee 	.word	0x0800e4ee
 800ca08:	00000000 	.word	0x00000000
 800ca0c:	0800c75d 	.word	0x0800c75d
 800ca10:	0800e4ea 	.word	0x0800e4ea

0800ca14 <_sungetc_r>:
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	1c4b      	adds	r3, r1, #1
 800ca18:	4614      	mov	r4, r2
 800ca1a:	d103      	bne.n	800ca24 <_sungetc_r+0x10>
 800ca1c:	f04f 35ff 	mov.w	r5, #4294967295
 800ca20:	4628      	mov	r0, r5
 800ca22:	bd38      	pop	{r3, r4, r5, pc}
 800ca24:	8993      	ldrh	r3, [r2, #12]
 800ca26:	f023 0320 	bic.w	r3, r3, #32
 800ca2a:	8193      	strh	r3, [r2, #12]
 800ca2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca2e:	6852      	ldr	r2, [r2, #4]
 800ca30:	b2cd      	uxtb	r5, r1
 800ca32:	b18b      	cbz	r3, 800ca58 <_sungetc_r+0x44>
 800ca34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ca36:	4293      	cmp	r3, r2
 800ca38:	dd08      	ble.n	800ca4c <_sungetc_r+0x38>
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	1e5a      	subs	r2, r3, #1
 800ca3e:	6022      	str	r2, [r4, #0]
 800ca40:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ca44:	6863      	ldr	r3, [r4, #4]
 800ca46:	3301      	adds	r3, #1
 800ca48:	6063      	str	r3, [r4, #4]
 800ca4a:	e7e9      	b.n	800ca20 <_sungetc_r+0xc>
 800ca4c:	4621      	mov	r1, r4
 800ca4e:	f000 fe9b 	bl	800d788 <__submore>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	d0f1      	beq.n	800ca3a <_sungetc_r+0x26>
 800ca56:	e7e1      	b.n	800ca1c <_sungetc_r+0x8>
 800ca58:	6921      	ldr	r1, [r4, #16]
 800ca5a:	6823      	ldr	r3, [r4, #0]
 800ca5c:	b151      	cbz	r1, 800ca74 <_sungetc_r+0x60>
 800ca5e:	4299      	cmp	r1, r3
 800ca60:	d208      	bcs.n	800ca74 <_sungetc_r+0x60>
 800ca62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ca66:	42a9      	cmp	r1, r5
 800ca68:	d104      	bne.n	800ca74 <_sungetc_r+0x60>
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	3201      	adds	r2, #1
 800ca6e:	6023      	str	r3, [r4, #0]
 800ca70:	6062      	str	r2, [r4, #4]
 800ca72:	e7d5      	b.n	800ca20 <_sungetc_r+0xc>
 800ca74:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ca78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca7c:	6363      	str	r3, [r4, #52]	; 0x34
 800ca7e:	2303      	movs	r3, #3
 800ca80:	63a3      	str	r3, [r4, #56]	; 0x38
 800ca82:	4623      	mov	r3, r4
 800ca84:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e7dc      	b.n	800ca48 <_sungetc_r+0x34>

0800ca8e <__ssrefill_r>:
 800ca8e:	b510      	push	{r4, lr}
 800ca90:	460c      	mov	r4, r1
 800ca92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ca94:	b169      	cbz	r1, 800cab2 <__ssrefill_r+0x24>
 800ca96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca9a:	4299      	cmp	r1, r3
 800ca9c:	d001      	beq.n	800caa2 <__ssrefill_r+0x14>
 800ca9e:	f7fb fdfb 	bl	8008698 <_free_r>
 800caa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800caa4:	6063      	str	r3, [r4, #4]
 800caa6:	2000      	movs	r0, #0
 800caa8:	6360      	str	r0, [r4, #52]	; 0x34
 800caaa:	b113      	cbz	r3, 800cab2 <__ssrefill_r+0x24>
 800caac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800caae:	6023      	str	r3, [r4, #0]
 800cab0:	bd10      	pop	{r4, pc}
 800cab2:	6923      	ldr	r3, [r4, #16]
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	2300      	movs	r3, #0
 800cab8:	6063      	str	r3, [r4, #4]
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	f043 0320 	orr.w	r3, r3, #32
 800cac0:	81a3      	strh	r3, [r4, #12]
 800cac2:	f04f 30ff 	mov.w	r0, #4294967295
 800cac6:	e7f3      	b.n	800cab0 <__ssrefill_r+0x22>

0800cac8 <__ssvfiscanf_r>:
 800cac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cacc:	460c      	mov	r4, r1
 800cace:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800cad2:	2100      	movs	r1, #0
 800cad4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800cad8:	49b2      	ldr	r1, [pc, #712]	; (800cda4 <__ssvfiscanf_r+0x2dc>)
 800cada:	91a0      	str	r1, [sp, #640]	; 0x280
 800cadc:	f10d 0804 	add.w	r8, sp, #4
 800cae0:	49b1      	ldr	r1, [pc, #708]	; (800cda8 <__ssvfiscanf_r+0x2e0>)
 800cae2:	4fb2      	ldr	r7, [pc, #712]	; (800cdac <__ssvfiscanf_r+0x2e4>)
 800cae4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800cdb0 <__ssvfiscanf_r+0x2e8>
 800cae8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800caec:	4606      	mov	r6, r0
 800caee:	91a1      	str	r1, [sp, #644]	; 0x284
 800caf0:	9300      	str	r3, [sp, #0]
 800caf2:	f892 a000 	ldrb.w	sl, [r2]
 800caf6:	f1ba 0f00 	cmp.w	sl, #0
 800cafa:	f000 8151 	beq.w	800cda0 <__ssvfiscanf_r+0x2d8>
 800cafe:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800cb02:	f013 0308 	ands.w	r3, r3, #8
 800cb06:	f102 0501 	add.w	r5, r2, #1
 800cb0a:	d019      	beq.n	800cb40 <__ssvfiscanf_r+0x78>
 800cb0c:	6863      	ldr	r3, [r4, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	dd0f      	ble.n	800cb32 <__ssvfiscanf_r+0x6a>
 800cb12:	6823      	ldr	r3, [r4, #0]
 800cb14:	781a      	ldrb	r2, [r3, #0]
 800cb16:	5cba      	ldrb	r2, [r7, r2]
 800cb18:	0712      	lsls	r2, r2, #28
 800cb1a:	d401      	bmi.n	800cb20 <__ssvfiscanf_r+0x58>
 800cb1c:	462a      	mov	r2, r5
 800cb1e:	e7e8      	b.n	800caf2 <__ssvfiscanf_r+0x2a>
 800cb20:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cb22:	3201      	adds	r2, #1
 800cb24:	9245      	str	r2, [sp, #276]	; 0x114
 800cb26:	6862      	ldr	r2, [r4, #4]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	3a01      	subs	r2, #1
 800cb2c:	6062      	str	r2, [r4, #4]
 800cb2e:	6023      	str	r3, [r4, #0]
 800cb30:	e7ec      	b.n	800cb0c <__ssvfiscanf_r+0x44>
 800cb32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cb34:	4621      	mov	r1, r4
 800cb36:	4630      	mov	r0, r6
 800cb38:	4798      	blx	r3
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	d0e9      	beq.n	800cb12 <__ssvfiscanf_r+0x4a>
 800cb3e:	e7ed      	b.n	800cb1c <__ssvfiscanf_r+0x54>
 800cb40:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800cb44:	f040 8083 	bne.w	800cc4e <__ssvfiscanf_r+0x186>
 800cb48:	9341      	str	r3, [sp, #260]	; 0x104
 800cb4a:	9343      	str	r3, [sp, #268]	; 0x10c
 800cb4c:	7853      	ldrb	r3, [r2, #1]
 800cb4e:	2b2a      	cmp	r3, #42	; 0x2a
 800cb50:	bf02      	ittt	eq
 800cb52:	2310      	moveq	r3, #16
 800cb54:	1c95      	addeq	r5, r2, #2
 800cb56:	9341      	streq	r3, [sp, #260]	; 0x104
 800cb58:	220a      	movs	r2, #10
 800cb5a:	46ab      	mov	fp, r5
 800cb5c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800cb60:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800cb64:	2b09      	cmp	r3, #9
 800cb66:	d91d      	bls.n	800cba4 <__ssvfiscanf_r+0xdc>
 800cb68:	4891      	ldr	r0, [pc, #580]	; (800cdb0 <__ssvfiscanf_r+0x2e8>)
 800cb6a:	2203      	movs	r2, #3
 800cb6c:	f7f3 fb50 	bl	8000210 <memchr>
 800cb70:	b140      	cbz	r0, 800cb84 <__ssvfiscanf_r+0xbc>
 800cb72:	2301      	movs	r3, #1
 800cb74:	eba0 0009 	sub.w	r0, r0, r9
 800cb78:	fa03 f000 	lsl.w	r0, r3, r0
 800cb7c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb7e:	4318      	orrs	r0, r3
 800cb80:	9041      	str	r0, [sp, #260]	; 0x104
 800cb82:	465d      	mov	r5, fp
 800cb84:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cb88:	2b78      	cmp	r3, #120	; 0x78
 800cb8a:	d806      	bhi.n	800cb9a <__ssvfiscanf_r+0xd2>
 800cb8c:	2b57      	cmp	r3, #87	; 0x57
 800cb8e:	d810      	bhi.n	800cbb2 <__ssvfiscanf_r+0xea>
 800cb90:	2b25      	cmp	r3, #37	; 0x25
 800cb92:	d05c      	beq.n	800cc4e <__ssvfiscanf_r+0x186>
 800cb94:	d856      	bhi.n	800cc44 <__ssvfiscanf_r+0x17c>
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d074      	beq.n	800cc84 <__ssvfiscanf_r+0x1bc>
 800cb9a:	2303      	movs	r3, #3
 800cb9c:	9347      	str	r3, [sp, #284]	; 0x11c
 800cb9e:	230a      	movs	r3, #10
 800cba0:	9342      	str	r3, [sp, #264]	; 0x108
 800cba2:	e081      	b.n	800cca8 <__ssvfiscanf_r+0x1e0>
 800cba4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cba6:	fb02 1303 	mla	r3, r2, r3, r1
 800cbaa:	3b30      	subs	r3, #48	; 0x30
 800cbac:	9343      	str	r3, [sp, #268]	; 0x10c
 800cbae:	465d      	mov	r5, fp
 800cbb0:	e7d3      	b.n	800cb5a <__ssvfiscanf_r+0x92>
 800cbb2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800cbb6:	2a20      	cmp	r2, #32
 800cbb8:	d8ef      	bhi.n	800cb9a <__ssvfiscanf_r+0xd2>
 800cbba:	a101      	add	r1, pc, #4	; (adr r1, 800cbc0 <__ssvfiscanf_r+0xf8>)
 800cbbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cbc0:	0800cc93 	.word	0x0800cc93
 800cbc4:	0800cb9b 	.word	0x0800cb9b
 800cbc8:	0800cb9b 	.word	0x0800cb9b
 800cbcc:	0800ccf1 	.word	0x0800ccf1
 800cbd0:	0800cb9b 	.word	0x0800cb9b
 800cbd4:	0800cb9b 	.word	0x0800cb9b
 800cbd8:	0800cb9b 	.word	0x0800cb9b
 800cbdc:	0800cb9b 	.word	0x0800cb9b
 800cbe0:	0800cb9b 	.word	0x0800cb9b
 800cbe4:	0800cb9b 	.word	0x0800cb9b
 800cbe8:	0800cb9b 	.word	0x0800cb9b
 800cbec:	0800cd07 	.word	0x0800cd07
 800cbf0:	0800ccdd 	.word	0x0800ccdd
 800cbf4:	0800cc4b 	.word	0x0800cc4b
 800cbf8:	0800cc4b 	.word	0x0800cc4b
 800cbfc:	0800cc4b 	.word	0x0800cc4b
 800cc00:	0800cb9b 	.word	0x0800cb9b
 800cc04:	0800cce1 	.word	0x0800cce1
 800cc08:	0800cb9b 	.word	0x0800cb9b
 800cc0c:	0800cb9b 	.word	0x0800cb9b
 800cc10:	0800cb9b 	.word	0x0800cb9b
 800cc14:	0800cb9b 	.word	0x0800cb9b
 800cc18:	0800cd17 	.word	0x0800cd17
 800cc1c:	0800cce9 	.word	0x0800cce9
 800cc20:	0800cc8b 	.word	0x0800cc8b
 800cc24:	0800cb9b 	.word	0x0800cb9b
 800cc28:	0800cb9b 	.word	0x0800cb9b
 800cc2c:	0800cd13 	.word	0x0800cd13
 800cc30:	0800cb9b 	.word	0x0800cb9b
 800cc34:	0800ccdd 	.word	0x0800ccdd
 800cc38:	0800cb9b 	.word	0x0800cb9b
 800cc3c:	0800cb9b 	.word	0x0800cb9b
 800cc40:	0800cc93 	.word	0x0800cc93
 800cc44:	3b45      	subs	r3, #69	; 0x45
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	d8a7      	bhi.n	800cb9a <__ssvfiscanf_r+0xd2>
 800cc4a:	2305      	movs	r3, #5
 800cc4c:	e02b      	b.n	800cca6 <__ssvfiscanf_r+0x1de>
 800cc4e:	6863      	ldr	r3, [r4, #4]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	dd0d      	ble.n	800cc70 <__ssvfiscanf_r+0x1a8>
 800cc54:	6823      	ldr	r3, [r4, #0]
 800cc56:	781a      	ldrb	r2, [r3, #0]
 800cc58:	4552      	cmp	r2, sl
 800cc5a:	f040 80a1 	bne.w	800cda0 <__ssvfiscanf_r+0x2d8>
 800cc5e:	3301      	adds	r3, #1
 800cc60:	6862      	ldr	r2, [r4, #4]
 800cc62:	6023      	str	r3, [r4, #0]
 800cc64:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cc66:	3a01      	subs	r2, #1
 800cc68:	3301      	adds	r3, #1
 800cc6a:	6062      	str	r2, [r4, #4]
 800cc6c:	9345      	str	r3, [sp, #276]	; 0x114
 800cc6e:	e755      	b.n	800cb1c <__ssvfiscanf_r+0x54>
 800cc70:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cc72:	4621      	mov	r1, r4
 800cc74:	4630      	mov	r0, r6
 800cc76:	4798      	blx	r3
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	d0eb      	beq.n	800cc54 <__ssvfiscanf_r+0x18c>
 800cc7c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	f040 8084 	bne.w	800cd8c <__ssvfiscanf_r+0x2c4>
 800cc84:	f04f 30ff 	mov.w	r0, #4294967295
 800cc88:	e086      	b.n	800cd98 <__ssvfiscanf_r+0x2d0>
 800cc8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cc8c:	f042 0220 	orr.w	r2, r2, #32
 800cc90:	9241      	str	r2, [sp, #260]	; 0x104
 800cc92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cc94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc98:	9241      	str	r2, [sp, #260]	; 0x104
 800cc9a:	2210      	movs	r2, #16
 800cc9c:	2b6f      	cmp	r3, #111	; 0x6f
 800cc9e:	9242      	str	r2, [sp, #264]	; 0x108
 800cca0:	bf34      	ite	cc
 800cca2:	2303      	movcc	r3, #3
 800cca4:	2304      	movcs	r3, #4
 800cca6:	9347      	str	r3, [sp, #284]	; 0x11c
 800cca8:	6863      	ldr	r3, [r4, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	dd41      	ble.n	800cd32 <__ssvfiscanf_r+0x26a>
 800ccae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ccb0:	0659      	lsls	r1, r3, #25
 800ccb2:	d404      	bmi.n	800ccbe <__ssvfiscanf_r+0x1f6>
 800ccb4:	6823      	ldr	r3, [r4, #0]
 800ccb6:	781a      	ldrb	r2, [r3, #0]
 800ccb8:	5cba      	ldrb	r2, [r7, r2]
 800ccba:	0712      	lsls	r2, r2, #28
 800ccbc:	d440      	bmi.n	800cd40 <__ssvfiscanf_r+0x278>
 800ccbe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ccc0:	2b02      	cmp	r3, #2
 800ccc2:	dc4f      	bgt.n	800cd64 <__ssvfiscanf_r+0x29c>
 800ccc4:	466b      	mov	r3, sp
 800ccc6:	4622      	mov	r2, r4
 800ccc8:	a941      	add	r1, sp, #260	; 0x104
 800ccca:	4630      	mov	r0, r6
 800cccc:	f000 fb62 	bl	800d394 <_scanf_chars>
 800ccd0:	2801      	cmp	r0, #1
 800ccd2:	d065      	beq.n	800cda0 <__ssvfiscanf_r+0x2d8>
 800ccd4:	2802      	cmp	r0, #2
 800ccd6:	f47f af21 	bne.w	800cb1c <__ssvfiscanf_r+0x54>
 800ccda:	e7cf      	b.n	800cc7c <__ssvfiscanf_r+0x1b4>
 800ccdc:	220a      	movs	r2, #10
 800ccde:	e7dd      	b.n	800cc9c <__ssvfiscanf_r+0x1d4>
 800cce0:	2300      	movs	r3, #0
 800cce2:	9342      	str	r3, [sp, #264]	; 0x108
 800cce4:	2303      	movs	r3, #3
 800cce6:	e7de      	b.n	800cca6 <__ssvfiscanf_r+0x1de>
 800cce8:	2308      	movs	r3, #8
 800ccea:	9342      	str	r3, [sp, #264]	; 0x108
 800ccec:	2304      	movs	r3, #4
 800ccee:	e7da      	b.n	800cca6 <__ssvfiscanf_r+0x1de>
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	4640      	mov	r0, r8
 800ccf4:	f000 fcb4 	bl	800d660 <__sccl>
 800ccf8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ccfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccfe:	9341      	str	r3, [sp, #260]	; 0x104
 800cd00:	4605      	mov	r5, r0
 800cd02:	2301      	movs	r3, #1
 800cd04:	e7cf      	b.n	800cca6 <__ssvfiscanf_r+0x1de>
 800cd06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cd08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd0c:	9341      	str	r3, [sp, #260]	; 0x104
 800cd0e:	2300      	movs	r3, #0
 800cd10:	e7c9      	b.n	800cca6 <__ssvfiscanf_r+0x1de>
 800cd12:	2302      	movs	r3, #2
 800cd14:	e7c7      	b.n	800cca6 <__ssvfiscanf_r+0x1de>
 800cd16:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cd18:	06c3      	lsls	r3, r0, #27
 800cd1a:	f53f aeff 	bmi.w	800cb1c <__ssvfiscanf_r+0x54>
 800cd1e:	9b00      	ldr	r3, [sp, #0]
 800cd20:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cd22:	1d19      	adds	r1, r3, #4
 800cd24:	9100      	str	r1, [sp, #0]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	07c0      	lsls	r0, r0, #31
 800cd2a:	bf4c      	ite	mi
 800cd2c:	801a      	strhmi	r2, [r3, #0]
 800cd2e:	601a      	strpl	r2, [r3, #0]
 800cd30:	e6f4      	b.n	800cb1c <__ssvfiscanf_r+0x54>
 800cd32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cd34:	4621      	mov	r1, r4
 800cd36:	4630      	mov	r0, r6
 800cd38:	4798      	blx	r3
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d0b7      	beq.n	800ccae <__ssvfiscanf_r+0x1e6>
 800cd3e:	e79d      	b.n	800cc7c <__ssvfiscanf_r+0x1b4>
 800cd40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cd42:	3201      	adds	r2, #1
 800cd44:	9245      	str	r2, [sp, #276]	; 0x114
 800cd46:	6862      	ldr	r2, [r4, #4]
 800cd48:	3a01      	subs	r2, #1
 800cd4a:	2a00      	cmp	r2, #0
 800cd4c:	6062      	str	r2, [r4, #4]
 800cd4e:	dd02      	ble.n	800cd56 <__ssvfiscanf_r+0x28e>
 800cd50:	3301      	adds	r3, #1
 800cd52:	6023      	str	r3, [r4, #0]
 800cd54:	e7ae      	b.n	800ccb4 <__ssvfiscanf_r+0x1ec>
 800cd56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cd58:	4621      	mov	r1, r4
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	4798      	blx	r3
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d0a8      	beq.n	800ccb4 <__ssvfiscanf_r+0x1ec>
 800cd62:	e78b      	b.n	800cc7c <__ssvfiscanf_r+0x1b4>
 800cd64:	2b04      	cmp	r3, #4
 800cd66:	dc06      	bgt.n	800cd76 <__ssvfiscanf_r+0x2ae>
 800cd68:	466b      	mov	r3, sp
 800cd6a:	4622      	mov	r2, r4
 800cd6c:	a941      	add	r1, sp, #260	; 0x104
 800cd6e:	4630      	mov	r0, r6
 800cd70:	f000 fb68 	bl	800d444 <_scanf_i>
 800cd74:	e7ac      	b.n	800ccd0 <__ssvfiscanf_r+0x208>
 800cd76:	4b0f      	ldr	r3, [pc, #60]	; (800cdb4 <__ssvfiscanf_r+0x2ec>)
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f43f aecf 	beq.w	800cb1c <__ssvfiscanf_r+0x54>
 800cd7e:	466b      	mov	r3, sp
 800cd80:	4622      	mov	r2, r4
 800cd82:	a941      	add	r1, sp, #260	; 0x104
 800cd84:	4630      	mov	r0, r6
 800cd86:	f3af 8000 	nop.w
 800cd8a:	e7a1      	b.n	800ccd0 <__ssvfiscanf_r+0x208>
 800cd8c:	89a3      	ldrh	r3, [r4, #12]
 800cd8e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cd92:	bf18      	it	ne
 800cd94:	f04f 30ff 	movne.w	r0, #4294967295
 800cd98:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800cd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cda2:	e7f9      	b.n	800cd98 <__ssvfiscanf_r+0x2d0>
 800cda4:	0800ca15 	.word	0x0800ca15
 800cda8:	0800ca8f 	.word	0x0800ca8f
 800cdac:	0800dd61 	.word	0x0800dd61
 800cdb0:	0800e4ea 	.word	0x0800e4ea
 800cdb4:	00000000 	.word	0x00000000

0800cdb8 <__sfputc_r>:
 800cdb8:	6893      	ldr	r3, [r2, #8]
 800cdba:	3b01      	subs	r3, #1
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	b410      	push	{r4}
 800cdc0:	6093      	str	r3, [r2, #8]
 800cdc2:	da08      	bge.n	800cdd6 <__sfputc_r+0x1e>
 800cdc4:	6994      	ldr	r4, [r2, #24]
 800cdc6:	42a3      	cmp	r3, r4
 800cdc8:	db01      	blt.n	800cdce <__sfputc_r+0x16>
 800cdca:	290a      	cmp	r1, #10
 800cdcc:	d103      	bne.n	800cdd6 <__sfputc_r+0x1e>
 800cdce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdd2:	f7fe b995 	b.w	800b100 <__swbuf_r>
 800cdd6:	6813      	ldr	r3, [r2, #0]
 800cdd8:	1c58      	adds	r0, r3, #1
 800cdda:	6010      	str	r0, [r2, #0]
 800cddc:	7019      	strb	r1, [r3, #0]
 800cdde:	4608      	mov	r0, r1
 800cde0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cde4:	4770      	bx	lr

0800cde6 <__sfputs_r>:
 800cde6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde8:	4606      	mov	r6, r0
 800cdea:	460f      	mov	r7, r1
 800cdec:	4614      	mov	r4, r2
 800cdee:	18d5      	adds	r5, r2, r3
 800cdf0:	42ac      	cmp	r4, r5
 800cdf2:	d101      	bne.n	800cdf8 <__sfputs_r+0x12>
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	e007      	b.n	800ce08 <__sfputs_r+0x22>
 800cdf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdfc:	463a      	mov	r2, r7
 800cdfe:	4630      	mov	r0, r6
 800ce00:	f7ff ffda 	bl	800cdb8 <__sfputc_r>
 800ce04:	1c43      	adds	r3, r0, #1
 800ce06:	d1f3      	bne.n	800cdf0 <__sfputs_r+0xa>
 800ce08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce0c <_vfiprintf_r>:
 800ce0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce10:	460d      	mov	r5, r1
 800ce12:	b09d      	sub	sp, #116	; 0x74
 800ce14:	4614      	mov	r4, r2
 800ce16:	4698      	mov	r8, r3
 800ce18:	4606      	mov	r6, r0
 800ce1a:	b118      	cbz	r0, 800ce24 <_vfiprintf_r+0x18>
 800ce1c:	6983      	ldr	r3, [r0, #24]
 800ce1e:	b90b      	cbnz	r3, 800ce24 <_vfiprintf_r+0x18>
 800ce20:	f7fb f8ce 	bl	8007fc0 <__sinit>
 800ce24:	4b89      	ldr	r3, [pc, #548]	; (800d04c <_vfiprintf_r+0x240>)
 800ce26:	429d      	cmp	r5, r3
 800ce28:	d11b      	bne.n	800ce62 <_vfiprintf_r+0x56>
 800ce2a:	6875      	ldr	r5, [r6, #4]
 800ce2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce2e:	07d9      	lsls	r1, r3, #31
 800ce30:	d405      	bmi.n	800ce3e <_vfiprintf_r+0x32>
 800ce32:	89ab      	ldrh	r3, [r5, #12]
 800ce34:	059a      	lsls	r2, r3, #22
 800ce36:	d402      	bmi.n	800ce3e <_vfiprintf_r+0x32>
 800ce38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce3a:	f7fb f985 	bl	8008148 <__retarget_lock_acquire_recursive>
 800ce3e:	89ab      	ldrh	r3, [r5, #12]
 800ce40:	071b      	lsls	r3, r3, #28
 800ce42:	d501      	bpl.n	800ce48 <_vfiprintf_r+0x3c>
 800ce44:	692b      	ldr	r3, [r5, #16]
 800ce46:	b9eb      	cbnz	r3, 800ce84 <_vfiprintf_r+0x78>
 800ce48:	4629      	mov	r1, r5
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	f7fe f9bc 	bl	800b1c8 <__swsetup_r>
 800ce50:	b1c0      	cbz	r0, 800ce84 <_vfiprintf_r+0x78>
 800ce52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce54:	07dc      	lsls	r4, r3, #31
 800ce56:	d50e      	bpl.n	800ce76 <_vfiprintf_r+0x6a>
 800ce58:	f04f 30ff 	mov.w	r0, #4294967295
 800ce5c:	b01d      	add	sp, #116	; 0x74
 800ce5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce62:	4b7b      	ldr	r3, [pc, #492]	; (800d050 <_vfiprintf_r+0x244>)
 800ce64:	429d      	cmp	r5, r3
 800ce66:	d101      	bne.n	800ce6c <_vfiprintf_r+0x60>
 800ce68:	68b5      	ldr	r5, [r6, #8]
 800ce6a:	e7df      	b.n	800ce2c <_vfiprintf_r+0x20>
 800ce6c:	4b79      	ldr	r3, [pc, #484]	; (800d054 <_vfiprintf_r+0x248>)
 800ce6e:	429d      	cmp	r5, r3
 800ce70:	bf08      	it	eq
 800ce72:	68f5      	ldreq	r5, [r6, #12]
 800ce74:	e7da      	b.n	800ce2c <_vfiprintf_r+0x20>
 800ce76:	89ab      	ldrh	r3, [r5, #12]
 800ce78:	0598      	lsls	r0, r3, #22
 800ce7a:	d4ed      	bmi.n	800ce58 <_vfiprintf_r+0x4c>
 800ce7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce7e:	f7fb f965 	bl	800814c <__retarget_lock_release_recursive>
 800ce82:	e7e9      	b.n	800ce58 <_vfiprintf_r+0x4c>
 800ce84:	2300      	movs	r3, #0
 800ce86:	9309      	str	r3, [sp, #36]	; 0x24
 800ce88:	2320      	movs	r3, #32
 800ce8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce92:	2330      	movs	r3, #48	; 0x30
 800ce94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d058 <_vfiprintf_r+0x24c>
 800ce98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce9c:	f04f 0901 	mov.w	r9, #1
 800cea0:	4623      	mov	r3, r4
 800cea2:	469a      	mov	sl, r3
 800cea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cea8:	b10a      	cbz	r2, 800ceae <_vfiprintf_r+0xa2>
 800ceaa:	2a25      	cmp	r2, #37	; 0x25
 800ceac:	d1f9      	bne.n	800cea2 <_vfiprintf_r+0x96>
 800ceae:	ebba 0b04 	subs.w	fp, sl, r4
 800ceb2:	d00b      	beq.n	800cecc <_vfiprintf_r+0xc0>
 800ceb4:	465b      	mov	r3, fp
 800ceb6:	4622      	mov	r2, r4
 800ceb8:	4629      	mov	r1, r5
 800ceba:	4630      	mov	r0, r6
 800cebc:	f7ff ff93 	bl	800cde6 <__sfputs_r>
 800cec0:	3001      	adds	r0, #1
 800cec2:	f000 80aa 	beq.w	800d01a <_vfiprintf_r+0x20e>
 800cec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cec8:	445a      	add	r2, fp
 800ceca:	9209      	str	r2, [sp, #36]	; 0x24
 800cecc:	f89a 3000 	ldrb.w	r3, [sl]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	f000 80a2 	beq.w	800d01a <_vfiprintf_r+0x20e>
 800ced6:	2300      	movs	r3, #0
 800ced8:	f04f 32ff 	mov.w	r2, #4294967295
 800cedc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cee0:	f10a 0a01 	add.w	sl, sl, #1
 800cee4:	9304      	str	r3, [sp, #16]
 800cee6:	9307      	str	r3, [sp, #28]
 800cee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ceec:	931a      	str	r3, [sp, #104]	; 0x68
 800ceee:	4654      	mov	r4, sl
 800cef0:	2205      	movs	r2, #5
 800cef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cef6:	4858      	ldr	r0, [pc, #352]	; (800d058 <_vfiprintf_r+0x24c>)
 800cef8:	f7f3 f98a 	bl	8000210 <memchr>
 800cefc:	9a04      	ldr	r2, [sp, #16]
 800cefe:	b9d8      	cbnz	r0, 800cf38 <_vfiprintf_r+0x12c>
 800cf00:	06d1      	lsls	r1, r2, #27
 800cf02:	bf44      	itt	mi
 800cf04:	2320      	movmi	r3, #32
 800cf06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf0a:	0713      	lsls	r3, r2, #28
 800cf0c:	bf44      	itt	mi
 800cf0e:	232b      	movmi	r3, #43	; 0x2b
 800cf10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf14:	f89a 3000 	ldrb.w	r3, [sl]
 800cf18:	2b2a      	cmp	r3, #42	; 0x2a
 800cf1a:	d015      	beq.n	800cf48 <_vfiprintf_r+0x13c>
 800cf1c:	9a07      	ldr	r2, [sp, #28]
 800cf1e:	4654      	mov	r4, sl
 800cf20:	2000      	movs	r0, #0
 800cf22:	f04f 0c0a 	mov.w	ip, #10
 800cf26:	4621      	mov	r1, r4
 800cf28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf2c:	3b30      	subs	r3, #48	; 0x30
 800cf2e:	2b09      	cmp	r3, #9
 800cf30:	d94e      	bls.n	800cfd0 <_vfiprintf_r+0x1c4>
 800cf32:	b1b0      	cbz	r0, 800cf62 <_vfiprintf_r+0x156>
 800cf34:	9207      	str	r2, [sp, #28]
 800cf36:	e014      	b.n	800cf62 <_vfiprintf_r+0x156>
 800cf38:	eba0 0308 	sub.w	r3, r0, r8
 800cf3c:	fa09 f303 	lsl.w	r3, r9, r3
 800cf40:	4313      	orrs	r3, r2
 800cf42:	9304      	str	r3, [sp, #16]
 800cf44:	46a2      	mov	sl, r4
 800cf46:	e7d2      	b.n	800ceee <_vfiprintf_r+0xe2>
 800cf48:	9b03      	ldr	r3, [sp, #12]
 800cf4a:	1d19      	adds	r1, r3, #4
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	9103      	str	r1, [sp, #12]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	bfbb      	ittet	lt
 800cf54:	425b      	neglt	r3, r3
 800cf56:	f042 0202 	orrlt.w	r2, r2, #2
 800cf5a:	9307      	strge	r3, [sp, #28]
 800cf5c:	9307      	strlt	r3, [sp, #28]
 800cf5e:	bfb8      	it	lt
 800cf60:	9204      	strlt	r2, [sp, #16]
 800cf62:	7823      	ldrb	r3, [r4, #0]
 800cf64:	2b2e      	cmp	r3, #46	; 0x2e
 800cf66:	d10c      	bne.n	800cf82 <_vfiprintf_r+0x176>
 800cf68:	7863      	ldrb	r3, [r4, #1]
 800cf6a:	2b2a      	cmp	r3, #42	; 0x2a
 800cf6c:	d135      	bne.n	800cfda <_vfiprintf_r+0x1ce>
 800cf6e:	9b03      	ldr	r3, [sp, #12]
 800cf70:	1d1a      	adds	r2, r3, #4
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	9203      	str	r2, [sp, #12]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	bfb8      	it	lt
 800cf7a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf7e:	3402      	adds	r4, #2
 800cf80:	9305      	str	r3, [sp, #20]
 800cf82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d068 <_vfiprintf_r+0x25c>
 800cf86:	7821      	ldrb	r1, [r4, #0]
 800cf88:	2203      	movs	r2, #3
 800cf8a:	4650      	mov	r0, sl
 800cf8c:	f7f3 f940 	bl	8000210 <memchr>
 800cf90:	b140      	cbz	r0, 800cfa4 <_vfiprintf_r+0x198>
 800cf92:	2340      	movs	r3, #64	; 0x40
 800cf94:	eba0 000a 	sub.w	r0, r0, sl
 800cf98:	fa03 f000 	lsl.w	r0, r3, r0
 800cf9c:	9b04      	ldr	r3, [sp, #16]
 800cf9e:	4303      	orrs	r3, r0
 800cfa0:	3401      	adds	r4, #1
 800cfa2:	9304      	str	r3, [sp, #16]
 800cfa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfa8:	482c      	ldr	r0, [pc, #176]	; (800d05c <_vfiprintf_r+0x250>)
 800cfaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfae:	2206      	movs	r2, #6
 800cfb0:	f7f3 f92e 	bl	8000210 <memchr>
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d03f      	beq.n	800d038 <_vfiprintf_r+0x22c>
 800cfb8:	4b29      	ldr	r3, [pc, #164]	; (800d060 <_vfiprintf_r+0x254>)
 800cfba:	bb1b      	cbnz	r3, 800d004 <_vfiprintf_r+0x1f8>
 800cfbc:	9b03      	ldr	r3, [sp, #12]
 800cfbe:	3307      	adds	r3, #7
 800cfc0:	f023 0307 	bic.w	r3, r3, #7
 800cfc4:	3308      	adds	r3, #8
 800cfc6:	9303      	str	r3, [sp, #12]
 800cfc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfca:	443b      	add	r3, r7
 800cfcc:	9309      	str	r3, [sp, #36]	; 0x24
 800cfce:	e767      	b.n	800cea0 <_vfiprintf_r+0x94>
 800cfd0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfd4:	460c      	mov	r4, r1
 800cfd6:	2001      	movs	r0, #1
 800cfd8:	e7a5      	b.n	800cf26 <_vfiprintf_r+0x11a>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	3401      	adds	r4, #1
 800cfde:	9305      	str	r3, [sp, #20]
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	f04f 0c0a 	mov.w	ip, #10
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfec:	3a30      	subs	r2, #48	; 0x30
 800cfee:	2a09      	cmp	r2, #9
 800cff0:	d903      	bls.n	800cffa <_vfiprintf_r+0x1ee>
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d0c5      	beq.n	800cf82 <_vfiprintf_r+0x176>
 800cff6:	9105      	str	r1, [sp, #20]
 800cff8:	e7c3      	b.n	800cf82 <_vfiprintf_r+0x176>
 800cffa:	fb0c 2101 	mla	r1, ip, r1, r2
 800cffe:	4604      	mov	r4, r0
 800d000:	2301      	movs	r3, #1
 800d002:	e7f0      	b.n	800cfe6 <_vfiprintf_r+0x1da>
 800d004:	ab03      	add	r3, sp, #12
 800d006:	9300      	str	r3, [sp, #0]
 800d008:	462a      	mov	r2, r5
 800d00a:	4b16      	ldr	r3, [pc, #88]	; (800d064 <_vfiprintf_r+0x258>)
 800d00c:	a904      	add	r1, sp, #16
 800d00e:	4630      	mov	r0, r6
 800d010:	f3af 8000 	nop.w
 800d014:	4607      	mov	r7, r0
 800d016:	1c78      	adds	r0, r7, #1
 800d018:	d1d6      	bne.n	800cfc8 <_vfiprintf_r+0x1bc>
 800d01a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d01c:	07d9      	lsls	r1, r3, #31
 800d01e:	d405      	bmi.n	800d02c <_vfiprintf_r+0x220>
 800d020:	89ab      	ldrh	r3, [r5, #12]
 800d022:	059a      	lsls	r2, r3, #22
 800d024:	d402      	bmi.n	800d02c <_vfiprintf_r+0x220>
 800d026:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d028:	f7fb f890 	bl	800814c <__retarget_lock_release_recursive>
 800d02c:	89ab      	ldrh	r3, [r5, #12]
 800d02e:	065b      	lsls	r3, r3, #25
 800d030:	f53f af12 	bmi.w	800ce58 <_vfiprintf_r+0x4c>
 800d034:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d036:	e711      	b.n	800ce5c <_vfiprintf_r+0x50>
 800d038:	ab03      	add	r3, sp, #12
 800d03a:	9300      	str	r3, [sp, #0]
 800d03c:	462a      	mov	r2, r5
 800d03e:	4b09      	ldr	r3, [pc, #36]	; (800d064 <_vfiprintf_r+0x258>)
 800d040:	a904      	add	r1, sp, #16
 800d042:	4630      	mov	r0, r6
 800d044:	f000 f880 	bl	800d148 <_printf_i>
 800d048:	e7e4      	b.n	800d014 <_vfiprintf_r+0x208>
 800d04a:	bf00      	nop
 800d04c:	0800de84 	.word	0x0800de84
 800d050:	0800dea4 	.word	0x0800dea4
 800d054:	0800de64 	.word	0x0800de64
 800d058:	0800e4e4 	.word	0x0800e4e4
 800d05c:	0800e4ee 	.word	0x0800e4ee
 800d060:	00000000 	.word	0x00000000
 800d064:	0800cde7 	.word	0x0800cde7
 800d068:	0800e4ea 	.word	0x0800e4ea

0800d06c <_printf_common>:
 800d06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d070:	4616      	mov	r6, r2
 800d072:	4699      	mov	r9, r3
 800d074:	688a      	ldr	r2, [r1, #8]
 800d076:	690b      	ldr	r3, [r1, #16]
 800d078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d07c:	4293      	cmp	r3, r2
 800d07e:	bfb8      	it	lt
 800d080:	4613      	movlt	r3, r2
 800d082:	6033      	str	r3, [r6, #0]
 800d084:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d088:	4607      	mov	r7, r0
 800d08a:	460c      	mov	r4, r1
 800d08c:	b10a      	cbz	r2, 800d092 <_printf_common+0x26>
 800d08e:	3301      	adds	r3, #1
 800d090:	6033      	str	r3, [r6, #0]
 800d092:	6823      	ldr	r3, [r4, #0]
 800d094:	0699      	lsls	r1, r3, #26
 800d096:	bf42      	ittt	mi
 800d098:	6833      	ldrmi	r3, [r6, #0]
 800d09a:	3302      	addmi	r3, #2
 800d09c:	6033      	strmi	r3, [r6, #0]
 800d09e:	6825      	ldr	r5, [r4, #0]
 800d0a0:	f015 0506 	ands.w	r5, r5, #6
 800d0a4:	d106      	bne.n	800d0b4 <_printf_common+0x48>
 800d0a6:	f104 0a19 	add.w	sl, r4, #25
 800d0aa:	68e3      	ldr	r3, [r4, #12]
 800d0ac:	6832      	ldr	r2, [r6, #0]
 800d0ae:	1a9b      	subs	r3, r3, r2
 800d0b0:	42ab      	cmp	r3, r5
 800d0b2:	dc26      	bgt.n	800d102 <_printf_common+0x96>
 800d0b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0b8:	1e13      	subs	r3, r2, #0
 800d0ba:	6822      	ldr	r2, [r4, #0]
 800d0bc:	bf18      	it	ne
 800d0be:	2301      	movne	r3, #1
 800d0c0:	0692      	lsls	r2, r2, #26
 800d0c2:	d42b      	bmi.n	800d11c <_printf_common+0xb0>
 800d0c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0c8:	4649      	mov	r1, r9
 800d0ca:	4638      	mov	r0, r7
 800d0cc:	47c0      	blx	r8
 800d0ce:	3001      	adds	r0, #1
 800d0d0:	d01e      	beq.n	800d110 <_printf_common+0xa4>
 800d0d2:	6823      	ldr	r3, [r4, #0]
 800d0d4:	68e5      	ldr	r5, [r4, #12]
 800d0d6:	6832      	ldr	r2, [r6, #0]
 800d0d8:	f003 0306 	and.w	r3, r3, #6
 800d0dc:	2b04      	cmp	r3, #4
 800d0de:	bf08      	it	eq
 800d0e0:	1aad      	subeq	r5, r5, r2
 800d0e2:	68a3      	ldr	r3, [r4, #8]
 800d0e4:	6922      	ldr	r2, [r4, #16]
 800d0e6:	bf0c      	ite	eq
 800d0e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0ec:	2500      	movne	r5, #0
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	bfc4      	itt	gt
 800d0f2:	1a9b      	subgt	r3, r3, r2
 800d0f4:	18ed      	addgt	r5, r5, r3
 800d0f6:	2600      	movs	r6, #0
 800d0f8:	341a      	adds	r4, #26
 800d0fa:	42b5      	cmp	r5, r6
 800d0fc:	d11a      	bne.n	800d134 <_printf_common+0xc8>
 800d0fe:	2000      	movs	r0, #0
 800d100:	e008      	b.n	800d114 <_printf_common+0xa8>
 800d102:	2301      	movs	r3, #1
 800d104:	4652      	mov	r2, sl
 800d106:	4649      	mov	r1, r9
 800d108:	4638      	mov	r0, r7
 800d10a:	47c0      	blx	r8
 800d10c:	3001      	adds	r0, #1
 800d10e:	d103      	bne.n	800d118 <_printf_common+0xac>
 800d110:	f04f 30ff 	mov.w	r0, #4294967295
 800d114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d118:	3501      	adds	r5, #1
 800d11a:	e7c6      	b.n	800d0aa <_printf_common+0x3e>
 800d11c:	18e1      	adds	r1, r4, r3
 800d11e:	1c5a      	adds	r2, r3, #1
 800d120:	2030      	movs	r0, #48	; 0x30
 800d122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d126:	4422      	add	r2, r4
 800d128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d12c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d130:	3302      	adds	r3, #2
 800d132:	e7c7      	b.n	800d0c4 <_printf_common+0x58>
 800d134:	2301      	movs	r3, #1
 800d136:	4622      	mov	r2, r4
 800d138:	4649      	mov	r1, r9
 800d13a:	4638      	mov	r0, r7
 800d13c:	47c0      	blx	r8
 800d13e:	3001      	adds	r0, #1
 800d140:	d0e6      	beq.n	800d110 <_printf_common+0xa4>
 800d142:	3601      	adds	r6, #1
 800d144:	e7d9      	b.n	800d0fa <_printf_common+0x8e>
	...

0800d148 <_printf_i>:
 800d148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d14c:	460c      	mov	r4, r1
 800d14e:	4691      	mov	r9, r2
 800d150:	7e27      	ldrb	r7, [r4, #24]
 800d152:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d154:	2f78      	cmp	r7, #120	; 0x78
 800d156:	4680      	mov	r8, r0
 800d158:	469a      	mov	sl, r3
 800d15a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d15e:	d807      	bhi.n	800d170 <_printf_i+0x28>
 800d160:	2f62      	cmp	r7, #98	; 0x62
 800d162:	d80a      	bhi.n	800d17a <_printf_i+0x32>
 800d164:	2f00      	cmp	r7, #0
 800d166:	f000 80d8 	beq.w	800d31a <_printf_i+0x1d2>
 800d16a:	2f58      	cmp	r7, #88	; 0x58
 800d16c:	f000 80a3 	beq.w	800d2b6 <_printf_i+0x16e>
 800d170:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d178:	e03a      	b.n	800d1f0 <_printf_i+0xa8>
 800d17a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d17e:	2b15      	cmp	r3, #21
 800d180:	d8f6      	bhi.n	800d170 <_printf_i+0x28>
 800d182:	a001      	add	r0, pc, #4	; (adr r0, 800d188 <_printf_i+0x40>)
 800d184:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d188:	0800d1e1 	.word	0x0800d1e1
 800d18c:	0800d1f5 	.word	0x0800d1f5
 800d190:	0800d171 	.word	0x0800d171
 800d194:	0800d171 	.word	0x0800d171
 800d198:	0800d171 	.word	0x0800d171
 800d19c:	0800d171 	.word	0x0800d171
 800d1a0:	0800d1f5 	.word	0x0800d1f5
 800d1a4:	0800d171 	.word	0x0800d171
 800d1a8:	0800d171 	.word	0x0800d171
 800d1ac:	0800d171 	.word	0x0800d171
 800d1b0:	0800d171 	.word	0x0800d171
 800d1b4:	0800d301 	.word	0x0800d301
 800d1b8:	0800d225 	.word	0x0800d225
 800d1bc:	0800d2e3 	.word	0x0800d2e3
 800d1c0:	0800d171 	.word	0x0800d171
 800d1c4:	0800d171 	.word	0x0800d171
 800d1c8:	0800d323 	.word	0x0800d323
 800d1cc:	0800d171 	.word	0x0800d171
 800d1d0:	0800d225 	.word	0x0800d225
 800d1d4:	0800d171 	.word	0x0800d171
 800d1d8:	0800d171 	.word	0x0800d171
 800d1dc:	0800d2eb 	.word	0x0800d2eb
 800d1e0:	680b      	ldr	r3, [r1, #0]
 800d1e2:	1d1a      	adds	r2, r3, #4
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	600a      	str	r2, [r1, #0]
 800d1e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d1ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e0a3      	b.n	800d33c <_printf_i+0x1f4>
 800d1f4:	6825      	ldr	r5, [r4, #0]
 800d1f6:	6808      	ldr	r0, [r1, #0]
 800d1f8:	062e      	lsls	r6, r5, #24
 800d1fa:	f100 0304 	add.w	r3, r0, #4
 800d1fe:	d50a      	bpl.n	800d216 <_printf_i+0xce>
 800d200:	6805      	ldr	r5, [r0, #0]
 800d202:	600b      	str	r3, [r1, #0]
 800d204:	2d00      	cmp	r5, #0
 800d206:	da03      	bge.n	800d210 <_printf_i+0xc8>
 800d208:	232d      	movs	r3, #45	; 0x2d
 800d20a:	426d      	negs	r5, r5
 800d20c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d210:	485e      	ldr	r0, [pc, #376]	; (800d38c <_printf_i+0x244>)
 800d212:	230a      	movs	r3, #10
 800d214:	e019      	b.n	800d24a <_printf_i+0x102>
 800d216:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d21a:	6805      	ldr	r5, [r0, #0]
 800d21c:	600b      	str	r3, [r1, #0]
 800d21e:	bf18      	it	ne
 800d220:	b22d      	sxthne	r5, r5
 800d222:	e7ef      	b.n	800d204 <_printf_i+0xbc>
 800d224:	680b      	ldr	r3, [r1, #0]
 800d226:	6825      	ldr	r5, [r4, #0]
 800d228:	1d18      	adds	r0, r3, #4
 800d22a:	6008      	str	r0, [r1, #0]
 800d22c:	0628      	lsls	r0, r5, #24
 800d22e:	d501      	bpl.n	800d234 <_printf_i+0xec>
 800d230:	681d      	ldr	r5, [r3, #0]
 800d232:	e002      	b.n	800d23a <_printf_i+0xf2>
 800d234:	0669      	lsls	r1, r5, #25
 800d236:	d5fb      	bpl.n	800d230 <_printf_i+0xe8>
 800d238:	881d      	ldrh	r5, [r3, #0]
 800d23a:	4854      	ldr	r0, [pc, #336]	; (800d38c <_printf_i+0x244>)
 800d23c:	2f6f      	cmp	r7, #111	; 0x6f
 800d23e:	bf0c      	ite	eq
 800d240:	2308      	moveq	r3, #8
 800d242:	230a      	movne	r3, #10
 800d244:	2100      	movs	r1, #0
 800d246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d24a:	6866      	ldr	r6, [r4, #4]
 800d24c:	60a6      	str	r6, [r4, #8]
 800d24e:	2e00      	cmp	r6, #0
 800d250:	bfa2      	ittt	ge
 800d252:	6821      	ldrge	r1, [r4, #0]
 800d254:	f021 0104 	bicge.w	r1, r1, #4
 800d258:	6021      	strge	r1, [r4, #0]
 800d25a:	b90d      	cbnz	r5, 800d260 <_printf_i+0x118>
 800d25c:	2e00      	cmp	r6, #0
 800d25e:	d04d      	beq.n	800d2fc <_printf_i+0x1b4>
 800d260:	4616      	mov	r6, r2
 800d262:	fbb5 f1f3 	udiv	r1, r5, r3
 800d266:	fb03 5711 	mls	r7, r3, r1, r5
 800d26a:	5dc7      	ldrb	r7, [r0, r7]
 800d26c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d270:	462f      	mov	r7, r5
 800d272:	42bb      	cmp	r3, r7
 800d274:	460d      	mov	r5, r1
 800d276:	d9f4      	bls.n	800d262 <_printf_i+0x11a>
 800d278:	2b08      	cmp	r3, #8
 800d27a:	d10b      	bne.n	800d294 <_printf_i+0x14c>
 800d27c:	6823      	ldr	r3, [r4, #0]
 800d27e:	07df      	lsls	r7, r3, #31
 800d280:	d508      	bpl.n	800d294 <_printf_i+0x14c>
 800d282:	6923      	ldr	r3, [r4, #16]
 800d284:	6861      	ldr	r1, [r4, #4]
 800d286:	4299      	cmp	r1, r3
 800d288:	bfde      	ittt	le
 800d28a:	2330      	movle	r3, #48	; 0x30
 800d28c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d290:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d294:	1b92      	subs	r2, r2, r6
 800d296:	6122      	str	r2, [r4, #16]
 800d298:	f8cd a000 	str.w	sl, [sp]
 800d29c:	464b      	mov	r3, r9
 800d29e:	aa03      	add	r2, sp, #12
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	4640      	mov	r0, r8
 800d2a4:	f7ff fee2 	bl	800d06c <_printf_common>
 800d2a8:	3001      	adds	r0, #1
 800d2aa:	d14c      	bne.n	800d346 <_printf_i+0x1fe>
 800d2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b0:	b004      	add	sp, #16
 800d2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b6:	4835      	ldr	r0, [pc, #212]	; (800d38c <_printf_i+0x244>)
 800d2b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d2bc:	6823      	ldr	r3, [r4, #0]
 800d2be:	680e      	ldr	r6, [r1, #0]
 800d2c0:	061f      	lsls	r7, r3, #24
 800d2c2:	f856 5b04 	ldr.w	r5, [r6], #4
 800d2c6:	600e      	str	r6, [r1, #0]
 800d2c8:	d514      	bpl.n	800d2f4 <_printf_i+0x1ac>
 800d2ca:	07d9      	lsls	r1, r3, #31
 800d2cc:	bf44      	itt	mi
 800d2ce:	f043 0320 	orrmi.w	r3, r3, #32
 800d2d2:	6023      	strmi	r3, [r4, #0]
 800d2d4:	b91d      	cbnz	r5, 800d2de <_printf_i+0x196>
 800d2d6:	6823      	ldr	r3, [r4, #0]
 800d2d8:	f023 0320 	bic.w	r3, r3, #32
 800d2dc:	6023      	str	r3, [r4, #0]
 800d2de:	2310      	movs	r3, #16
 800d2e0:	e7b0      	b.n	800d244 <_printf_i+0xfc>
 800d2e2:	6823      	ldr	r3, [r4, #0]
 800d2e4:	f043 0320 	orr.w	r3, r3, #32
 800d2e8:	6023      	str	r3, [r4, #0]
 800d2ea:	2378      	movs	r3, #120	; 0x78
 800d2ec:	4828      	ldr	r0, [pc, #160]	; (800d390 <_printf_i+0x248>)
 800d2ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2f2:	e7e3      	b.n	800d2bc <_printf_i+0x174>
 800d2f4:	065e      	lsls	r6, r3, #25
 800d2f6:	bf48      	it	mi
 800d2f8:	b2ad      	uxthmi	r5, r5
 800d2fa:	e7e6      	b.n	800d2ca <_printf_i+0x182>
 800d2fc:	4616      	mov	r6, r2
 800d2fe:	e7bb      	b.n	800d278 <_printf_i+0x130>
 800d300:	680b      	ldr	r3, [r1, #0]
 800d302:	6826      	ldr	r6, [r4, #0]
 800d304:	6960      	ldr	r0, [r4, #20]
 800d306:	1d1d      	adds	r5, r3, #4
 800d308:	600d      	str	r5, [r1, #0]
 800d30a:	0635      	lsls	r5, r6, #24
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	d501      	bpl.n	800d314 <_printf_i+0x1cc>
 800d310:	6018      	str	r0, [r3, #0]
 800d312:	e002      	b.n	800d31a <_printf_i+0x1d2>
 800d314:	0671      	lsls	r1, r6, #25
 800d316:	d5fb      	bpl.n	800d310 <_printf_i+0x1c8>
 800d318:	8018      	strh	r0, [r3, #0]
 800d31a:	2300      	movs	r3, #0
 800d31c:	6123      	str	r3, [r4, #16]
 800d31e:	4616      	mov	r6, r2
 800d320:	e7ba      	b.n	800d298 <_printf_i+0x150>
 800d322:	680b      	ldr	r3, [r1, #0]
 800d324:	1d1a      	adds	r2, r3, #4
 800d326:	600a      	str	r2, [r1, #0]
 800d328:	681e      	ldr	r6, [r3, #0]
 800d32a:	6862      	ldr	r2, [r4, #4]
 800d32c:	2100      	movs	r1, #0
 800d32e:	4630      	mov	r0, r6
 800d330:	f7f2 ff6e 	bl	8000210 <memchr>
 800d334:	b108      	cbz	r0, 800d33a <_printf_i+0x1f2>
 800d336:	1b80      	subs	r0, r0, r6
 800d338:	6060      	str	r0, [r4, #4]
 800d33a:	6863      	ldr	r3, [r4, #4]
 800d33c:	6123      	str	r3, [r4, #16]
 800d33e:	2300      	movs	r3, #0
 800d340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d344:	e7a8      	b.n	800d298 <_printf_i+0x150>
 800d346:	6923      	ldr	r3, [r4, #16]
 800d348:	4632      	mov	r2, r6
 800d34a:	4649      	mov	r1, r9
 800d34c:	4640      	mov	r0, r8
 800d34e:	47d0      	blx	sl
 800d350:	3001      	adds	r0, #1
 800d352:	d0ab      	beq.n	800d2ac <_printf_i+0x164>
 800d354:	6823      	ldr	r3, [r4, #0]
 800d356:	079b      	lsls	r3, r3, #30
 800d358:	d413      	bmi.n	800d382 <_printf_i+0x23a>
 800d35a:	68e0      	ldr	r0, [r4, #12]
 800d35c:	9b03      	ldr	r3, [sp, #12]
 800d35e:	4298      	cmp	r0, r3
 800d360:	bfb8      	it	lt
 800d362:	4618      	movlt	r0, r3
 800d364:	e7a4      	b.n	800d2b0 <_printf_i+0x168>
 800d366:	2301      	movs	r3, #1
 800d368:	4632      	mov	r2, r6
 800d36a:	4649      	mov	r1, r9
 800d36c:	4640      	mov	r0, r8
 800d36e:	47d0      	blx	sl
 800d370:	3001      	adds	r0, #1
 800d372:	d09b      	beq.n	800d2ac <_printf_i+0x164>
 800d374:	3501      	adds	r5, #1
 800d376:	68e3      	ldr	r3, [r4, #12]
 800d378:	9903      	ldr	r1, [sp, #12]
 800d37a:	1a5b      	subs	r3, r3, r1
 800d37c:	42ab      	cmp	r3, r5
 800d37e:	dcf2      	bgt.n	800d366 <_printf_i+0x21e>
 800d380:	e7eb      	b.n	800d35a <_printf_i+0x212>
 800d382:	2500      	movs	r5, #0
 800d384:	f104 0619 	add.w	r6, r4, #25
 800d388:	e7f5      	b.n	800d376 <_printf_i+0x22e>
 800d38a:	bf00      	nop
 800d38c:	0800e4f5 	.word	0x0800e4f5
 800d390:	0800e506 	.word	0x0800e506

0800d394 <_scanf_chars>:
 800d394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d398:	4615      	mov	r5, r2
 800d39a:	688a      	ldr	r2, [r1, #8]
 800d39c:	4680      	mov	r8, r0
 800d39e:	460c      	mov	r4, r1
 800d3a0:	b932      	cbnz	r2, 800d3b0 <_scanf_chars+0x1c>
 800d3a2:	698a      	ldr	r2, [r1, #24]
 800d3a4:	2a00      	cmp	r2, #0
 800d3a6:	bf0c      	ite	eq
 800d3a8:	2201      	moveq	r2, #1
 800d3aa:	f04f 32ff 	movne.w	r2, #4294967295
 800d3ae:	608a      	str	r2, [r1, #8]
 800d3b0:	6822      	ldr	r2, [r4, #0]
 800d3b2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800d440 <_scanf_chars+0xac>
 800d3b6:	06d1      	lsls	r1, r2, #27
 800d3b8:	bf5f      	itttt	pl
 800d3ba:	681a      	ldrpl	r2, [r3, #0]
 800d3bc:	1d11      	addpl	r1, r2, #4
 800d3be:	6019      	strpl	r1, [r3, #0]
 800d3c0:	6816      	ldrpl	r6, [r2, #0]
 800d3c2:	2700      	movs	r7, #0
 800d3c4:	69a0      	ldr	r0, [r4, #24]
 800d3c6:	b188      	cbz	r0, 800d3ec <_scanf_chars+0x58>
 800d3c8:	2801      	cmp	r0, #1
 800d3ca:	d107      	bne.n	800d3dc <_scanf_chars+0x48>
 800d3cc:	682b      	ldr	r3, [r5, #0]
 800d3ce:	781a      	ldrb	r2, [r3, #0]
 800d3d0:	6963      	ldr	r3, [r4, #20]
 800d3d2:	5c9b      	ldrb	r3, [r3, r2]
 800d3d4:	b953      	cbnz	r3, 800d3ec <_scanf_chars+0x58>
 800d3d6:	bb27      	cbnz	r7, 800d422 <_scanf_chars+0x8e>
 800d3d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3dc:	2802      	cmp	r0, #2
 800d3de:	d120      	bne.n	800d422 <_scanf_chars+0x8e>
 800d3e0:	682b      	ldr	r3, [r5, #0]
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800d3e8:	071b      	lsls	r3, r3, #28
 800d3ea:	d41a      	bmi.n	800d422 <_scanf_chars+0x8e>
 800d3ec:	6823      	ldr	r3, [r4, #0]
 800d3ee:	06da      	lsls	r2, r3, #27
 800d3f0:	bf5e      	ittt	pl
 800d3f2:	682b      	ldrpl	r3, [r5, #0]
 800d3f4:	781b      	ldrbpl	r3, [r3, #0]
 800d3f6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d3fa:	682a      	ldr	r2, [r5, #0]
 800d3fc:	686b      	ldr	r3, [r5, #4]
 800d3fe:	3201      	adds	r2, #1
 800d400:	602a      	str	r2, [r5, #0]
 800d402:	68a2      	ldr	r2, [r4, #8]
 800d404:	3b01      	subs	r3, #1
 800d406:	3a01      	subs	r2, #1
 800d408:	606b      	str	r3, [r5, #4]
 800d40a:	3701      	adds	r7, #1
 800d40c:	60a2      	str	r2, [r4, #8]
 800d40e:	b142      	cbz	r2, 800d422 <_scanf_chars+0x8e>
 800d410:	2b00      	cmp	r3, #0
 800d412:	dcd7      	bgt.n	800d3c4 <_scanf_chars+0x30>
 800d414:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d418:	4629      	mov	r1, r5
 800d41a:	4640      	mov	r0, r8
 800d41c:	4798      	blx	r3
 800d41e:	2800      	cmp	r0, #0
 800d420:	d0d0      	beq.n	800d3c4 <_scanf_chars+0x30>
 800d422:	6823      	ldr	r3, [r4, #0]
 800d424:	f013 0310 	ands.w	r3, r3, #16
 800d428:	d105      	bne.n	800d436 <_scanf_chars+0xa2>
 800d42a:	68e2      	ldr	r2, [r4, #12]
 800d42c:	3201      	adds	r2, #1
 800d42e:	60e2      	str	r2, [r4, #12]
 800d430:	69a2      	ldr	r2, [r4, #24]
 800d432:	b102      	cbz	r2, 800d436 <_scanf_chars+0xa2>
 800d434:	7033      	strb	r3, [r6, #0]
 800d436:	6923      	ldr	r3, [r4, #16]
 800d438:	441f      	add	r7, r3
 800d43a:	6127      	str	r7, [r4, #16]
 800d43c:	2000      	movs	r0, #0
 800d43e:	e7cb      	b.n	800d3d8 <_scanf_chars+0x44>
 800d440:	0800dd61 	.word	0x0800dd61

0800d444 <_scanf_i>:
 800d444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d448:	4698      	mov	r8, r3
 800d44a:	4b74      	ldr	r3, [pc, #464]	; (800d61c <_scanf_i+0x1d8>)
 800d44c:	460c      	mov	r4, r1
 800d44e:	4682      	mov	sl, r0
 800d450:	4616      	mov	r6, r2
 800d452:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d456:	b087      	sub	sp, #28
 800d458:	ab03      	add	r3, sp, #12
 800d45a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d45e:	4b70      	ldr	r3, [pc, #448]	; (800d620 <_scanf_i+0x1dc>)
 800d460:	69a1      	ldr	r1, [r4, #24]
 800d462:	4a70      	ldr	r2, [pc, #448]	; (800d624 <_scanf_i+0x1e0>)
 800d464:	2903      	cmp	r1, #3
 800d466:	bf18      	it	ne
 800d468:	461a      	movne	r2, r3
 800d46a:	68a3      	ldr	r3, [r4, #8]
 800d46c:	9201      	str	r2, [sp, #4]
 800d46e:	1e5a      	subs	r2, r3, #1
 800d470:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d474:	bf88      	it	hi
 800d476:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d47a:	4627      	mov	r7, r4
 800d47c:	bf82      	ittt	hi
 800d47e:	eb03 0905 	addhi.w	r9, r3, r5
 800d482:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d486:	60a3      	strhi	r3, [r4, #8]
 800d488:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d48c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d490:	bf98      	it	ls
 800d492:	f04f 0900 	movls.w	r9, #0
 800d496:	6023      	str	r3, [r4, #0]
 800d498:	463d      	mov	r5, r7
 800d49a:	f04f 0b00 	mov.w	fp, #0
 800d49e:	6831      	ldr	r1, [r6, #0]
 800d4a0:	ab03      	add	r3, sp, #12
 800d4a2:	7809      	ldrb	r1, [r1, #0]
 800d4a4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d4a8:	2202      	movs	r2, #2
 800d4aa:	f7f2 feb1 	bl	8000210 <memchr>
 800d4ae:	b328      	cbz	r0, 800d4fc <_scanf_i+0xb8>
 800d4b0:	f1bb 0f01 	cmp.w	fp, #1
 800d4b4:	d159      	bne.n	800d56a <_scanf_i+0x126>
 800d4b6:	6862      	ldr	r2, [r4, #4]
 800d4b8:	b92a      	cbnz	r2, 800d4c6 <_scanf_i+0x82>
 800d4ba:	6822      	ldr	r2, [r4, #0]
 800d4bc:	2308      	movs	r3, #8
 800d4be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d4c2:	6063      	str	r3, [r4, #4]
 800d4c4:	6022      	str	r2, [r4, #0]
 800d4c6:	6822      	ldr	r2, [r4, #0]
 800d4c8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d4cc:	6022      	str	r2, [r4, #0]
 800d4ce:	68a2      	ldr	r2, [r4, #8]
 800d4d0:	1e51      	subs	r1, r2, #1
 800d4d2:	60a1      	str	r1, [r4, #8]
 800d4d4:	b192      	cbz	r2, 800d4fc <_scanf_i+0xb8>
 800d4d6:	6832      	ldr	r2, [r6, #0]
 800d4d8:	1c51      	adds	r1, r2, #1
 800d4da:	6031      	str	r1, [r6, #0]
 800d4dc:	7812      	ldrb	r2, [r2, #0]
 800d4de:	f805 2b01 	strb.w	r2, [r5], #1
 800d4e2:	6872      	ldr	r2, [r6, #4]
 800d4e4:	3a01      	subs	r2, #1
 800d4e6:	2a00      	cmp	r2, #0
 800d4e8:	6072      	str	r2, [r6, #4]
 800d4ea:	dc07      	bgt.n	800d4fc <_scanf_i+0xb8>
 800d4ec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d4f0:	4631      	mov	r1, r6
 800d4f2:	4650      	mov	r0, sl
 800d4f4:	4790      	blx	r2
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	f040 8085 	bne.w	800d606 <_scanf_i+0x1c2>
 800d4fc:	f10b 0b01 	add.w	fp, fp, #1
 800d500:	f1bb 0f03 	cmp.w	fp, #3
 800d504:	d1cb      	bne.n	800d49e <_scanf_i+0x5a>
 800d506:	6863      	ldr	r3, [r4, #4]
 800d508:	b90b      	cbnz	r3, 800d50e <_scanf_i+0xca>
 800d50a:	230a      	movs	r3, #10
 800d50c:	6063      	str	r3, [r4, #4]
 800d50e:	6863      	ldr	r3, [r4, #4]
 800d510:	4945      	ldr	r1, [pc, #276]	; (800d628 <_scanf_i+0x1e4>)
 800d512:	6960      	ldr	r0, [r4, #20]
 800d514:	1ac9      	subs	r1, r1, r3
 800d516:	f000 f8a3 	bl	800d660 <__sccl>
 800d51a:	f04f 0b00 	mov.w	fp, #0
 800d51e:	68a3      	ldr	r3, [r4, #8]
 800d520:	6822      	ldr	r2, [r4, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d03d      	beq.n	800d5a2 <_scanf_i+0x15e>
 800d526:	6831      	ldr	r1, [r6, #0]
 800d528:	6960      	ldr	r0, [r4, #20]
 800d52a:	f891 c000 	ldrb.w	ip, [r1]
 800d52e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d532:	2800      	cmp	r0, #0
 800d534:	d035      	beq.n	800d5a2 <_scanf_i+0x15e>
 800d536:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d53a:	d124      	bne.n	800d586 <_scanf_i+0x142>
 800d53c:	0510      	lsls	r0, r2, #20
 800d53e:	d522      	bpl.n	800d586 <_scanf_i+0x142>
 800d540:	f10b 0b01 	add.w	fp, fp, #1
 800d544:	f1b9 0f00 	cmp.w	r9, #0
 800d548:	d003      	beq.n	800d552 <_scanf_i+0x10e>
 800d54a:	3301      	adds	r3, #1
 800d54c:	f109 39ff 	add.w	r9, r9, #4294967295
 800d550:	60a3      	str	r3, [r4, #8]
 800d552:	6873      	ldr	r3, [r6, #4]
 800d554:	3b01      	subs	r3, #1
 800d556:	2b00      	cmp	r3, #0
 800d558:	6073      	str	r3, [r6, #4]
 800d55a:	dd1b      	ble.n	800d594 <_scanf_i+0x150>
 800d55c:	6833      	ldr	r3, [r6, #0]
 800d55e:	3301      	adds	r3, #1
 800d560:	6033      	str	r3, [r6, #0]
 800d562:	68a3      	ldr	r3, [r4, #8]
 800d564:	3b01      	subs	r3, #1
 800d566:	60a3      	str	r3, [r4, #8]
 800d568:	e7d9      	b.n	800d51e <_scanf_i+0xda>
 800d56a:	f1bb 0f02 	cmp.w	fp, #2
 800d56e:	d1ae      	bne.n	800d4ce <_scanf_i+0x8a>
 800d570:	6822      	ldr	r2, [r4, #0]
 800d572:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d576:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d57a:	d1bf      	bne.n	800d4fc <_scanf_i+0xb8>
 800d57c:	2310      	movs	r3, #16
 800d57e:	6063      	str	r3, [r4, #4]
 800d580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d584:	e7a2      	b.n	800d4cc <_scanf_i+0x88>
 800d586:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d58a:	6022      	str	r2, [r4, #0]
 800d58c:	780b      	ldrb	r3, [r1, #0]
 800d58e:	f805 3b01 	strb.w	r3, [r5], #1
 800d592:	e7de      	b.n	800d552 <_scanf_i+0x10e>
 800d594:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d598:	4631      	mov	r1, r6
 800d59a:	4650      	mov	r0, sl
 800d59c:	4798      	blx	r3
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d0df      	beq.n	800d562 <_scanf_i+0x11e>
 800d5a2:	6823      	ldr	r3, [r4, #0]
 800d5a4:	05d9      	lsls	r1, r3, #23
 800d5a6:	d50d      	bpl.n	800d5c4 <_scanf_i+0x180>
 800d5a8:	42bd      	cmp	r5, r7
 800d5aa:	d909      	bls.n	800d5c0 <_scanf_i+0x17c>
 800d5ac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d5b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d5b4:	4632      	mov	r2, r6
 800d5b6:	4650      	mov	r0, sl
 800d5b8:	4798      	blx	r3
 800d5ba:	f105 39ff 	add.w	r9, r5, #4294967295
 800d5be:	464d      	mov	r5, r9
 800d5c0:	42bd      	cmp	r5, r7
 800d5c2:	d028      	beq.n	800d616 <_scanf_i+0x1d2>
 800d5c4:	6822      	ldr	r2, [r4, #0]
 800d5c6:	f012 0210 	ands.w	r2, r2, #16
 800d5ca:	d113      	bne.n	800d5f4 <_scanf_i+0x1b0>
 800d5cc:	702a      	strb	r2, [r5, #0]
 800d5ce:	6863      	ldr	r3, [r4, #4]
 800d5d0:	9e01      	ldr	r6, [sp, #4]
 800d5d2:	4639      	mov	r1, r7
 800d5d4:	4650      	mov	r0, sl
 800d5d6:	47b0      	blx	r6
 800d5d8:	f8d8 3000 	ldr.w	r3, [r8]
 800d5dc:	6821      	ldr	r1, [r4, #0]
 800d5de:	1d1a      	adds	r2, r3, #4
 800d5e0:	f8c8 2000 	str.w	r2, [r8]
 800d5e4:	f011 0f20 	tst.w	r1, #32
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	d00f      	beq.n	800d60c <_scanf_i+0x1c8>
 800d5ec:	6018      	str	r0, [r3, #0]
 800d5ee:	68e3      	ldr	r3, [r4, #12]
 800d5f0:	3301      	adds	r3, #1
 800d5f2:	60e3      	str	r3, [r4, #12]
 800d5f4:	1bed      	subs	r5, r5, r7
 800d5f6:	44ab      	add	fp, r5
 800d5f8:	6925      	ldr	r5, [r4, #16]
 800d5fa:	445d      	add	r5, fp
 800d5fc:	6125      	str	r5, [r4, #16]
 800d5fe:	2000      	movs	r0, #0
 800d600:	b007      	add	sp, #28
 800d602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d606:	f04f 0b00 	mov.w	fp, #0
 800d60a:	e7ca      	b.n	800d5a2 <_scanf_i+0x15e>
 800d60c:	07ca      	lsls	r2, r1, #31
 800d60e:	bf4c      	ite	mi
 800d610:	8018      	strhmi	r0, [r3, #0]
 800d612:	6018      	strpl	r0, [r3, #0]
 800d614:	e7eb      	b.n	800d5ee <_scanf_i+0x1aa>
 800d616:	2001      	movs	r0, #1
 800d618:	e7f2      	b.n	800d600 <_scanf_i+0x1bc>
 800d61a:	bf00      	nop
 800d61c:	0800dd34 	.word	0x0800dd34
 800d620:	0800ac7d 	.word	0x0800ac7d
 800d624:	0800aa2d 	.word	0x0800aa2d
 800d628:	0800e530 	.word	0x0800e530

0800d62c <_read_r>:
 800d62c:	b538      	push	{r3, r4, r5, lr}
 800d62e:	4d07      	ldr	r5, [pc, #28]	; (800d64c <_read_r+0x20>)
 800d630:	4604      	mov	r4, r0
 800d632:	4608      	mov	r0, r1
 800d634:	4611      	mov	r1, r2
 800d636:	2200      	movs	r2, #0
 800d638:	602a      	str	r2, [r5, #0]
 800d63a:	461a      	mov	r2, r3
 800d63c:	f7f5 f882 	bl	8002744 <_read>
 800d640:	1c43      	adds	r3, r0, #1
 800d642:	d102      	bne.n	800d64a <_read_r+0x1e>
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	b103      	cbz	r3, 800d64a <_read_r+0x1e>
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	bd38      	pop	{r3, r4, r5, pc}
 800d64c:	20005080 	.word	0x20005080

0800d650 <nan>:
 800d650:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d658 <nan+0x8>
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop
 800d658:	00000000 	.word	0x00000000
 800d65c:	7ff80000 	.word	0x7ff80000

0800d660 <__sccl>:
 800d660:	b570      	push	{r4, r5, r6, lr}
 800d662:	780b      	ldrb	r3, [r1, #0]
 800d664:	4604      	mov	r4, r0
 800d666:	2b5e      	cmp	r3, #94	; 0x5e
 800d668:	bf0b      	itete	eq
 800d66a:	784b      	ldrbeq	r3, [r1, #1]
 800d66c:	1c48      	addne	r0, r1, #1
 800d66e:	1c88      	addeq	r0, r1, #2
 800d670:	2200      	movne	r2, #0
 800d672:	bf08      	it	eq
 800d674:	2201      	moveq	r2, #1
 800d676:	1e61      	subs	r1, r4, #1
 800d678:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d67c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d680:	42a9      	cmp	r1, r5
 800d682:	d1fb      	bne.n	800d67c <__sccl+0x1c>
 800d684:	b90b      	cbnz	r3, 800d68a <__sccl+0x2a>
 800d686:	3801      	subs	r0, #1
 800d688:	bd70      	pop	{r4, r5, r6, pc}
 800d68a:	f082 0101 	eor.w	r1, r2, #1
 800d68e:	54e1      	strb	r1, [r4, r3]
 800d690:	1c42      	adds	r2, r0, #1
 800d692:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800d696:	2d2d      	cmp	r5, #45	; 0x2d
 800d698:	f102 36ff 	add.w	r6, r2, #4294967295
 800d69c:	4610      	mov	r0, r2
 800d69e:	d006      	beq.n	800d6ae <__sccl+0x4e>
 800d6a0:	2d5d      	cmp	r5, #93	; 0x5d
 800d6a2:	d0f1      	beq.n	800d688 <__sccl+0x28>
 800d6a4:	b90d      	cbnz	r5, 800d6aa <__sccl+0x4a>
 800d6a6:	4630      	mov	r0, r6
 800d6a8:	e7ee      	b.n	800d688 <__sccl+0x28>
 800d6aa:	462b      	mov	r3, r5
 800d6ac:	e7ef      	b.n	800d68e <__sccl+0x2e>
 800d6ae:	7816      	ldrb	r6, [r2, #0]
 800d6b0:	2e5d      	cmp	r6, #93	; 0x5d
 800d6b2:	d0fa      	beq.n	800d6aa <__sccl+0x4a>
 800d6b4:	42b3      	cmp	r3, r6
 800d6b6:	dcf8      	bgt.n	800d6aa <__sccl+0x4a>
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3001      	adds	r0, #1
 800d6bc:	4286      	cmp	r6, r0
 800d6be:	5421      	strb	r1, [r4, r0]
 800d6c0:	dcfb      	bgt.n	800d6ba <__sccl+0x5a>
 800d6c2:	43d8      	mvns	r0, r3
 800d6c4:	4430      	add	r0, r6
 800d6c6:	1c5d      	adds	r5, r3, #1
 800d6c8:	42b3      	cmp	r3, r6
 800d6ca:	bfa8      	it	ge
 800d6cc:	2000      	movge	r0, #0
 800d6ce:	182b      	adds	r3, r5, r0
 800d6d0:	3202      	adds	r2, #2
 800d6d2:	e7de      	b.n	800d692 <__sccl+0x32>

0800d6d4 <sniprintf>:
 800d6d4:	b40c      	push	{r2, r3}
 800d6d6:	b530      	push	{r4, r5, lr}
 800d6d8:	4b17      	ldr	r3, [pc, #92]	; (800d738 <sniprintf+0x64>)
 800d6da:	1e0c      	subs	r4, r1, #0
 800d6dc:	681d      	ldr	r5, [r3, #0]
 800d6de:	b09d      	sub	sp, #116	; 0x74
 800d6e0:	da08      	bge.n	800d6f4 <sniprintf+0x20>
 800d6e2:	238b      	movs	r3, #139	; 0x8b
 800d6e4:	602b      	str	r3, [r5, #0]
 800d6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ea:	b01d      	add	sp, #116	; 0x74
 800d6ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6f0:	b002      	add	sp, #8
 800d6f2:	4770      	bx	lr
 800d6f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d6f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d6fc:	bf14      	ite	ne
 800d6fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d702:	4623      	moveq	r3, r4
 800d704:	9304      	str	r3, [sp, #16]
 800d706:	9307      	str	r3, [sp, #28]
 800d708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d70c:	9002      	str	r0, [sp, #8]
 800d70e:	9006      	str	r0, [sp, #24]
 800d710:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d714:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d716:	ab21      	add	r3, sp, #132	; 0x84
 800d718:	a902      	add	r1, sp, #8
 800d71a:	4628      	mov	r0, r5
 800d71c:	9301      	str	r3, [sp, #4]
 800d71e:	f7ff f879 	bl	800c814 <_svfiprintf_r>
 800d722:	1c43      	adds	r3, r0, #1
 800d724:	bfbc      	itt	lt
 800d726:	238b      	movlt	r3, #139	; 0x8b
 800d728:	602b      	strlt	r3, [r5, #0]
 800d72a:	2c00      	cmp	r4, #0
 800d72c:	d0dd      	beq.n	800d6ea <sniprintf+0x16>
 800d72e:	9b02      	ldr	r3, [sp, #8]
 800d730:	2200      	movs	r2, #0
 800d732:	701a      	strb	r2, [r3, #0]
 800d734:	e7d9      	b.n	800d6ea <sniprintf+0x16>
 800d736:	bf00      	nop
 800d738:	20000020 	.word	0x20000020

0800d73c <strncasecmp_l>:
 800d73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d740:	4605      	mov	r5, r0
 800d742:	460e      	mov	r6, r1
 800d744:	461f      	mov	r7, r3
 800d746:	eb00 0802 	add.w	r8, r0, r2
 800d74a:	4545      	cmp	r5, r8
 800d74c:	d00e      	beq.n	800d76c <strncasecmp_l+0x30>
 800d74e:	4639      	mov	r1, r7
 800d750:	f815 0b01 	ldrb.w	r0, [r5], #1
 800d754:	f000 f80e 	bl	800d774 <tolower_l>
 800d758:	4639      	mov	r1, r7
 800d75a:	4604      	mov	r4, r0
 800d75c:	f816 0b01 	ldrb.w	r0, [r6], #1
 800d760:	f000 f808 	bl	800d774 <tolower_l>
 800d764:	1a24      	subs	r4, r4, r0
 800d766:	d102      	bne.n	800d76e <strncasecmp_l+0x32>
 800d768:	2800      	cmp	r0, #0
 800d76a:	d1ee      	bne.n	800d74a <strncasecmp_l+0xe>
 800d76c:	2400      	movs	r4, #0
 800d76e:	4620      	mov	r0, r4
 800d770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d774 <tolower_l>:
 800d774:	4b03      	ldr	r3, [pc, #12]	; (800d784 <tolower_l+0x10>)
 800d776:	5cc3      	ldrb	r3, [r0, r3]
 800d778:	f003 0303 	and.w	r3, r3, #3
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	bf08      	it	eq
 800d780:	3020      	addeq	r0, #32
 800d782:	4770      	bx	lr
 800d784:	0800dd61 	.word	0x0800dd61

0800d788 <__submore>:
 800d788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d78c:	460c      	mov	r4, r1
 800d78e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d790:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d794:	4299      	cmp	r1, r3
 800d796:	d11d      	bne.n	800d7d4 <__submore+0x4c>
 800d798:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d79c:	f7fa ffcc 	bl	8008738 <_malloc_r>
 800d7a0:	b918      	cbnz	r0, 800d7aa <__submore+0x22>
 800d7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7ae:	63a3      	str	r3, [r4, #56]	; 0x38
 800d7b0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d7b4:	6360      	str	r0, [r4, #52]	; 0x34
 800d7b6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d7ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d7be:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d7c2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d7c6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d7ca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d7ce:	6020      	str	r0, [r4, #0]
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	e7e8      	b.n	800d7a6 <__submore+0x1e>
 800d7d4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d7d6:	0077      	lsls	r7, r6, #1
 800d7d8:	463a      	mov	r2, r7
 800d7da:	f7fe ff99 	bl	800c710 <_realloc_r>
 800d7de:	4605      	mov	r5, r0
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	d0de      	beq.n	800d7a2 <__submore+0x1a>
 800d7e4:	eb00 0806 	add.w	r8, r0, r6
 800d7e8:	4601      	mov	r1, r0
 800d7ea:	4632      	mov	r2, r6
 800d7ec:	4640      	mov	r0, r8
 800d7ee:	f7fa fcbf 	bl	8008170 <memcpy>
 800d7f2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d7f6:	f8c4 8000 	str.w	r8, [r4]
 800d7fa:	e7e9      	b.n	800d7d0 <__submore+0x48>

0800d7fc <__ascii_wctomb>:
 800d7fc:	b149      	cbz	r1, 800d812 <__ascii_wctomb+0x16>
 800d7fe:	2aff      	cmp	r2, #255	; 0xff
 800d800:	bf85      	ittet	hi
 800d802:	238a      	movhi	r3, #138	; 0x8a
 800d804:	6003      	strhi	r3, [r0, #0]
 800d806:	700a      	strbls	r2, [r1, #0]
 800d808:	f04f 30ff 	movhi.w	r0, #4294967295
 800d80c:	bf98      	it	ls
 800d80e:	2001      	movls	r0, #1
 800d810:	4770      	bx	lr
 800d812:	4608      	mov	r0, r1
 800d814:	4770      	bx	lr
	...

0800d818 <__assert_func>:
 800d818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d81a:	4614      	mov	r4, r2
 800d81c:	461a      	mov	r2, r3
 800d81e:	4b09      	ldr	r3, [pc, #36]	; (800d844 <__assert_func+0x2c>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4605      	mov	r5, r0
 800d824:	68d8      	ldr	r0, [r3, #12]
 800d826:	b14c      	cbz	r4, 800d83c <__assert_func+0x24>
 800d828:	4b07      	ldr	r3, [pc, #28]	; (800d848 <__assert_func+0x30>)
 800d82a:	9100      	str	r1, [sp, #0]
 800d82c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d830:	4906      	ldr	r1, [pc, #24]	; (800d84c <__assert_func+0x34>)
 800d832:	462b      	mov	r3, r5
 800d834:	f000 f81a 	bl	800d86c <fiprintf>
 800d838:	f000 f91e 	bl	800da78 <abort>
 800d83c:	4b04      	ldr	r3, [pc, #16]	; (800d850 <__assert_func+0x38>)
 800d83e:	461c      	mov	r4, r3
 800d840:	e7f3      	b.n	800d82a <__assert_func+0x12>
 800d842:	bf00      	nop
 800d844:	20000020 	.word	0x20000020
 800d848:	0800e532 	.word	0x0800e532
 800d84c:	0800e53f 	.word	0x0800e53f
 800d850:	0800e56d 	.word	0x0800e56d

0800d854 <__env_lock>:
 800d854:	4801      	ldr	r0, [pc, #4]	; (800d85c <__env_lock+0x8>)
 800d856:	f7fa bc77 	b.w	8008148 <__retarget_lock_acquire_recursive>
 800d85a:	bf00      	nop
 800d85c:	20005076 	.word	0x20005076

0800d860 <__env_unlock>:
 800d860:	4801      	ldr	r0, [pc, #4]	; (800d868 <__env_unlock+0x8>)
 800d862:	f7fa bc73 	b.w	800814c <__retarget_lock_release_recursive>
 800d866:	bf00      	nop
 800d868:	20005076 	.word	0x20005076

0800d86c <fiprintf>:
 800d86c:	b40e      	push	{r1, r2, r3}
 800d86e:	b503      	push	{r0, r1, lr}
 800d870:	4601      	mov	r1, r0
 800d872:	ab03      	add	r3, sp, #12
 800d874:	4805      	ldr	r0, [pc, #20]	; (800d88c <fiprintf+0x20>)
 800d876:	f853 2b04 	ldr.w	r2, [r3], #4
 800d87a:	6800      	ldr	r0, [r0, #0]
 800d87c:	9301      	str	r3, [sp, #4]
 800d87e:	f7ff fac5 	bl	800ce0c <_vfiprintf_r>
 800d882:	b002      	add	sp, #8
 800d884:	f85d eb04 	ldr.w	lr, [sp], #4
 800d888:	b003      	add	sp, #12
 800d88a:	4770      	bx	lr
 800d88c:	20000020 	.word	0x20000020

0800d890 <_fstat_r>:
 800d890:	b538      	push	{r3, r4, r5, lr}
 800d892:	4d07      	ldr	r5, [pc, #28]	; (800d8b0 <_fstat_r+0x20>)
 800d894:	2300      	movs	r3, #0
 800d896:	4604      	mov	r4, r0
 800d898:	4608      	mov	r0, r1
 800d89a:	4611      	mov	r1, r2
 800d89c:	602b      	str	r3, [r5, #0]
 800d89e:	f7f4 ff7a 	bl	8002796 <_fstat>
 800d8a2:	1c43      	adds	r3, r0, #1
 800d8a4:	d102      	bne.n	800d8ac <_fstat_r+0x1c>
 800d8a6:	682b      	ldr	r3, [r5, #0]
 800d8a8:	b103      	cbz	r3, 800d8ac <_fstat_r+0x1c>
 800d8aa:	6023      	str	r3, [r4, #0]
 800d8ac:	bd38      	pop	{r3, r4, r5, pc}
 800d8ae:	bf00      	nop
 800d8b0:	20005080 	.word	0x20005080

0800d8b4 <gmtime_r>:
 800d8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8b8:	e9d0 6700 	ldrd	r6, r7, [r0]
 800d8bc:	460c      	mov	r4, r1
 800d8be:	4a51      	ldr	r2, [pc, #324]	; (800da04 <gmtime_r+0x150>)
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	4639      	mov	r1, r7
 800d8c6:	f7f3 f991 	bl	8000bec <__aeabi_ldivmod>
 800d8ca:	4639      	mov	r1, r7
 800d8cc:	4605      	mov	r5, r0
 800d8ce:	4a4d      	ldr	r2, [pc, #308]	; (800da04 <gmtime_r+0x150>)
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	f7f3 f98a 	bl	8000bec <__aeabi_ldivmod>
 800d8d8:	2a00      	cmp	r2, #0
 800d8da:	bfbc      	itt	lt
 800d8dc:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800d8e0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800d8e4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800d8e8:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800d8ec:	fbb2 f3f1 	udiv	r3, r2, r1
 800d8f0:	fb01 2213 	mls	r2, r1, r3, r2
 800d8f4:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800d8f8:	bfac      	ite	ge
 800d8fa:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 800d8fe:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 800d902:	60a3      	str	r3, [r4, #8]
 800d904:	fbb2 f3f1 	udiv	r3, r2, r1
 800d908:	fb01 2213 	mls	r2, r1, r3, r2
 800d90c:	6063      	str	r3, [r4, #4]
 800d90e:	6022      	str	r2, [r4, #0]
 800d910:	1cc3      	adds	r3, r0, #3
 800d912:	2207      	movs	r2, #7
 800d914:	fb93 f2f2 	sdiv	r2, r3, r2
 800d918:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800d91c:	1a9b      	subs	r3, r3, r2
 800d91e:	bf48      	it	mi
 800d920:	3307      	addmi	r3, #7
 800d922:	2800      	cmp	r0, #0
 800d924:	61a3      	str	r3, [r4, #24]
 800d926:	bfb8      	it	lt
 800d928:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 800d92c:	4936      	ldr	r1, [pc, #216]	; (800da08 <gmtime_r+0x154>)
 800d92e:	bfae      	itee	ge
 800d930:	fb90 f1f1 	sdivge	r1, r0, r1
 800d934:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 800d938:	fb93 f1f1 	sdivlt	r1, r3, r1
 800d93c:	4b33      	ldr	r3, [pc, #204]	; (800da0c <gmtime_r+0x158>)
 800d93e:	fb03 0001 	mla	r0, r3, r1, r0
 800d942:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800d946:	fbb0 f2f2 	udiv	r2, r0, r2
 800d94a:	4402      	add	r2, r0
 800d94c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 800d950:	fbb0 f3fc 	udiv	r3, r0, ip
 800d954:	1ad2      	subs	r2, r2, r3
 800d956:	f240 176d 	movw	r7, #365	; 0x16d
 800d95a:	4b2d      	ldr	r3, [pc, #180]	; (800da10 <gmtime_r+0x15c>)
 800d95c:	fbb0 f3f3 	udiv	r3, r0, r3
 800d960:	2664      	movs	r6, #100	; 0x64
 800d962:	1ad3      	subs	r3, r2, r3
 800d964:	fbb3 f5f7 	udiv	r5, r3, r7
 800d968:	fbb3 f3fc 	udiv	r3, r3, ip
 800d96c:	fbb5 f2f6 	udiv	r2, r5, r6
 800d970:	1ad3      	subs	r3, r2, r3
 800d972:	4403      	add	r3, r0
 800d974:	fb07 3315 	mls	r3, r7, r5, r3
 800d978:	2099      	movs	r0, #153	; 0x99
 800d97a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800d97e:	f10c 0c02 	add.w	ip, ip, #2
 800d982:	f103 0e01 	add.w	lr, r3, #1
 800d986:	fbbc f7f0 	udiv	r7, ip, r0
 800d98a:	4378      	muls	r0, r7
 800d98c:	3002      	adds	r0, #2
 800d98e:	f04f 0805 	mov.w	r8, #5
 800d992:	fbb0 f0f8 	udiv	r0, r0, r8
 800d996:	ebae 0000 	sub.w	r0, lr, r0
 800d99a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 800d99e:	45f4      	cmp	ip, lr
 800d9a0:	bf94      	ite	ls
 800d9a2:	f04f 0c02 	movls.w	ip, #2
 800d9a6:	f06f 0c09 	mvnhi.w	ip, #9
 800d9aa:	4467      	add	r7, ip
 800d9ac:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 800d9b0:	fb0c 5101 	mla	r1, ip, r1, r5
 800d9b4:	2f01      	cmp	r7, #1
 800d9b6:	bf98      	it	ls
 800d9b8:	3101      	addls	r1, #1
 800d9ba:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800d9be:	d30c      	bcc.n	800d9da <gmtime_r+0x126>
 800d9c0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800d9c4:	61e3      	str	r3, [r4, #28]
 800d9c6:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	60e0      	str	r0, [r4, #12]
 800d9ce:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800d9d2:	6223      	str	r3, [r4, #32]
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9da:	f015 0f03 	tst.w	r5, #3
 800d9de:	d102      	bne.n	800d9e6 <gmtime_r+0x132>
 800d9e0:	fb06 5212 	mls	r2, r6, r2, r5
 800d9e4:	b95a      	cbnz	r2, 800d9fe <gmtime_r+0x14a>
 800d9e6:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800d9ea:	fbb5 f2f6 	udiv	r2, r5, r6
 800d9ee:	fb06 5212 	mls	r2, r6, r2, r5
 800d9f2:	fab2 f282 	clz	r2, r2
 800d9f6:	0952      	lsrs	r2, r2, #5
 800d9f8:	333b      	adds	r3, #59	; 0x3b
 800d9fa:	4413      	add	r3, r2
 800d9fc:	e7e2      	b.n	800d9c4 <gmtime_r+0x110>
 800d9fe:	2201      	movs	r2, #1
 800da00:	e7fa      	b.n	800d9f8 <gmtime_r+0x144>
 800da02:	bf00      	nop
 800da04:	00015180 	.word	0x00015180
 800da08:	00023ab1 	.word	0x00023ab1
 800da0c:	fffdc54f 	.word	0xfffdc54f
 800da10:	00023ab0 	.word	0x00023ab0

0800da14 <_isatty_r>:
 800da14:	b538      	push	{r3, r4, r5, lr}
 800da16:	4d06      	ldr	r5, [pc, #24]	; (800da30 <_isatty_r+0x1c>)
 800da18:	2300      	movs	r3, #0
 800da1a:	4604      	mov	r4, r0
 800da1c:	4608      	mov	r0, r1
 800da1e:	602b      	str	r3, [r5, #0]
 800da20:	f7f4 fec9 	bl	80027b6 <_isatty>
 800da24:	1c43      	adds	r3, r0, #1
 800da26:	d102      	bne.n	800da2e <_isatty_r+0x1a>
 800da28:	682b      	ldr	r3, [r5, #0]
 800da2a:	b103      	cbz	r3, 800da2e <_isatty_r+0x1a>
 800da2c:	6023      	str	r3, [r4, #0]
 800da2e:	bd38      	pop	{r3, r4, r5, pc}
 800da30:	20005080 	.word	0x20005080

0800da34 <memmove>:
 800da34:	4288      	cmp	r0, r1
 800da36:	b510      	push	{r4, lr}
 800da38:	eb01 0402 	add.w	r4, r1, r2
 800da3c:	d902      	bls.n	800da44 <memmove+0x10>
 800da3e:	4284      	cmp	r4, r0
 800da40:	4623      	mov	r3, r4
 800da42:	d807      	bhi.n	800da54 <memmove+0x20>
 800da44:	1e43      	subs	r3, r0, #1
 800da46:	42a1      	cmp	r1, r4
 800da48:	d008      	beq.n	800da5c <memmove+0x28>
 800da4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da52:	e7f8      	b.n	800da46 <memmove+0x12>
 800da54:	4402      	add	r2, r0
 800da56:	4601      	mov	r1, r0
 800da58:	428a      	cmp	r2, r1
 800da5a:	d100      	bne.n	800da5e <memmove+0x2a>
 800da5c:	bd10      	pop	{r4, pc}
 800da5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da66:	e7f7      	b.n	800da58 <memmove+0x24>

0800da68 <_malloc_usable_size_r>:
 800da68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da6c:	1f18      	subs	r0, r3, #4
 800da6e:	2b00      	cmp	r3, #0
 800da70:	bfbc      	itt	lt
 800da72:	580b      	ldrlt	r3, [r1, r0]
 800da74:	18c0      	addlt	r0, r0, r3
 800da76:	4770      	bx	lr

0800da78 <abort>:
 800da78:	b508      	push	{r3, lr}
 800da7a:	2006      	movs	r0, #6
 800da7c:	f000 f82c 	bl	800dad8 <raise>
 800da80:	2001      	movs	r0, #1
 800da82:	f7f4 fe55 	bl	8002730 <_exit>

0800da86 <_raise_r>:
 800da86:	291f      	cmp	r1, #31
 800da88:	b538      	push	{r3, r4, r5, lr}
 800da8a:	4604      	mov	r4, r0
 800da8c:	460d      	mov	r5, r1
 800da8e:	d904      	bls.n	800da9a <_raise_r+0x14>
 800da90:	2316      	movs	r3, #22
 800da92:	6003      	str	r3, [r0, #0]
 800da94:	f04f 30ff 	mov.w	r0, #4294967295
 800da98:	bd38      	pop	{r3, r4, r5, pc}
 800da9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da9c:	b112      	cbz	r2, 800daa4 <_raise_r+0x1e>
 800da9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800daa2:	b94b      	cbnz	r3, 800dab8 <_raise_r+0x32>
 800daa4:	4620      	mov	r0, r4
 800daa6:	f000 f831 	bl	800db0c <_getpid_r>
 800daaa:	462a      	mov	r2, r5
 800daac:	4601      	mov	r1, r0
 800daae:	4620      	mov	r0, r4
 800dab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dab4:	f000 b818 	b.w	800dae8 <_kill_r>
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d00a      	beq.n	800dad2 <_raise_r+0x4c>
 800dabc:	1c59      	adds	r1, r3, #1
 800dabe:	d103      	bne.n	800dac8 <_raise_r+0x42>
 800dac0:	2316      	movs	r3, #22
 800dac2:	6003      	str	r3, [r0, #0]
 800dac4:	2001      	movs	r0, #1
 800dac6:	e7e7      	b.n	800da98 <_raise_r+0x12>
 800dac8:	2400      	movs	r4, #0
 800daca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dace:	4628      	mov	r0, r5
 800dad0:	4798      	blx	r3
 800dad2:	2000      	movs	r0, #0
 800dad4:	e7e0      	b.n	800da98 <_raise_r+0x12>
	...

0800dad8 <raise>:
 800dad8:	4b02      	ldr	r3, [pc, #8]	; (800dae4 <raise+0xc>)
 800dada:	4601      	mov	r1, r0
 800dadc:	6818      	ldr	r0, [r3, #0]
 800dade:	f7ff bfd2 	b.w	800da86 <_raise_r>
 800dae2:	bf00      	nop
 800dae4:	20000020 	.word	0x20000020

0800dae8 <_kill_r>:
 800dae8:	b538      	push	{r3, r4, r5, lr}
 800daea:	4d07      	ldr	r5, [pc, #28]	; (800db08 <_kill_r+0x20>)
 800daec:	2300      	movs	r3, #0
 800daee:	4604      	mov	r4, r0
 800daf0:	4608      	mov	r0, r1
 800daf2:	4611      	mov	r1, r2
 800daf4:	602b      	str	r3, [r5, #0]
 800daf6:	f7f4 fe0b 	bl	8002710 <_kill>
 800dafa:	1c43      	adds	r3, r0, #1
 800dafc:	d102      	bne.n	800db04 <_kill_r+0x1c>
 800dafe:	682b      	ldr	r3, [r5, #0]
 800db00:	b103      	cbz	r3, 800db04 <_kill_r+0x1c>
 800db02:	6023      	str	r3, [r4, #0]
 800db04:	bd38      	pop	{r3, r4, r5, pc}
 800db06:	bf00      	nop
 800db08:	20005080 	.word	0x20005080

0800db0c <_getpid_r>:
 800db0c:	f7f4 bdf8 	b.w	8002700 <_getpid>

0800db10 <_init>:
 800db10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db12:	bf00      	nop
 800db14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db16:	bc08      	pop	{r3}
 800db18:	469e      	mov	lr, r3
 800db1a:	4770      	bx	lr

0800db1c <_fini>:
 800db1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1e:	bf00      	nop
 800db20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db22:	bc08      	pop	{r3}
 800db24:	469e      	mov	lr, r3
 800db26:	4770      	bx	lr
